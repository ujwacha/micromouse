(undo-tree-save-format-version . 1)
"f2b75dea727ae4196513eba7c12e98a07ca4295f"
[nil nil nil nil (26033 23755 125261 60000) 0 nil]
([nil nil ((26 . 27) (22 . 26) (#(" " 0 1 (fontified t)) . -22) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (#("=" 0 1 (fontified t)) . -23) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (#(" " 0 1 (fontified t)) . -24) (undo-tree-id106 . -1) (undo-tree-id107 . -1) 25 (5 . 25) (#("u" 0 1 (fontified t face font-lock-preprocessor-face)) . -5) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (#("i" 0 1 (fontified t face font-lock-preprocessor-face)) . -6) (undo-tree-id110 . -1) (undo-tree-id111 . -1) 7 (6 . 7) (#("n" 0 1 (fontified t face font-lock-preprocessor-face)) . -6) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (#("e" 0 1 (fontified t face font-lock-preprocessor-face)) . -7) (undo-tree-id114 . -1) (undo-tree-id115 . -1) 8 (2 . 8) (1 . 2) (#("D" 0 1 (fontified t)) . -1) (undo-tree-id116 . -1) (#("E" 0 1 (fontified t)) . -2) (undo-tree-id117 . -1) (#("F" 0 1 (fontified t)) . -3) (undo-tree-id118 . -1) 4 (1 . 4) (t . -1)) nil (26033 23755 125254 73000) 0 nil])
([nil nil ((27 . 30)) nil (26033 23755 125225 434000) 0 nil])
([nil nil ((27 . 29)) nil (26033 23755 125224 39000) 0 nil])
([nil nil ((29 . 31)) nil (26033 23755 125222 549000) 0 nil])
([nil nil ((30 . 31) 30) nil (26033 23755 125220 785000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 30)) nil (26033 23755 125218 603000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 30) (undo-tree-id101 . 1)) nil (26033 23755 125216 440000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 30) (undo-tree-id100 . 1)) nil (26033 23755 125212 933000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 30) (undo-tree-id99 . 1)) nil (26033 23755 125209 649000) 0 nil])
([nil nil ((30 . 32)) nil (26033 23755 125206 832000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -29) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) 30) nil (26033 23755 125204 731000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -30) (undo-tree-id93 . -1) (#("n" 0 1 (fontified t)) . -31) (undo-tree-id94 . -1) 32 (30 . 32)) nil (26033 23755 125136 465000) 0 nil])
([nil nil ((48 . 50) (30 . 48)) nil (26033 23755 125131 483000) 0 nil])
([nil nil ((53 . 55) (52 . 54) (51 . 53) (50 . 51)) nil (26033 23755 125129 391000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -48) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -49) (undo-tree-id91 . -1) (undo-tree-id92 . -1) 50) nil (26033 23755 125126 190000) 0 nil])
([nil nil ((58 . 59) (53 . 58) (51 . 53) (#(" " 0 1 (fontified nil)) . -51) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (#(" " 0 1 (fontified t)) . 52)) nil (26033 23755 125118 262000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -60) (undo-tree-id85 . -2) (undo-tree-id86 . -2) 62 (59 . 62)) nil (26033 23755 125112 498000) 0 nil])
([nil nil ((57 . 58) (#("x" 0 1 (fontified t face font-lock-variable-name-face)) . -57) (undo-tree-id83 . -1) (undo-tree-id84 . -1) 58) nil (26033 23755 125107 193000) 0 nil])
([nil nil ((67 . 68) (66 . 67) (#("u" 0 1 (fontified t face font-lock-variable-name-face)) . -66) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (#(";" 0 1 (fontified t)) . -67) (undo-tree-id81 . -1) (undo-tree-id82 . -1) 68 (67 . 68) (62 . 67) (60 . 62)) nil (26033 23755 125101 95000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t face font-lock-variable-name-face)) . -72) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (#("o" 0 1 (fontified t face font-lock-variable-name-face)) . -73) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (#("r" 0 1 (fontified t face font-lock-keyword-face)) . -74) (undo-tree-id75 . -1) (undo-tree-id76 . -1) 75 (#(" " 0 1 (fontified t)) . -75) (undo-tree-id77 . -1) (undo-tree-id78 . -1) 76 (72 . 76)) nil (26033 23755 125084 319000) 0 nil])
([nil nil ((93 . 94) (72 . 74) (90 . 91) (85 . 90) (#("p" 0 1 (fontified t face font-lock-type-face)) . -85) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (#("o" 0 1 (fontified t face font-lock-type-face)) . -86) (undo-tree-id59 . -1) (undo-tree-id60 . -1) 87 (81 . 87) (#("r" 0 1 (fontified t face font-lock-type-face)) . -81) (undo-tree-id61 . -1) (undo-tree-id62 . -1) 82 (77 . 82) (72 . 77) (#("r" 0 1 (fontified t face font-lock-variable-name-face)) . -72) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (#("e" 0 1 (fontified t face font-lock-variable-name-face)) . -73) (undo-tree-id65 . -1) (undo-tree-id66 . -1) 74 (72 . 74) (#(" " 0 1 (fontified t)) . -72) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (#(" " 0 1 (fontified t)) . -73) (undo-tree-id69 . -1) (undo-tree-id70 . -1) 74 (72 . 74)) nil (26033 23755 125063 493000) 0 nil])
([nil nil ((70 . 71)) nil (26033 23755 125035 805000) 0 nil])
([nil nil ((98 . 102) (#("b" 0 1 (fontified t face font-lock-function-name-face)) . -98) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (#("a" 0 1 (fontified t face font-lock-function-name-face)) . -99) (undo-tree-id45 . -1) (undo-tree-id46 . -1) 100 (94 . 100) (#("d" 0 1 (fontified t face font-lock-function-name-face)) . -94) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (#("e" 0 1 (fontified t face font-lock-function-name-face)) . -95) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (#("f" 0 1 (fontified t face font-lock-function-name-face)) . -96) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (#("i" 0 1 (fontified t face font-lock-function-name-face)) . -97) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (#("u" 0 1 (fontified t face font-lock-function-name-face)) . -98) (undo-tree-id55 . -1) (undo-tree-id56 . -1) 99 (93 . 99)) nil (26033 23755 125030 475000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . 73) 102) nil (26033 23755 125004 468000) 0 nil])
([nil nil ((101 . 111) (#("p" 0 1 (fontified t)) . -101) (undo-tree-id41 . -1) (undo-tree-id42 . -1) 102 (101 . 102)) nil (26033 23755 125001 151000) 0 nil])
([nil nil ((115 . 117) (114 . 116) (113 . 115) (112 . 113)) nil (26033 23755 124995 133000) 0 nil])
([nil nil ((117 . 119) (#("  " 0 2 (fontified nil)) . 116) (undo-tree-id36 . -2) (undo-tree-id37 . -2) (116 . 119) (#("  " 0 2 (fontified nil)) . 115) (undo-tree-id38 . -2) (117 . 118) (115 . 117) (#(" " 0 1 (fontified nil)) . -115) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (#(" " 0 1 (fontified t)) . 116)) nil (26033 23755 124990 563000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -136) (undo-tree-id34 . -1) (undo-tree-id35 . -1) 137 (125 . 137) (118 . 125) (116 . 118)) nil (26033 23755 124979 202000) 0 nil])
([nil nil ((147 . 149) (#("  " 0 2 (fontified nil)) . 146) (undo-tree-id30 . -2) (undo-tree-id31 . -2) (145 . 149) (144 . 145) (140 . 144) (#("b" 0 1 (fontified t)) . -140) (undo-tree-id32 . -1) (undo-tree-id33 . -1) 141 (136 . 141)) nil (26033 23755 124971 224000) 0 nil])
([nil nil ((162 . 167) (155 . 162) (#(" " 0 1 (fontified t)) . -155) (undo-tree-id26 . -1) (undo-tree-id27 . -1) 156 (149 . 156) (147 . 149) (#("  " 0 2 (fontified nil)) . 146) (undo-tree-id28 . -2) (undo-tree-id29 . -2) (148 . 149) (146 . 148)) nil (26033 23755 124959 671000) 0 nil])
([nil nil ((#("default" 0 1 (fontified t c-in-sws t face font-lock-variable-name-face) 1 2 (fontified t c-in-sws t face font-lock-variable-name-face) 2 3 (fontified t c-in-sws t face font-lock-variable-name-face) 3 4 (fontified t c-in-sws t face font-lock-variable-name-face) 4 5 (fontified t c-in-sws t face font-lock-variable-name-face) 5 6 (fontified t c-in-sws t face font-lock-variable-name-face) 6 7 (fontified t c-in-sws t face font-lock-variable-name-face)) . 9) (undo-tree-id25 . -6)) nil (26033 23755 124949 314000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t c-in-sws t face font-lock-variable-name-face)) . 9)) nil (26033 23755 124946 180000) 0 nil])
([nil nil ((#("speed " 0 1 (fontified t c-in-sws t face font-lock-variable-name-face) 1 2 (fontified t c-in-sws t face font-lock-variable-name-face) 2 3 (fontified t c-in-sws t face font-lock-variable-name-face) 3 4 (fontified t c-in-sws t face font-lock-variable-name-face) 4 5 (fontified t c-in-sws t face font-lock-variable-name-face) 5 6 (fontified t c-in-sws t)) . 9) (undo-tree-id24 . -5)) nil (26033 23755 124944 176000) 0 nil])
([nil nil ((9 . 19)) nil (26033 23755 124941 150000) 0 nil])
([nil nil ((16 . 18) (#("e" 0 1 (fontified t c-in-sws t face font-lock-variable-name-face)) . -16) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (#("d" 0 1 (fontified t c-in-sws t face font-lock-variable-name-face)) . -17) (undo-tree-id22 . -1) (undo-tree-id23 . -1) 18) nil (26033 23755 124938 262000) 0 nil])
([nil nil ((#("default" 0 1 (fontified t face font-lock-keyword-face) 1 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t face font-lock-keyword-face)) . 156) (undo-tree-id19 . -6)) nil (26033 23755 124929 414000) 0 nil])
([nil nil ((170 . 174) (#("u" 0 1 (fontified t)) . -170) (undo-tree-id17 . -1) (undo-tree-id18 . -1) 171 (156 . 171)) nil (26033 23755 124925 830000) 0 nil])
([nil nil ((174 . 175)) nil (26033 23755 124920 880000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -177) (undo-tree-id13 . -2) (undo-tree-id14 . -2) 179 (177 . 179) (#("  " 0 2 (fontified nil)) . 176) (undo-tree-id15 . -2) (undo-tree-id16 . -2) (175 . 179)) nil (26033 23755 124918 268000) 0 nil])
([nil nil ((179 . 190) (177 . 179) (#("  " 0 2 (fontified nil)) . 176) (undo-tree-id11 . -2) (undo-tree-id12 . -2) (178 . 179) (176 . 178)) nil (26033 23755 124904 557000) 0 nil])
([nil nil ((nil rear-nonsticky nil 208 . 209) (nil fontified nil 190 . 209) (190 . 209) 189) nil (26033 23755 124898 539000) 0 nil])
([nil nil ((#("  
" 0 2 (fontified t) 2 3 (fontified t)) . 211) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -2) 212) nil (26033 23755 124895 69000) 0 nil])
([nil nil ((#("  
" 0 2 (fontified t) 2 3 (fontified t)) . 211) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -2) 212) nil (26033 23755 124888 495000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 210)) nil (26033 23755 124882 473000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -211) (undo-tree-id1 . -2) (undo-tree-id2 . -2) 213 (211 . 213) (#("  " 0 2 (fontified nil)) . 210) (undo-tree-id3 . -2) (undo-tree-id4 . -2) (209 . 213)) nil (26033 23755 124879 8000) 0 nil])
([nil nil ((#("
" 0 1 (c-is-sws t c-in-sws t fontified t)) . 25)) nil (26033 23755 124869 69000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 209)) nil (26033 23755 124866 932000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 209) (undo-tree-id0 . 1)) nil (26033 23755 124862 187000) 0 nil])
([nil nil ((210 . 211)) nil (26033 23755 124815 807000) 0 nil])
([nil nil ((225 . 226) (219 . 225) (#("n" 0 1 (fontified t)) . -219) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) 220 (212 . 220) (210 . 212) (#("  " 0 2 (fontified nil)) . 209) (undo-tree-id130 . -2) (undo-tree-id131 . -2) (undo-tree-id132 . -2) (undo-tree-id133 . -2) (undo-tree-id134 . -2) (undo-tree-id135 . -2) (undo-tree-id136 . -2) (undo-tree-id137 . -2) (undo-tree-id138 . -2) (undo-tree-id139 . -2) (undo-tree-id140 . -2) (208 . 212) (t 26033 23755 135786 569000)) nil (26033 23767 337894 868000) 0 nil])
([nil nil ((39 . 40) (25 . 39) (24 . 25) (23 . 24) (t 26033 23767 350961 780000)) nil (26033 25309 32628 291000) 0 nil])
([nil nil ((#("PID" 0 1 (fontified t c-in-sws t face font-lock-variable-name-face) 1 2 (fontified t c-in-sws t face font-lock-variable-name-face) 2 3 (fontified t c-in-sws t face font-lock-variable-name-face)) . 36) (undo-tree-id242 . -2)) nil (26033 25309 32623 786000) 0 nil])
([nil nil ((36 . 39)) nil (26033 25309 32620 199000) 0 nil])
([nil nil ((#("A" 0 1 (fontified t c-in-sws t face font-lock-variable-name-face)) . -39) (undo-tree-id241 . -1) 40 (39 . 40)) nil (26033 25309 32617 414000) 0 nil])
([nil nil ((43 . 44) (39 . 43) (#(";" 0 1 (fontified t c-in-sws t)) . -39) (undo-tree-id237 . -1) (undo-tree-id238 . 1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) 40) nil (26033 25309 32610 930000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t c-in-sws t)) . -22) (undo-tree-id235 . -1) (undo-tree-id236 . -1) 23) nil (26033 25309 32600 456000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t c-in-sws t)) . -42) (undo-tree-id233 . -1) (undo-tree-id234 . -1) 43) nil (26033 25309 32578 283000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -230) (undo-tree-id227 . -2) (undo-tree-id228 . -2) 232 (230 . 232) (#("  " 0 2 (fontified nil)) . 229) (undo-tree-id229 . -2) (undo-tree-id230 . -2) (229 . 232) (#("  " 0 2 (fontified nil)) . 228) (undo-tree-id231 . -2) (undo-tree-id232 . -2) (227 . 231)) nil (26033 25309 32570 387000) 0 nil])
([nil nil ((243 . 253) (#(" " 0 1 (fontified t)) . -243) (undo-tree-id223 . -1) (undo-tree-id224 . -1) 244 (243 . 244) (#(" " 0 1 (fontified t)) . -243) (undo-tree-id225 . -1) (undo-tree-id226 . -1) 244 (235 . 244) (234 . 236) (231 . 234) (229 . 231)) nil (26033 25309 32553 244000) 0 nil])
([nil nil ((257 . 261) (256 . 260) (255 . 257) (254 . 255)) nil (26033 25309 32540 97000) 0 nil])
([nil nil ((#("  if (retval.a > MAX_PWM) {
    
  }

" 0 2 (fontified t) 2 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t) 5 6 (fontified t face (rainbow-delimiters-depth-2-face)) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t) 12 13 (fontified t) 13 14 (fontified t) 14 15 (fontified t) 15 16 (fontified t) 16 17 (fontified t) 17 18 (fontified t) 18 19 (fontified t) 19 20 (fontified t) 20 21 (fontified t) 21 22 (fontified t) 22 23 (fontified t) 23 24 (fontified t) 24 25 (fontified t face (rainbow-delimiters-depth-2-face)) 25 26 (fontified t) 26 27 (fontified t face (rainbow-delimiters-depth-2-face)) 27 35 (fontified t) 35 36 (fontified t face (rainbow-delimiters-depth-2-face)) 36 37 (fontified t) 37 38 (fontified t)) . 229) (undo-tree-id217 . 6) (undo-tree-id218 . -37) (undo-tree-id219 . -37) (undo-tree-id220 . -37) (undo-tree-id221 . -37) (undo-tree-id222 . -37)) nil (26033 25309 32524 631000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 228) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1)) nil (26033 25309 32509 162000) 0 nil])
([nil nil ((85 . 87)) nil (26033 25309 32499 551000) 0 nil])
([nil nil ((104 . 107) (103 . 104) (102 . 103) (#(" " 0 1 (fontified t)) . -102) (undo-tree-id192 . -1) (#("&" 0 1 (fontified t)) . -103) (undo-tree-id193 . -1) 104 (103 . 104) (#("*" 0 1 (fontified t)) . -103) (undo-tree-id194 . -1) 104 (103 . 104) (99 . 103) (98 . 100) (87 . 98) (#("m" 0 1 (fontified t)) . -87) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (#("a" 0 1 (fontified t)) . -88) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (#("n" 0 1 (fontified t)) . -89) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (#("a" 0 1 (fontified t)) . -90) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (#("g" 0 1 (fontified t)) . -91) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (#("e" 0 1 (fontified t)) . -92) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (#(" " 0 1 (fontified t)) . -93) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (#("s" 0 1 (fontified t)) . -94) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (#("t" 0 1 (fontified t)) . -95) (undo-tree-id211 . -1) (undo-tree-id212 . -1) 96 (87 . 96)) nil (26033 25309 32490 203000) 0 nil])
([nil nil ((111 . 113) (110 . 112) (109 . 111) (108 . 109)) nil (26033 25309 32442 745000) 0 nil])
([nil nil ((118 . 127) (117 . 118) (116 . 118) (113 . 116) (#("d" 0 1 (fontified t)) . -113) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (#("a" 0 1 (fontified t)) . -114) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (#("t" 0 1 (fontified t)) . -115) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (#("a" 0 1 (fontified t)) . -116) (undo-tree-id177 . -1) (undo-tree-id178 . -1) 117 (#(" " 0 1 (fontified t)) . -117) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (#("=" 0 1 (fontified t)) . -118) (undo-tree-id181 . -1) 119 (113 . 119) (#("i" 0 1 (fontified t)) . -113) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (#("f" 0 1 (fontified t face font-lock-keyword-face)) . -114) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (#(" " 0 1 (fontified t)) . -115) (undo-tree-id186 . -1) (undo-tree-id187 . -1) 116 (#("(" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -116) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . 117) (116 . 118) (113 . 116) (111 . 113) (#(" " 0 1 (fontified nil)) . -111) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (#(" " 0 1 (fontified t)) . 112)) nil (26033 25309 32431 902000) 0 nil])
([nil nil ((145 . 146) (136 . 145) (135 . 136) (#("i" 0 1 (fontified t)) . -135) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (#("n" 0 1 (fontified t)) . -136) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (#("p" 0 1 (fontified t)) . -137) (undo-tree-id169 . -1) (undo-tree-id170 . -1) 138 (135 . 138) (131 . 135) (130 . 134) (129 . 131) (128 . 129)) nil (26033 25309 32380 746000) 0 nil])
([nil nil ((#("else" 0 4 (fontified nil face font-lock-keyword-face)) . 155) (151 . 155) 162 (158 . 162) (157 . 161) (156 . 158) (155 . 156) (#("else" 0 1 (fontified nil face font-lock-keyword-face) 1 2 (fontified nil face font-lock-keyword-face) 2 3 (fontified nil face font-lock-keyword-face) 3 4 (fontified nil face font-lock-keyword-face)) . 155) (undo-tree-id163 . -3) (undo-tree-id164 . -4) (151 . 155) 155 (150 . 155)) nil (26033 25309 32362 1000) 0 nil])
([nil nil ((#("else" 0 4 (fontified nil face font-lock-keyword-face)) . 155) (151 . 155) 162 (158 . 162) (#("   " 0 3 (fontified nil)) . -158) (undo-tree-id161 . -3) (undo-tree-id162 . -3) (#(" " 0 1 (fontified t)) . 161)) nil (26033 25309 31977 850000) 0 nil])
([nil nil ((161 . 171) (160 . 161) (159 . 161) (156 . 159)) nil (26033 25309 31970 356000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -171) (undo-tree-id160 . -1) 172 (171 . 172)) nil (26033 25309 31966 738000) 0 nil])
([nil nil ((189 . 190) (179 . 189) (178 . 179) (#("i" 0 1 (fontified t)) . -178) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (#("n" 0 1 (fontified t)) . -179) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (#("p" 0 1 (fontified t)) . -180) (undo-tree-id156 . -1) (undo-tree-id157 . -1) 181 (180 . 181) (178 . 180) (174 . 178) (#("   " 0 3 (fontified nil)) . -174) (undo-tree-id158 . -3) (undo-tree-id159 . -3) (#(" " 0 1 (fontified t)) . 177)) nil (26033 25309 31959 381000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -195) (undo-tree-id150 . -2) (undo-tree-id151 . -2) 197 (194 . 197)) nil (26033 25309 31935 611000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -112) (undo-tree-id146 . -2) (undo-tree-id147 . -2) 114 (112 . 114) (#("  " 0 2 (fontified nil)) . 111) (undo-tree-id148 . -2) (undo-tree-id149 . -2) (110 . 114)) nil (26033 25309 31928 134000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -344) (undo-tree-id142 . -2) (undo-tree-id143 . -2) 346 (344 . 346) (#("  " 0 2 (fontified nil)) . 343) (undo-tree-id144 . -2) (undo-tree-id145 . -2) (342 . 346)) nil (26033 25309 31915 809000) 0 nil])
([nil nil ((352 . 361) (351 . 353) (345 . 351) (343 . 345)) nil (26033 25309 31903 951000) 0 nil])
([nil nil ((362 . 363)) nil (26033 25309 31900 255000) 0 nil])
([nil nil ((nil rear-nonsticky nil 365 . 366) (#("
" 0 1 (fontified nil)) . -384) (363 . 385) 362) nil (26033 25309 31895 934000) 0 nil])
([nil nil ((381 . 382) (#("a" 0 1 (fontified t)) . 381) (undo-tree-id141 . -1)) nil (26033 25309 31883 205000) 0 nil])
([nil nil ((#("255" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . 126) (undo-tree-id263 . -2) (undo-tree-id264 . -3) (t 26033 25309 42367 33000)) nil (26033 25333 863586 894000) 0 nil])
([nil nil ((126 . 133)) nil (26033 25333 863580 75000) 0 nil])
([nil nil ((#("255" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . 148) (undo-tree-id254 . -2) (undo-tree-id255 . -3) (undo-tree-id256 . -3) (undo-tree-id257 . -3) (undo-tree-id258 . -3) (undo-tree-id259 . -3) (undo-tree-id260 . -3) (undo-tree-id261 . -3) (undo-tree-id262 . -3)) nil (26033 25333 863576 167000) 0 nil])
([nil nil ((148 . 155)) nil (26033 25333 863551 547000) 0 nil])
([nil nil ((#("255" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . 178) (undo-tree-id252 . -2) (undo-tree-id253 . -3)) nil (26033 25333 863547 687000) 0 nil])
([nil nil ((178 . 185)) nil (26033 25333 863541 273000) 0 nil])
([nil nil ((#("255" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . 200) (undo-tree-id243 . -2) (undo-tree-id244 . -3) (undo-tree-id245 . -3) (undo-tree-id246 . -3) (undo-tree-id247 . -3) (undo-tree-id248 . -3) (undo-tree-id249 . -3) (undo-tree-id250 . -3) (undo-tree-id251 . -3)) nil (26033 25333 863535 406000) 0 nil])
([nil nil ((202 . 207) (200 . 202)) nil (26033 25333 863490 754000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t c-in-sws t)) . -19) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (#("5" 0 1 (fontified t c-in-sws t)) . -20) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (#("0" 0 1 (fontified t c-in-sws t)) . -21) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) 22 (t 26033 25333 873749 392000)) nil (26033 26906 147488 847000) 0 nil])
([nil nil ((22 . 23) (19 . 22) (#("4" 0 1 (fontified t c-in-sws t)) . -19) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (#("0" 0 1 (fontified t c-in-sws t)) . -20) (undo-tree-id738 . -1) (undo-tree-id739 . -1) 21 (19 . 21) (#("5" 0 1 (fontified t c-in-sws t)) . -19) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (#("0" 0 1 (fontified t c-in-sws t)) . -20) (undo-tree-id742 . -1) (undo-tree-id743 . -1) 21 (19 . 21) (#("-" 0 1 (fontified t c-in-sws t)) . -19) (undo-tree-id744 . -1) (undo-tree-id745 . -1) 20 (19 . 20)) nil (26033 26906 147346 688000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t c-in-sws t)) . -22) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) 23) nil (26033 26906 147318 734000) 0 nil])
([nil nil ((#("  if (*inp > MAX_PWM) {
    *inp = MAX_PWM;
  } else if (*inp < -MAX_PWM){
    *inp = -MAX_PWM;
  }

" 0 2 (fontified t) 2 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t) 5 6 (fontified t face (rainbow-delimiters-depth-2-face)) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t) 12 13 (fontified t) 13 14 (fontified t) 14 15 (fontified t) 15 16 (fontified t) 16 17 (fontified t) 17 18 (fontified t) 18 19 (fontified t) 19 20 (fontified t) 20 21 (fontified t face (rainbow-delimiters-depth-2-face)) 21 22 (fontified t) 22 23 (fontified t face (rainbow-delimiters-depth-2-face)) 23 24 (fontified t) 24 28 (fontified t) 28 29 (fontified t) 29 30 (fontified t) 30 31 (fontified t) 31 32 (fontified t) 32 33 (fontified t) 33 34 (fontified t) 34 35 (fontified t) 35 36 (fontified t) 36 37 (fontified t) 37 38 (fontified t) 38 39 (fontified t) 39 40 (fontified t) 40 41 (fontified t) 41 42 (fontified t) 42 43 (fontified t) 43 44 (fontified t) 44 46 (fontified t) 46 47 (fontified t face (rainbow-delimiters-depth-2-face)) 47 48 (fontified t) 48 52 (fontified t face font-lock-keyword-face) 52 53 (fontified t) 53 54 (fontified t face font-lock-keyword-face) 54 55 (fontified t face font-lock-keyword-face) 55 56 (fontified t) 56 57 (fontified t face (rainbow-delimiters-depth-2-face)) 57 58 (fontified t) 58 59 (fontified t) 59 60 (fontified t) 60 61 (fontified t) 61 62 (fontified t) 62 63 (fontified t) 63 64 (fontified t) 64 65 (fontified t) 65 66 (fontified t) 66 67 (fontified t) 67 68 (fontified t) 68 69 (fontified t) 69 70 (fontified t) 70 71 (fontified t) 71 72 (fontified t) 72 73 (fontified t face (rainbow-delimiters-depth-2-face)) 73 74 (fontified t face (rainbow-delimiters-depth-2-face)) 74 75 (fontified t) 75 79 (fontified t) 79 80 (fontified t) 80 81 (fontified t) 81 82 (fontified t) 82 83 (fontified t) 83 84 (fontified t) 84 85 (fontified t) 85 86 (fontified t) 86 87 (fontified t) 87 88 (fontified t) 88 89 (fontified t) 89 90 (fontified t) 90 91 (fontified t) 91 92 (fontified t) 92 93 (fontified t) 93 94 (fontified t) 94 95 (fontified t) 95 96 (fontified t) 96 98 (fontified t) 98 99 (fontified t face (rainbow-delimiters-depth-2-face)) 99 100 (fontified t) 100 101 (fontified t)) . 113) (undo-tree-id562 . -100) (undo-tree-id563 . -100) (undo-tree-id564 . -100) (undo-tree-id565 . -100) (undo-tree-id566 . -20) (undo-tree-id567 . -20) (undo-tree-id568 . -20) (undo-tree-id569 . -20) (undo-tree-id570 . -20) (undo-tree-id571 . -20) (undo-tree-id572 . -20) (undo-tree-id573 . -42) (undo-tree-id574 . -42) (undo-tree-id575 . -42) (undo-tree-id576 . -42) (undo-tree-id577 . -42) (undo-tree-id578 . -42) (undo-tree-id579 . -42) (undo-tree-id580 . -64) (undo-tree-id581 . -64) (undo-tree-id582 . -64) (undo-tree-id583 . -64) (undo-tree-id584 . -64) (undo-tree-id585 . -64) (undo-tree-id586 . -64) (undo-tree-id587 . -94) (undo-tree-id588 . -94) (undo-tree-id589 . -94) (undo-tree-id590 . -94) (undo-tree-id591 . -94) (undo-tree-id592 . -94) (undo-tree-id593 . -94) (undo-tree-id594 . -98) (undo-tree-id595 . -98) (undo-tree-id596 . -98) (undo-tree-id597 . -98) (undo-tree-id598 . -98) (undo-tree-id599 . -98) (undo-tree-id600 . -98) (undo-tree-id601 . -100) (undo-tree-id602 . -100) (undo-tree-id603 . -100) (undo-tree-id604 . -100) (undo-tree-id605 . -100) (undo-tree-id606 . -100) (undo-tree-id607 . -100) (undo-tree-id608 . -101) (undo-tree-id609 . -101) (undo-tree-id610 . -101) (undo-tree-id611 . -101) (undo-tree-id612 . -101) (undo-tree-id613 . -101) (undo-tree-id614 . -101) (undo-tree-id615 . -101) (undo-tree-id616 . -101) (undo-tree-id617 . -101) (undo-tree-id618 . -101) (undo-tree-id619 . -101) (undo-tree-id620 . -101) (undo-tree-id621 . -101) (undo-tree-id622 . -101) (undo-tree-id623 . -101) (undo-tree-id624 . -101) (undo-tree-id625 . -101) (undo-tree-id626 . -101) (undo-tree-id627 . -101) (undo-tree-id628 . -101) (undo-tree-id629 . -101) (undo-tree-id630 . -101) (undo-tree-id631 . -100) (undo-tree-id632 . -100) (undo-tree-id633 . -100) (undo-tree-id634 . -100) (undo-tree-id635 . -100) (undo-tree-id636 . -100) (undo-tree-id637 . -100) (undo-tree-id638 . -96) (undo-tree-id639 . -96) (undo-tree-id640 . -96) (undo-tree-id641 . -96) (undo-tree-id642 . -96) (undo-tree-id643 . -96) (undo-tree-id644 . -96) (undo-tree-id645 . -75) (undo-tree-id646 . -75) (undo-tree-id647 . -75) (undo-tree-id648 . -75) (undo-tree-id649 . -75) (undo-tree-id650 . -75) (undo-tree-id651 . -75) (undo-tree-id652 . -75) (undo-tree-id653 . -75) (undo-tree-id654 . -75) (undo-tree-id655 . -75) (undo-tree-id656 . -75) (undo-tree-id657 . -75) (undo-tree-id658 . -75) (undo-tree-id659 . -75) (undo-tree-id660 . -75) (undo-tree-id661 . -44) (undo-tree-id662 . -44) (undo-tree-id663 . -44) (undo-tree-id664 . -44) (undo-tree-id665 . -44) (undo-tree-id666 . -44) (undo-tree-id667 . -44) (undo-tree-id668 . -24) (undo-tree-id669 . -24) (undo-tree-id670 . -24) (undo-tree-id671 . -24) (undo-tree-id672 . -24) (undo-tree-id673 . -24) (undo-tree-id674 . -24) (undo-tree-id675 . -101) (undo-tree-id676 . -100) (undo-tree-id677 . -24) (undo-tree-id678 . -24) (undo-tree-id679 . -24) (undo-tree-id680 . -24) (undo-tree-id681 . -24) (undo-tree-id682 . -24) (undo-tree-id683 . -24) (undo-tree-id684 . -44) (undo-tree-id685 . -44) (undo-tree-id686 . -44) (undo-tree-id687 . -44) (undo-tree-id688 . -44) (undo-tree-id689 . -44) (undo-tree-id690 . -44) (undo-tree-id691 . -75) (undo-tree-id692 . -75) (undo-tree-id693 . -75) (undo-tree-id694 . -75) (undo-tree-id695 . -75) (undo-tree-id696 . -75) (undo-tree-id697 . -75) (undo-tree-id698 . -96) (undo-tree-id699 . -96) (undo-tree-id700 . -96) (undo-tree-id701 . -96) (undo-tree-id702 . -96) (undo-tree-id703 . -96) (undo-tree-id704 . -96) (undo-tree-id705 . -100) (undo-tree-id706 . -100) (undo-tree-id707 . -100) (undo-tree-id708 . -100) (undo-tree-id709 . -100) (undo-tree-id710 . -100) (undo-tree-id711 . -100) (undo-tree-id712 . -100) (undo-tree-id713 . -100) (undo-tree-id714 . -101) 213) nil (26033 26906 147263 841000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -281) (undo-tree-id541 . -2) (undo-tree-id542 . -2) (undo-tree-id543 . -2) (undo-tree-id544 . -2) (undo-tree-id545 . -2) (undo-tree-id546 . -2) (undo-tree-id547 . -2) (undo-tree-id548 . -2) (undo-tree-id549 . -2) (undo-tree-id550 . -2) (undo-tree-id551 . -2) 283 (281 . 283) (#("  " 0 2 (fontified nil)) . 280) (undo-tree-id552 . -2) (undo-tree-id553 . -2) (undo-tree-id554 . -2) (undo-tree-id555 . -2) (undo-tree-id556 . -2) (undo-tree-id557 . -2) (undo-tree-id558 . -2) (undo-tree-id559 . -2) (280 . 283) (#("  " 0 2 (fontified nil)) . 279) (undo-tree-id560 . -2) (undo-tree-id561 . -2) (278 . 282)) nil (26033 26906 147016 134000) 0 nil])
([nil nil ((nil rear-nonsticky nil 380 . 381) (nil fontified nil 280 . 381) (280 . 381)) nil (26033 26906 146976 162000) 0 nil])
([nil nil ((#("  manage(&retval.a);
" 0 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t face (rainbow-delimiters-depth-2-face)) 9 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t) 12 13 (fontified t) 13 14 (fontified t) 14 15 (fontified t) 15 16 (fontified t) 16 17 (fontified t) 17 18 (fontified t) 18 19 (fontified t face (rainbow-delimiters-depth-2-face)) 19 20 (fontified t) 20 21 (fontified t)) . 258) (undo-tree-id532 . -20) (undo-tree-id533 . -21) (undo-tree-id534 . -21) (undo-tree-id535 . -21) (undo-tree-id536 . -21) (undo-tree-id537 . -21) (undo-tree-id538 . -21) (undo-tree-id539 . -21) (undo-tree-id540 . -21)) nil (26033 26906 146972 265000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . 265) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1)) nil (26033 26906 146951 246000) 0 nil])
([nil nil ((#("void manage(int *inp) {


}" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t face font-lock-type-face) 3 4 (fontified t c-type c-decl-id-start face font-lock-type-face) 4 5 (fontified t) 5 6 (fontified t face font-lock-function-name-face) 6 7 (fontified t face font-lock-function-name-face) 7 8 (fontified t face font-lock-function-name-face) 8 9 (fontified t face font-lock-function-name-face) 9 10 (fontified t face font-lock-function-name-face) 10 11 (fontified t face font-lock-function-name-face) 11 12 (fontified t c-type c-decl-arg-start face (rainbow-delimiters-depth-1-face)) 12 13 (fontified t face font-lock-type-face) 13 14 (fontified t face font-lock-type-face) 14 15 (fontified t face font-lock-type-face) 15 16 (fontified t) 16 17 (fontified t) 17 18 (fontified t face font-lock-variable-name-face) 18 19 (fontified t face font-lock-variable-name-face) 19 20 (fontified t face font-lock-variable-name-face) 20 21 (fontified t face (rainbow-delimiters-depth-1-face)) 21 22 (fontified t) 22 23 (fontified t face (rainbow-delimiters-depth-1-face)) 23 24 (fontified t) 24 25 (fontified t) 25 26 (fontified t) 26 27 (fontified t face (rainbow-delimiters-depth-1-face))) . 87) (undo-tree-id336 . -26) (undo-tree-id337 . -26) (undo-tree-id338 . -26) (undo-tree-id339 . -25) (undo-tree-id340 . -25) (undo-tree-id341 . -25) (undo-tree-id342 . -25) (undo-tree-id343 . -25) (undo-tree-id344 . -26) (undo-tree-id345 . -26) (undo-tree-id346 . -26) (undo-tree-id347 . -26) (undo-tree-id348 . -26) (undo-tree-id349 . -26) (undo-tree-id350 . -26) (undo-tree-id351 . -26) (undo-tree-id352 . -26) (undo-tree-id353 . -26) (undo-tree-id354 . -26) (undo-tree-id355 . -26) (undo-tree-id356 . -26) (undo-tree-id357 . -26) (undo-tree-id358 . -26) (undo-tree-id359 . -26) (undo-tree-id360 . -26) (undo-tree-id361 . -26) (undo-tree-id362 . -26) (undo-tree-id363 . -26) (undo-tree-id364 . -26) (undo-tree-id365 . -26) (undo-tree-id366 . -26) (undo-tree-id367 . -26) (undo-tree-id368 . -26) (undo-tree-id369 . -26) (undo-tree-id370 . -26) (undo-tree-id371 . -26) (undo-tree-id372 . -26) (undo-tree-id373 . -26) (undo-tree-id374 . -26) (undo-tree-id375 . -26) (undo-tree-id376 . -26) (undo-tree-id377 . -26) (undo-tree-id378 . -26) (undo-tree-id379 . -26) (undo-tree-id380 . -26) (undo-tree-id381 . -26) (undo-tree-id382 . -26) (undo-tree-id383 . -26) (undo-tree-id384 . -26) (undo-tree-id385 . -26) (undo-tree-id386 . -26) (undo-tree-id387 . -26) (undo-tree-id388 . -26) (undo-tree-id389 . -26) (undo-tree-id390 . -26) (undo-tree-id391 . -26) (undo-tree-id392 . -26) (undo-tree-id393 . -26) (undo-tree-id394 . -26) (undo-tree-id395 . -26) (undo-tree-id396 . -26) (undo-tree-id397 . -26) (undo-tree-id398 . -26) (undo-tree-id399 . -26) (undo-tree-id400 . -26) (undo-tree-id401 . -26) (undo-tree-id402 . -26) (undo-tree-id403 . -26) (undo-tree-id404 . -26) (undo-tree-id405 . -26) (undo-tree-id406 . -26) (undo-tree-id407 . -26) (undo-tree-id408 . -26) (undo-tree-id409 . -26) (undo-tree-id410 . -26) (undo-tree-id411 . -26) (undo-tree-id412 . -26) (undo-tree-id413 . -26) (undo-tree-id414 . -26) (undo-tree-id415 . -26) (undo-tree-id416 . -26) (undo-tree-id417 . -26) (undo-tree-id418 . -26) (undo-tree-id419 . -26) (undo-tree-id420 . -26) (undo-tree-id421 . -26) (undo-tree-id422 . -26) (undo-tree-id423 . -26) (undo-tree-id424 . -26) (undo-tree-id425 . -26) (undo-tree-id426 . -26) (undo-tree-id427 . -26) (undo-tree-id428 . -26) (undo-tree-id429 . -26) (undo-tree-id430 . -26) (undo-tree-id431 . -26) (undo-tree-id432 . -26) (undo-tree-id433 . -26) (undo-tree-id434 . -26) (undo-tree-id435 . -26) (undo-tree-id436 . -26) (undo-tree-id437 . -26) (undo-tree-id438 . -26) (undo-tree-id439 . -26) (undo-tree-id440 . -26) (undo-tree-id441 . -26) (undo-tree-id442 . -26) (undo-tree-id443 . -26) (undo-tree-id444 . -26) (undo-tree-id445 . -26) (undo-tree-id446 . -26) (undo-tree-id447 . -26) (undo-tree-id448 . -26) (undo-tree-id449 . -26) (undo-tree-id450 . -26) (undo-tree-id451 . -26) (undo-tree-id452 . -26) (undo-tree-id453 . -26) (undo-tree-id454 . -26) (undo-tree-id455 . -26) (undo-tree-id456 . -26) (undo-tree-id457 . -26) (undo-tree-id458 . -26) (undo-tree-id459 . -26) (undo-tree-id460 . -26) (undo-tree-id461 . -26) (undo-tree-id462 . -26) (undo-tree-id463 . -26) (undo-tree-id464 . -26) (undo-tree-id465 . -26) (undo-tree-id466 . -26) (undo-tree-id467 . -26) (undo-tree-id468 . -26) (undo-tree-id469 . -26) (undo-tree-id470 . -26) (undo-tree-id471 . -26) (undo-tree-id472 . -26) (undo-tree-id473 . -26) (undo-tree-id474 . -26) (undo-tree-id475 . -26) (undo-tree-id476 . -26) (undo-tree-id477 . -26) (undo-tree-id478 . -26) (undo-tree-id479 . -26) (undo-tree-id480 . -26) (undo-tree-id481 . -26) (undo-tree-id482 . -26) (undo-tree-id483 . -26) (undo-tree-id484 . -26) (undo-tree-id485 . -26) (undo-tree-id486 . -26) (undo-tree-id487 . -26) (undo-tree-id488 . -26) (undo-tree-id489 . -26) (undo-tree-id490 . -26) (undo-tree-id491 . -26) (undo-tree-id492 . -26) (undo-tree-id493 . -26) (undo-tree-id494 . -26) (undo-tree-id495 . -26) (undo-tree-id496 . -26) (undo-tree-id497 . -27) (undo-tree-id498 . -26) (undo-tree-id499 . -26) (undo-tree-id500 . -26) (undo-tree-id501 . -26) (undo-tree-id502 . -26) (undo-tree-id503 . -26) (undo-tree-id504 . -26) (undo-tree-id505 . -26) (undo-tree-id506 . -26) (undo-tree-id507 . -26) (undo-tree-id508 . -25) (undo-tree-id509 . -25) (undo-tree-id510 . -25) (undo-tree-id511 . -25) (undo-tree-id512 . -25) (undo-tree-id513 . -25) (undo-tree-id514 . -25) (undo-tree-id515 . -24) (undo-tree-id516 . -24) (undo-tree-id517 . -24) (undo-tree-id518 . -24) (undo-tree-id519 . -24) (undo-tree-id520 . -24) (undo-tree-id521 . -24) (undo-tree-id522 . -27)) nil (26033 26906 146894 148000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . 259) (undo-tree-id334 . -1) (undo-tree-id335 . -1)) nil (26033 26906 146467 85000) 0 nil])
([nil nil ((#("inp " 0 4 (fontified t)) . 238) (undo-tree-id332 . -3) (undo-tree-id333 . -4)) nil (26033 26906 146461 542000) 0 nil])
([nil nil ((238 . 247) (#("t" 0 1 (fontified t)) . -238) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (#("e" 0 1 (fontified t)) . -239) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) 240 (238 . 240)) nil (26033 26906 146451 82000) 0 nil])
([nil nil ((#("inp " 0 4 (fontified t)) . 264) (undo-tree-id292 . -3) (undo-tree-id293 . -4)) nil (26033 26906 146370 844000) 0 nil])
([nil nil ((264 . 273) (#("t" 0 1 (fontified t)) . -264) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) 265 (264 . 265)) nil (26033 26906 148964 904000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . 297) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1)) nil (26033 26923 896155 517000) 0 nil] [nil nil ((#("(*" 0 1 (fontified t face (rainbow-delimiters-depth-2-face)) 1 2 (fontified t)) . 296) (undo-tree-id265 . -1) (undo-tree-id266 . -2) (undo-tree-id267 . -2) (undo-tree-id268 . -2) (undo-tree-id269 . -2) (undo-tree-id270 . -2) (undo-tree-id271 . -2) (undo-tree-id272 . -2) (undo-tree-id273 . -2)) ((296 . 298)) (26033 26906 146315 302000) 0 nil])
([nil nil ((#("inp " 0 4 (fontified t)) . 297) (undo-tree-id860 . -3) (undo-tree-id861 . -4)) nil (26033 26923 896138 889000) 0 nil])
nil
([nil nil ((304 . 306) (#("a" 0 1 (fontified t)) . -304) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) 305 (297 . 305)) nil (26033 26923 896129 635000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t)) . 304) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1)) nil (26033 26923 895969 86000) 0 nil])
([nil nil ((304 . 305)) nil (26033 26923 895917 868000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . 323) (undo-tree-id813 . -1) (undo-tree-id814 . -1)) nil (26033 26923 895914 368000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . 323) (undo-tree-id811 . -1) (undo-tree-id812 . -1)) nil (26033 26923 895908 44000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . 323) (undo-tree-id809 . -1) (undo-tree-id810 . -1)) nil (26033 26923 895900 684000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . 323) (undo-tree-id807 . -1) (undo-tree-id808 . -1)) nil (26033 26923 895890 892000) 0 nil])
([nil nil ((323 . 331)) nil (26033 26923 895852 446000) 0 nil])
([nil nil ((nil rear-nonsticky nil 464 . 465) (nil fontified nil 348 . 465) (348 . 465) (t 26033 26923 934478 285000)) nil (26033 26936 172780 512000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -348) (undo-tree-id874 . -2) (undo-tree-id875 . -2) (undo-tree-id876 . -2) (undo-tree-id877 . -2) (undo-tree-id878 . -2) (undo-tree-id879 . -2) (undo-tree-id880 . -2) (undo-tree-id881 . -2) (undo-tree-id882 . -2) (undo-tree-id883 . -2) (undo-tree-id884 . -2) 350 (347 . 350)) nil (26033 26936 172775 601000) 0 nil])
([nil nil ((362 . 363) (#("a" 0 1 (fontified t)) . 362) (undo-tree-id873 . -1)) nil (26033 26936 172753 831000) 0 nil])
([nil nil ((388 . 389) (#("a" 0 1 (fontified t)) . 388) (undo-tree-id872 . -1)) nil (26033 26936 172748 381000) 0 nil])
([nil nil ((421 . 422) (#("a" 0 1 (fontified t)) . 421) (undo-tree-id871 . -1)) nil (26033 26936 172740 316000) 0 nil])
([nil nil ((447 . 448) (#("a" 0 1 (fontified t)) . 447) (undo-tree-id870 . -1)) nil (26033 26936 172724 137000) 0 nil])
([nil nil ((#("
" 0 1 (rear-nonsticky t fontified t)) . 465) (t 26033 26936 186034 585000)) nil (26033 26943 763849 490000) 0 nil])
([nil nil ((#("
" 0 1 (rear-nonsticky t fontified t)) . 465)) nil (26033 26943 763846 448000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 465) (undo-tree-id886 . 1)) nil (26033 26943 763842 116000) 0 nil])
([nil nil ((#("  manage(&retval.b);
" 0 1 (fontified t) 1 2 (rear-nonsticky t fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t face (rainbow-delimiters-depth-2-face)) 9 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t) 12 13 (fontified t) 13 14 (fontified t) 14 15 (fontified t) 15 16 (fontified t) 16 17 (fontified t) 17 18 (fontified t) 18 19 (fontified t face (rainbow-delimiters-depth-2-face)) 19 20 (fontified t) 20 21 (fontified t)) . 466) (undo-tree-id885 . -20)) nil (26033 26943 763828 83000) 0 nil])
([nil current ((19 . 21) (#("1" 0 1 (fontified t c-in-sws t)) . -19) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (#("0" 0 1 (fontified t c-in-sws t)) . -20) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (#("0" 0 1 (fontified t c-in-sws t)) . -21) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) 22 (t 26033 26943 777807 216000)) nil (26033 27173 341709 82000) 0 nil])
nil
