(undo-tree-save-format-version . 1)
"17c8fa304cc4d0fb1908e54077bd23990aa10448"
[nil nil nil nil (26027 65311 507207 465000) 0 nil]
([nil nil ((2 . 19) (1 . 2) (t . -1)) nil (26027 65311 507204 435000) 0 nil])
([nil nil ((nil fontified t 19 . 20) (nil face (rainbow-delimiters-depth-1-face font-lock-string-face) 19 . 20) (19 . 20)) nil (26027 65311 507201 827000) 0 nil])
([nil nil ((30 . 32) (22 . 30) (20 . 22) (t 26027 65244 754216 659000)) nil (26027 65311 507198 593000) 0 nil])
([nil nil ((35 . 37) (34 . 36) (33 . 35) (32 . 33)) nil (26027 65311 507195 73000) 0 nil])
([nil nil ((45 . 46) (40 . 45) (#("h" 0 1 (fontified t)) . -40) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) 41 (37 . 41) (#("w" 0 1 (fontified t)) . -37) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (#("h" 0 1 (fontified t)) . -38) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (#("i" 0 1 (fontified t)) . -39) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (#("l" 0 1 (fontified t)) . -40) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (#("e" 0 1 (face font-lock-keyword-face fontified t)) . -41) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (#(" " 0 1 (fontified t)) . -42) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (#("t" 0 1 (fontified t)) . -43) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (#("r" 0 1 (fontified t)) . -44) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (#("u" 0 1 (fontified t)) . -45) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (#("e" 0 1 (face font-lock-constant-face fontified t)) . -46) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) 47 (43 . 47) (42 . 43) (#(" x" 0 2 (fontified nil)) . -42) (42 . 44) (#("while" 0 1 (face font-lock-keyword-face fontified nil) 1 2 (face font-lock-keyword-face fontified nil) 2 3 (face font-lock-keyword-face fontified nil) 3 4 (face font-lock-keyword-face fontified nil) 4 5 (face font-lock-keyword-face fontified nil)) . 42) (undo-tree-id804 . -5) (undo-tree-id805 . -3) (undo-tree-id806 . -3) (undo-tree-id807 . -3) (undo-tree-id808 . -3) (undo-tree-id809 . -3) (undo-tree-id810 . -3) (undo-tree-id811 . -3) (undo-tree-id812 . -3) (undo-tree-id813 . -4) (undo-tree-id814 . -4) (undo-tree-id815 . -4) (undo-tree-id816 . -4) (undo-tree-id817 . -4) (undo-tree-id818 . -4) (undo-tree-id819 . -4) (undo-tree-id820 . -4) (undo-tree-id821 . -5) (undo-tree-id822 . -5) (undo-tree-id823 . -5) (undo-tree-id824 . -5) (undo-tree-id825 . -5) (undo-tree-id826 . -5) (undo-tree-id827 . -5) (undo-tree-id828 . -5) (37 . 42) 42 (37 . 42) (35 . 37) (#(" " 0 1 (fontified nil)) . -35) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (#(" " 0 1 (fontified t)) . 36) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1)) nil (26027 65311 507103 34000) 0 nil])
([nil nil ((48 . 49)) nil (26027 65311 504995 127000) 0 nil])
([nil nil ((21 . 29) (20 . 21) (19 . 20) (t 26027 65311 517971 788000)) nil (26027 65404 947317 941000) 0 nil])
([nil nil ((#("#include 
" 0 1 (face font-lock-preprocessor-face c-in-sws t c-is-sws t fontified t) 1 2 (face font-lock-preprocessor-face c-in-sws t fontified t) 2 3 (face font-lock-preprocessor-face c-in-sws t fontified t) 3 4 (face font-lock-preprocessor-face c-in-sws t fontified t) 4 5 (face font-lock-preprocessor-face c-in-sws t fontified t) 5 6 (face font-lock-preprocessor-face c-in-sws t fontified t) 6 7 (face font-lock-preprocessor-face c-in-sws t fontified t) 7 8 (face font-lock-preprocessor-face c-in-sws t fontified t) 8 9 (c-in-sws t fontified t) 9 10 (c-in-sws t fontified t)) . 20) (undo-tree-id1102 . -9) (undo-tree-id1103 . 1) (undo-tree-id1104 . -9) (undo-tree-id1105 . -9) (undo-tree-id1106 . -8) (undo-tree-id1107 . 1) 28) nil (26027 65404 947313 802000) 0 nil])
([nil nil ((35 . 43) (nil syntax-table nil 35 . 36) (nil syntax-table (1) 29 . 30) (#("header\"" 0 6 (c-in-sws t face font-lock-string-face fontified nil) 6 7 (c-in-sws t face font-lock-string-face fontified nil)) . 35) (undo-tree-id931 . -7) (undo-tree-id932 . -6) (undo-tree-id933 . 7) (#("stdio.h\"" 0 8 (fontified nil)) . -35) (nil syntax-table nil 50 . 51) (nil syntax-table (1) 49 . 50) (35 . 43) (#("st" 0 1 (face font-lock-string-face c-in-sws t fontified t) 1 2 (face font-lock-string-face c-in-sws t fontified t)) . -35) (undo-tree-id934 . -2) (undo-tree-id935 . -2) (undo-tree-id936 . -2) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -2) (undo-tree-id991 . -2) (undo-tree-id992 . -2) (undo-tree-id993 . -2) (undo-tree-id994 . -2) (undo-tree-id995 . -2) (undo-tree-id996 . -2) (undo-tree-id997 . -2) (undo-tree-id998 . -2) (undo-tree-id999 . -2) (undo-tree-id1000 . -2) (undo-tree-id1001 . -2) (undo-tree-id1002 . -2) (undo-tree-id1003 . -2) (undo-tree-id1004 . -2) (undo-tree-id1005 . -2) (undo-tree-id1006 . -2) (undo-tree-id1007 . -2) (undo-tree-id1008 . -2) (undo-tree-id1009 . -2) (undo-tree-id1010 . -2) (undo-tree-id1011 . -2) (undo-tree-id1012 . -2) (undo-tree-id1013 . -2) (undo-tree-id1014 . -2) (undo-tree-id1015 . -2) (undo-tree-id1016 . -2) (undo-tree-id1017 . -2) (undo-tree-id1018 . -2) (undo-tree-id1019 . -2) (undo-tree-id1020 . -2) (undo-tree-id1021 . -2) (undo-tree-id1022 . -2) (undo-tree-id1023 . -2) (undo-tree-id1024 . -2) (undo-tree-id1025 . -2) (undo-tree-id1026 . -2) (undo-tree-id1027 . -2) (undo-tree-id1028 . -2) (undo-tree-id1029 . -2) (undo-tree-id1030 . -2) (undo-tree-id1031 . -2) (undo-tree-id1032 . -2) (undo-tree-id1033 . -2) (undo-tree-id1034 . -2) (undo-tree-id1035 . -2) (undo-tree-id1036 . -2) (undo-tree-id1037 . -2) (undo-tree-id1038 . -2) (undo-tree-id1039 . -2) (undo-tree-id1040 . -2) (undo-tree-id1041 . -2) (undo-tree-id1042 . -2) (undo-tree-id1043 . -2) (undo-tree-id1044 . -2) (undo-tree-id1045 . -2) (undo-tree-id1046 . -2) (undo-tree-id1047 . -2) (undo-tree-id1048 . -2) (undo-tree-id1049 . -2) (undo-tree-id1050 . -2) (undo-tree-id1051 . -2) (undo-tree-id1052 . -2) (undo-tree-id1053 . -2) (undo-tree-id1054 . -2) (undo-tree-id1055 . -2) (undo-tree-id1056 . -2) (undo-tree-id1057 . -2) (undo-tree-id1058 . -2) (undo-tree-id1059 . -2) (undo-tree-id1060 . -2) (undo-tree-id1061 . -2) (undo-tree-id1062 . -2) (undo-tree-id1063 . -2) (undo-tree-id1064 . -2) (undo-tree-id1065 . -2) (undo-tree-id1066 . -2) (undo-tree-id1067 . -2) (undo-tree-id1068 . -2) (undo-tree-id1069 . -2) (undo-tree-id1070 . -2) (undo-tree-id1071 . -2) (undo-tree-id1072 . -2) (undo-tree-id1073 . -2) (undo-tree-id1074 . -2) (undo-tree-id1075 . -2) (undo-tree-id1076 . -2) (undo-tree-id1077 . -2) (undo-tree-id1078 . -2) (undo-tree-id1079 . -2) (undo-tree-id1080 . -2) (undo-tree-id1081 . -2) (undo-tree-id1082 . -2) (undo-tree-id1083 . -2) (undo-tree-id1084 . -2) (undo-tree-id1085 . -2) (undo-tree-id1086 . -2) (undo-tree-id1087 . -2) (undo-tree-id1088 . -2) (undo-tree-id1089 . -2) (undo-tree-id1090 . -2) (undo-tree-id1091 . -2) (undo-tree-id1092 . -2) (undo-tree-id1093 . -2) (undo-tree-id1094 . -2) (undo-tree-id1095 . -2) (undo-tree-id1096 . -2) (undo-tree-id1097 . -2) (undo-tree-id1098 . -2) 37 (35 . 37) (34 . 35) (30 . 34) (apply yas--snippet-revive 21 37 #s(yas--snippet nil (#s(yas--field 0 30 36 nil nil nil nil nil)) nil 1 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 0 30 36 nil nil nil nil nil)) nil 1 nil nil nil nil)) (21 . 37) (#("include \"${0:header}\"" 0 21 (fontified nil c-in-sws t)) . 21) (21 . 42) (#("i" 0 1 (fontified nil c-in-sws t)) . 21) (21 . 22) (#("include \"header\"" 0 16 (fontified nil c-in-sws t)) . -21) (21 . 37) (#("inc" 0 1 (face font-lock-preprocessor-face c-in-sws t fontified t) 1 2 (face font-lock-preprocessor-face c-in-sws t fontified t) 2 3 (face font-lock-preprocessor-face c-in-sws t fontified t)) . -21) (undo-tree-id1099 . -3) (undo-tree-id1100 . -3) (undo-tree-id1101 . -3) 24 (21 . 24) (20 . 21)) nil (26027 65404 947280 329000) 0 nil])
([nil nil ((59 . 68) (nil syntax-table nil 59 . 60) (nil syntax-table (1) 53 . 54) (#("header\"" 0 6 (c-in-sws t face font-lock-string-face fontified nil) 6 7 (c-in-sws t face font-lock-string-face fontified nil)) . 59) (undo-tree-id895 . -7) (undo-tree-id896 . -6) (undo-tree-id897 . 7) (#("stdlib.h\"" 0 9 (fontified nil)) . -59) (nil syntax-table nil 75 . 76) (nil syntax-table (1) 74 . 75) (59 . 68) (#("stdl" 0 1 (face font-lock-string-face c-in-sws t fontified t) 1 2 (face font-lock-string-face c-in-sws t fontified t) 2 3 (face font-lock-string-face c-in-sws t fontified t) 3 4 (face font-lock-string-face c-in-sws t fontified t)) . -59) (undo-tree-id898 . -2) (undo-tree-id899 . -4) (undo-tree-id900 . -4) (undo-tree-id901 . -4) (undo-tree-id902 . -4) (undo-tree-id903 . -4) (undo-tree-id904 . -4) (undo-tree-id905 . -4) (undo-tree-id906 . -4) (undo-tree-id907 . -4) (undo-tree-id908 . -4) (undo-tree-id909 . -4) (undo-tree-id910 . -4) (undo-tree-id911 . -4) (undo-tree-id912 . -4) (undo-tree-id913 . -4) (undo-tree-id914 . -4) (undo-tree-id915 . -4) (undo-tree-id916 . -4) (undo-tree-id917 . -4) (undo-tree-id918 . -4) (undo-tree-id919 . -4) (undo-tree-id920 . -4) (undo-tree-id921 . -4) (undo-tree-id922 . -4) (undo-tree-id923 . -4) (undo-tree-id924 . -4) (undo-tree-id925 . -4) (undo-tree-id926 . -4) 63 (59 . 63) (58 . 59) (54 . 58) (apply yas--snippet-revive 45 61 #s(yas--snippet nil (#s(yas--field 0 54 60 nil nil nil nil nil)) nil 2 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 0 54 60 nil nil nil nil nil)) nil 2 nil nil nil nil)) (45 . 61) (#("include \"${0:header}\"" 0 21 (fontified nil c-in-sws t)) . 45) (45 . 66) (#("i" 0 1 (fontified nil c-in-sws t)) . 45) (45 . 46) (#("include \"header\"" 0 16 (fontified nil c-in-sws t)) . -45) (45 . 61) (#("incl" 0 1 (face font-lock-preprocessor-face c-in-sws t fontified t) 1 2 (face font-lock-preprocessor-face c-in-sws t fontified t) 2 3 (face font-lock-preprocessor-face c-in-sws t fontified t) 3 4 (face font-lock-preprocessor-face c-in-sws t fontified t)) . -45) (undo-tree-id927 . -4) (undo-tree-id928 . -4) (undo-tree-id929 . -4) (undo-tree-id930 . -4) 49 (45 . 49) (44 . 45) (43 . 44)) nil (26027 65404 946605 159000) 0 nil])
([nil nil ((68 . 69)) nil (26027 65404 946528 530000) 0 nil])
([nil nil ((#("#include <stdio.h>
" 0 1 (face font-lock-preprocessor-face c-is-sws t c-in-sws t fontified t) 1 2 (face font-lock-preprocessor-face c-in-sws t fontified t) 2 3 (face font-lock-preprocessor-face c-in-sws t fontified t) 3 4 (face font-lock-preprocessor-face c-in-sws t fontified t) 4 5 (face font-lock-preprocessor-face c-in-sws t fontified t) 5 6 (face font-lock-preprocessor-face c-in-sws t fontified t) 6 7 (face font-lock-preprocessor-face c-in-sws t fontified t) 7 8 (face font-lock-preprocessor-face c-in-sws t fontified t) 8 9 (c-in-sws t fontified t) 9 10 (face (rainbow-delimiters-depth-1-face font-lock-string-face) c-in-sws t category c-<-as-paren-syntax fontified t) 10 11 (face font-lock-string-face c-in-sws t fontified t) 11 12 (face font-lock-string-face c-in-sws t fontified t) 12 13 (face font-lock-string-face c-in-sws t fontified t) 13 14 (face font-lock-string-face c-in-sws t fontified t) 14 15 (face font-lock-string-face c-in-sws t fontified t) 15 16 (face font-lock-string-face c-in-sws t fontified t) 16 17 (face font-lock-string-face c-in-sws t fontified t) 17 18 (face (rainbow-delimiters-depth-1-face font-lock-string-face) c-in-sws t category c->-as-paren-syntax fontified t) 18 19 (c-in-sws t fontified t)) . 1) (undo-tree-id865 . -18) (undo-tree-id866 . -17) (undo-tree-id867 . -17) (undo-tree-id868 . -17) (undo-tree-id869 . -17) (undo-tree-id870 . -19) (undo-tree-id871 . -19) (undo-tree-id872 . -19) (undo-tree-id873 . -9) (undo-tree-id874 . -18) (undo-tree-id875 . -19) (undo-tree-id876 . -19) (undo-tree-id877 . -19) (undo-tree-id878 . -19) (undo-tree-id879 . -19) (undo-tree-id880 . -19) (undo-tree-id881 . -19) (undo-tree-id882 . -19) (undo-tree-id883 . -19) (undo-tree-id884 . -19) (undo-tree-id885 . -19) (undo-tree-id886 . -19) (undo-tree-id887 . -19) (undo-tree-id888 . -19) (undo-tree-id889 . -19) (undo-tree-id890 . -19) (undo-tree-id891 . -19) (undo-tree-id892 . -19) (undo-tree-id893 . -19) (undo-tree-id894 . -19)) nil (26027 65404 946516 981000) 0 nil])
([nil nil ((#("#include \"pico/stdio.h\"
" 0 1 (c-in-sws t c-is-sws t face font-lock-preprocessor-face fontified t) 1 8 (c-in-sws t face font-lock-preprocessor-face fontified t) 8 9 (c-in-sws t fontified t) 9 10 (c-in-sws t face font-lock-string-face fontified t) 10 11 (c-in-sws t face font-lock-string-face fontified t) 11 12 (c-in-sws t face font-lock-string-face fontified t) 12 13 (c-in-sws t face font-lock-string-face fontified t) 13 14 (c-in-sws t face font-lock-string-face fontified t) 14 15 (c-in-sws t face font-lock-string-face fontified t) 15 23 (c-in-sws t face font-lock-string-face fontified t) 23 24 (c-in-sws t fontified t)) . 1) (undo-tree-id1108 . -23) (undo-tree-id1109 . -23) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (undo-tree-id1112 . -9) (undo-tree-id1113 . -23) (undo-tree-id1114 . 15) (undo-tree-id1115 . -23) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (undo-tree-id1140 . -24) 2 (t 26027 65404 959401 486000)) nil (26027 65418 950816 560000) 0 nil])
([nil nil ((1 . 3) (t 26027 65418 963826 531000)) nil (26027 65427 381719 24000) 0 nil])
([nil nil ((2 . 19) (1 . 2)) nil (26027 65427 381707 373000) 0 nil])
([nil nil ((#("
" 0 1 (c-in-sws t c-is-sws t fontified t)) . 20) (undo-tree-id1148 . -1) (t 26027 65427 396075 886000)) nil (26027 65458 768129 223000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -61) (undo-tree-id1144 . -2) (undo-tree-id1145 . -2) 63 (61 . 63) (#("  " 0 2 (fontified nil)) . 60) (undo-tree-id1146 . -2) (undo-tree-id1147 . -2) (59 . 63)) nil (26027 65458 768123 157000) 0 nil])
([nil nil ((60 . 62)) nil (26027 65458 768111 68000) 0 nil])
([nil nil ((63 . 65)) nil (26027 65458 768108 825000) 0 nil])
([nil nil ((60 . 62) (#(" " 0 1 (fontified nil)) . -60) (undo-tree-id1143 . -1) (#(" " 0 1 (fontified t)) . 61)) nil (26027 65458 768105 568000) 0 nil])
([nil nil ((#("#" 0 1 (c-is-sws t fontified t)) . -47) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) 48 (47 . 48) (45 . 47)) nil (26027 65458 768097 130000) 0 nil])
([nil nil ((nil rear-nonsticky nil 157 . 158) (nil fontified nil 47 . 158) (47 . 158)) nil (26027 65458 771383 511000) 0 nil])
([nil nil ((#("26 " 0 1 (c-is-sws t fontified t) 1 3 (fontified t)) . 120) (undo-tree-id1154 . -2) (undo-tree-id1155 . -2) (undo-tree-id1156 . -2) (undo-tree-id1157 . -2) (undo-tree-id1158 . -3) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (undo-tree-id1168 . -2) (undo-tree-id1169 . -2) (undo-tree-id1170 . -2) (undo-tree-id1171 . -2) (undo-tree-id1172 . -2) (undo-tree-id1173 . -2) (undo-tree-id1174 . -2) (undo-tree-id1175 . -2) (undo-tree-id1176 . -2) (undo-tree-id1177 . -2) (undo-tree-id1178 . -3) (undo-tree-id1179 . -3) (#("25 " 0 1 (c-is-sws t fontified t) 1 3 (fontified t)) . 90) (undo-tree-id1180 . -3) (#("24 " 0 1 (c-is-sws t fontified t) 1 3 (fontified t)) . 65) (undo-tree-id1181 . -3) (#("23 " 0 1 (c-is-sws t fontified t) 1 3 (fontified t)) . 47) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) (undo-tree-id1194 . -1) (undo-tree-id1195 . -1) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (undo-tree-id1200 . -1) (undo-tree-id1201 . -1) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -2) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (undo-tree-id1280 . -3) 131) nil (26027 65463 14555 781000) 0 nil] [nil nil ((49 . 53) 48 (48 . 49)) ((#("
" 0 1 (fontified t)) . 48) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (undo-tree-id1151 . 1) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (#("    " 0 4 (fontified t)) . 49)) (26027 65458 768037 746000) 0 nil])
([nil nil ((#("
" 0 1 (c-in-sws t c-is-sws t fontified t)) . 45) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (undo-tree-id1308 . -1) (t 26027 65463 25079 23000)) nil (26027 65468 836120 93000) 0 nil])
nil
([nil nil ((146 . 148) (t 26027 65468 873236 364000)) nil (26027 65491 738531 933000) 0 nil])
([nil nil ((nil rear-nonsticky nil 193 . 194) (nil fontified nil 147 . 194) (147 . 194)) nil (26027 65491 738527 517000) 0 nil])
([nil nil ((#("30 " 0 1 (c-is-sws t fontified t) 1 3 (fontified t)) . 169) (undo-tree-id1309 . -2) (undo-tree-id1310 . -2) (undo-tree-id1311 . -3)) nil (26027 65500 693922 555000) 0 nil])
([nil nil ((191 . 192) (t 26027 65491 749833 646000)) nil (26027 65508 512366 668000) 0 nil] [nil nil ((nil rear-nonsticky nil 193 . 194) (nil fontified nil 170 . 194) (170 . 194) 169 (t 26027 65491 749833 646000)) ((#("31 #define UART_TX_PIN 8" 0 2 (face font-lock-preprocessor-face fontified nil c-in-sws t) 2 10 (face font-lock-preprocessor-face fontified nil c-in-sws t) 10 22 (fontified nil c-in-sws t) 22 23 (c-in-sws t fontified nil) 23 24 (c-in-sws t rear-nonsticky nil fontified nil)) . 170) (undo-tree-id1314 . -23) (undo-tree-id1315 . -23) (undo-tree-id1316 . -23) (undo-tree-id1317 . -23) (undo-tree-id1318 . -23) (undo-tree-id1319 . -23) (undo-tree-id1320 . -23) (undo-tree-id1321 . -23) (undo-tree-id1322 . -23) (undo-tree-id1323 . -23) (undo-tree-id1324 . -23) (undo-tree-id1325 . -23) (undo-tree-id1326 . -23) (undo-tree-id1327 . -23) (undo-tree-id1328 . -23) (undo-tree-id1329 . -23) (undo-tree-id1330 . -23) (undo-tree-id1331 . -23) (undo-tree-id1332 . -23) (undo-tree-id1333 . -23) (undo-tree-id1334 . -23) (undo-tree-id1335 . -23) (undo-tree-id1336 . -23) (undo-tree-id1337 . -23) (undo-tree-id1338 . -23) (undo-tree-id1339 . -23) (undo-tree-id1340 . -23) (undo-tree-id1341 . -23) (undo-tree-id1342 . -23) (undo-tree-id1343 . -23) (undo-tree-id1344 . -23) (undo-tree-id1345 . -23) (undo-tree-id1346 . -23) (undo-tree-id1347 . -23) (undo-tree-id1348 . -23) (undo-tree-id1349 . -23) (undo-tree-id1350 . -23) (undo-tree-id1351 . -23) (undo-tree-id1352 . -23) (undo-tree-id1353 . -23) (undo-tree-id1354 . -23) (undo-tree-id1355 . -23) (undo-tree-id1356 . -23) (undo-tree-id1357 . -23) (undo-tree-id1358 . -23) (undo-tree-id1359 . -23) (undo-tree-id1360 . -23) (undo-tree-id1361 . -3) (undo-tree-id1362 . -4) (undo-tree-id1363 . -23) (undo-tree-id1364 . -23) (undo-tree-id1365 . -23) (undo-tree-id1366 . -23) (undo-tree-id1367 . -23) (undo-tree-id1368 . -23) (undo-tree-id1369 . -23) (undo-tree-id1370 . -23) (undo-tree-id1371 . -23) (undo-tree-id1372 . -23) (undo-tree-id1373 . -23) (undo-tree-id1374 . -23) (undo-tree-id1375 . -23) (undo-tree-id1376 . -23) (undo-tree-id1377 . -23) (undo-tree-id1378 . -23) (undo-tree-id1379 . -23) (undo-tree-id1380 . -23) (undo-tree-id1381 . -23) (undo-tree-id1382 . -23) (undo-tree-id1383 . -23) (undo-tree-id1384 . -23) (undo-tree-id1385 . -23) (nil rear-nonsticky t 193 . 194)) (26027 65500 153649 253000) 0 nil])
([nil nil ((nil rear-nonsticky nil 192 . 193) (nil fontified nil 192 . 193) (192 . 193)) nil (26027 65508 512364 55000) 0 nil])
([nil nil ((#("8" 0 1 (rear-nonsticky t fontified t c-in-sws t)) . 193) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1)) ((193 . 194)) (26027 65500 151685 737000) 0 nil])
([nil nil ((#("8" 0 1 (rear-nonsticky t fontified t c-is-sws t)) . 192) (undo-tree-id1389 . -1)) nil (26027 65508 512360 91000) 0 nil])
nil
([nil nil ((nil rear-nonsticky nil 215 . 216) (nil fontified nil 193 . 216) (nil fontified nil 192 . 193) (192 . 216)) nil (26027 65508 512353 877000) 0 nil])
([nil nil ((#("31 " 0 1 (fontified t c-is-sws t) 1 3 (fontified t)) . 192) (undo-tree-id1386 . -2) (undo-tree-id1387 . -2) (undo-tree-id1388 . -3)) nil (26027 65508 512342 426000) 0 nil])
([nil nil ((213 . 215) (t 26027 65508 526254 281000)) nil (26028 1084 557134 852000) 0 nil])
([nil nil ((nil rear-nonsticky nil 258 . 259) (nil fontified nil 215 . 259) (215 . 259)) nil (26028 1084 557132 720000) 0 nil])
([nil nil ((#("#define UART_TX_PIN 8
" 0 1 (face font-lock-preprocessor-face c-in-sws t c-is-sws t fontified t) 1 7 (face font-lock-preprocessor-face c-in-sws t fontified t) 7 8 (c-in-sws t fontified t) 8 19 (face font-lock-variable-name-face c-in-sws t fontified t) 19 20 (c-in-sws t fontified t) 20 21 (c-in-sws t rear-nonsticky t fontified t) 21 22 (c-in-sws t fontified t)) . 192) (undo-tree-id1468 . -21) (undo-tree-id1469 . -21) (undo-tree-id1470 . 22) (undo-tree-id1471 . -20) 212) nil (26028 1084 557129 184000) 0 nil])
([nil nil ((214 . 215) (#("0" 0 1 (fontified t c-in-sws t)) . 214)) nil (26028 1084 557120 829000) 0 nil])
([nil nil ((236 . 237) (#("1" 0 1 (fontified t c-in-sws t rear-nonsticky t)) . 236)) nil (26028 1084 557118 265000) 0 nil])
([nil nil ((nil rear-nonsticky nil 282 . 283) (nil fontified nil 254 . 283) (254 . 283) 253) nil (26028 1084 557115 975000) 0 nil])
([nil nil ((252 . 254) (#("      " 0 2 (fontified t) 2 6 (fontified t)) . 252) (undo-tree-id1466 . -2) (undo-tree-id1467 . -2) 282) nil (26028 1084 557112 501000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -282) (undo-tree-id1460 . -2) (undo-tree-id1461 . -2) 284 (282 . 284) (#("  " 0 2 (fontified nil)) . 281) (undo-tree-id1462 . -2) (undo-tree-id1463 . -2) (281 . 284) (#("  " 0 2 (fontified nil)) . 280) (undo-tree-id1464 . -2) (undo-tree-id1465 . -2) (279 . 283)) nil (26028 1084 557104 543000) 0 nil])
([nil nil ((#("2400" 0 4 (fontified t)) . 273) (undo-tree-id1459 . -3)) nil (26028 1084 557089 542000) 0 nil])
([nil nil ((276 . 277) (#("-" 0 1 (fontified t)) . -276) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1) (#("0" 0 1 (fontified t)) . -277) (undo-tree-id1457 . -1) (undo-tree-id1458 . -1) 278 (273 . 278)) nil (26028 1084 557085 92000) 0 nil])
([nil nil ((281 . 283)) nil (26028 1084 557075 888000) 0 nil])
([nil nil ((329 . 330) (#("uint gpio" 0 4 (face font-lock-type-face fontified nil) 4 5 (fontified nil) 5 9 (face font-lock-variable-name-face fontified nil)) . 329) (328 . 329) (64 . 91) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 328 339 nil nil nil t #s(yas--field 2 341 355 nil nil nil t nil)) #s(yas--field 2 341 355 nil nil nil t nil)) nil 3 nil #s(yas--field 2 341 355 nil nil nil t nil) nil nil)) (283 . 334) (#("gpio_set_function(${1:uint gpio}, ${2:enum gpio_function fn})" 0 61 (fontified nil)) . 283) (283 . 344) (#("gpi" 0 3 (fontified nil)) . 283) (283 . 286) (#("gpio_set_function(uint gpio, enum gpio_function fn)" 0 51 (fontified nil)) . -283) (283 . 334) (#("gpio_set_fun" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t)) . -283) (undo-tree-id1450 . -10) (undo-tree-id1451 . -12) (undo-tree-id1452 . -12) 295 (283 . 295) (281 . 283) (#(" " 0 1 (fontified nil)) . -281) (undo-tree-id1453 . -1) (undo-tree-id1454 . -1) (#(" " 0 1 (fontified t)) . 282)) nil (26028 1084 557070 488000) 0 nil])
([nil nil ((356 . 357) (apply yas--snippet-revive 310 356 #s(yas--snippet nil (#s(yas--field 1 328 339 nil nil nil t #s(yas--field 2 341 355 nil nil nil t nil)) #s(yas--field 2 341 355 nil nil nil t nil)) nil 3 nil #s(yas--field 2 341 355 nil nil nil t nil) nil nil)) (341 . 355) (#("G" 0 1 (fontified nil)) . 341) (341 . 342) (#("GPIO_FUNC_UART" 0 14 (fontified nil)) . -341) (341 . 355) (#("GP" 0 1 (fontified t) 1 2 (fontified t)) . -341) (undo-tree-id1446 . -2) (undo-tree-id1447 . -2) 343 (342 . 343) (#("enum gpio_function fn" 0 4 (face font-lock-keyword-face fontified nil) 4 5 (fontified nil) 5 18 (face font-lock-type-face fontified nil) 18 19 (fontified nil) 19 21 (face font-lock-variable-name-face fontified nil)) . 342) (341 . 342) (328 . 339) (#("UAR" 0 3 (fontified nil)) . 328) (328 . 331) (#("UART_RX_PIN" 0 11 (fontified nil)) . -328) (328 . 339) (#("UAR" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -328) (undo-tree-id1448 . -3) (undo-tree-id1449 . -3) 331 (330 . 331)) nil (26028 1084 557039 154000) 0 nil])
([nil nil ((nil rear-nonsticky nil 359 . 360) (#("
" 0 1 (fontified nil)) . -407) (357 . 408) 356) nil (26028 1084 557013 933000) 0 nil])
([nil nil ((#("RX" 0 2 (fontified t)) . 383) (undo-tree-id1445 . -1)) nil (26028 1084 557007 459000) 0 nil])
([nil nil ((378 . 389) (#("UART_T" 0 6 (fontified nil)) . 378) (378 . 384) (#("UART_TX_PIN" 0 11 (fontified nil)) . -378) (378 . 389) (#("UART_T" 0 5 (fontified t) 5 6 (fontified t)) . -378) (undo-tree-id1440 . -5) (undo-tree-id1441 . -5) (undo-tree-id1442 . -6) (undo-tree-id1443 . -6) (undo-tree-id1444 . -6) 384 (383 . 384)) nil (26028 1084 556997 947000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 389) (undo-tree-id1439 . 1)) nil (26028 1084 556976 472000) 0 nil])
([nil nil ((#("PIN" 0 3 (fontified t)) . 389) (undo-tree-id1437 . 3) (undo-tree-id1438 . -2)) nil (26028 1084 556965 911000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -409) (undo-tree-id1434 . -2) (undo-tree-id1435 . -2) 411 (409 . 411) (#("  " 0 2 (fontified nil)) . 408) (undo-tree-id1436 . -2) (407 . 411)) nil (26028 1084 556955 833000) 0 nil])
([nil nil ((409 . 411)) nil (26028 1084 556943 943000) 0 nil])
([nil nil ((nil rear-nonsticky nil 474 . 475) (nil fontified nil 411 . 475) (411 . 475) 410) nil (26028 1084 556940 264000) 0 nil])
([nil nil ((409 . 411) (#("      " 0 2 (fontified t) 2 6 (fontified t)) . 409) (undo-tree-id1432 . -2) (undo-tree-id1433 . -2) 474) nil (26028 1084 556933 662000) 0 nil])
([nil nil ((#("__" 0 2 (face font-lock-variable-name-face fontified t)) . 415) (undo-tree-id1430 . -1) (undo-tree-id1431 . -2)) nil (26028 1084 556922 919000) 0 nil])
([nil nil ((#("unused " 0 6 (face font-lock-variable-name-face fontified t) 6 7 (fontified t)) . 415) (undo-tree-id1393 . -6) (undo-tree-id1394 . -7) (undo-tree-id1395 . -7) (undo-tree-id1396 . -7) (undo-tree-id1397 . -7) (undo-tree-id1398 . -7) (undo-tree-id1399 . -7) (undo-tree-id1400 . -7) (undo-tree-id1401 . -7) (undo-tree-id1402 . -7) (undo-tree-id1403 . -7) (undo-tree-id1404 . -7) (undo-tree-id1405 . -7) (undo-tree-id1406 . -7) (undo-tree-id1407 . -7) (undo-tree-id1408 . -7) (undo-tree-id1409 . -7) (undo-tree-id1410 . -7) (undo-tree-id1411 . -7) (undo-tree-id1412 . -7) (undo-tree-id1413 . -7) (undo-tree-id1414 . -7) (undo-tree-id1415 . -7) (undo-tree-id1416 . -7) (undo-tree-id1417 . -7) (undo-tree-id1418 . -7) (undo-tree-id1419 . -7) (undo-tree-id1420 . -7) (undo-tree-id1421 . -7) (undo-tree-id1422 . -7) (undo-tree-id1423 . -7) (undo-tree-id1424 . -7) (undo-tree-id1425 . -7) (undo-tree-id1426 . -7) (undo-tree-id1427 . -7) (undo-tree-id1428 . -7) (undo-tree-id1429 . -7)) nil (26028 1084 556907 705000) 0 nil])
([nil nil ((#("actual " 0 6 (face font-lock-variable-name-face fontified t) 6 7 (fontified t)) . 415) (undo-tree-id1390 . -6) (undo-tree-id1391 . -6) (undo-tree-id1392 . -7)) nil (26028 1084 556772 320000) 0 nil])
([nil nil ((415 . 422)) nil (26028 1084 556750 270000) 0 nil])
([nil nil ((415 . 416)) nil (26028 1084 556736 992000) 0 nil])
([nil nil ((466 . 468) (#("  " 0 2 (fontified nil)) . 465) (undo-tree-id1679 . -2) (undo-tree-id1680 . -2) (465 . 468) (#("  " 0 2 (fontified nil)) . 464) (undo-tree-id1681 . -2) (undo-tree-id1682 . -2) (466 . 467) (464 . 466) (t 26028 1084 568792 827000)) nil (26028 1544 654750 101000) 0 nil])
([nil nil ((nil rear-nonsticky nil 511 . 512) (nil fontified nil 468 . 512) (468 . 512) 467) nil (26028 1544 654524 539000) 0 nil])
([nil nil ((466 . 468) (#("      " 0 2 (fontified t) 2 6 (fontified t)) . 466) (undo-tree-id1677 . -2) (undo-tree-id1678 . -2) 511) nil (26028 1544 654521 220000) 0 nil])
([nil nil ((#("  uart_set_hw_flow(UART_ID, false, false);
" 0 2 (fontified t) 2 18 (fontified t) 18 19 (face (rainbow-delimiters-depth-2-face) fontified t) 19 28 (fontified t) 28 33 (face font-lock-constant-face fontified t) 33 35 (fontified t) 35 40 (face font-lock-constant-face fontified t) 40 41 (face (rainbow-delimiters-depth-2-face) fontified t) 41 42 (rear-nonsticky t fontified t) 42 43 (fontified t)) . 466) (undo-tree-id1673 . 1) (undo-tree-id1674 . -42) (undo-tree-id1675 . -41) (undo-tree-id1676 . -41) 507) nil (26028 1544 654513 840000) 0 nil])
([nil nil ((467 . 469) (#("  " 0 2 (fontified nil)) . 466) (undo-tree-id1669 . -2) (undo-tree-id1670 . -2) (466 . 469) (#("  " 0 2 (fontified nil)) . 465) (undo-tree-id1671 . -2) (undo-tree-id1672 . -2) (467 . 468) (465 . 467)) nil (26028 1544 654453 755000) 0 nil])
([nil nil ((522 . 527) (#("fals" 0 4 (fontified nil)) . 522) (522 . 526) (#("false" 0 5 (fontified nil)) . -522) (522 . 527) (#("fals" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -522) (undo-tree-id1634 . -4) (undo-tree-id1635 . -4) 526 (523 . 526) (#("bool rts" 0 4 (face font-lock-type-face fontified nil) 4 5 (fontified nil) 5 8 (face font-lock-variable-name-face fontified nil)) . 523) (522 . 523) (1 . 22) (494 . 499) (#("fals" 0 4 (fontified nil)) . 494) (494 . 498) (#("false" 0 5 (fontified nil)) . -494) (494 . 499) (#("fals" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -494) (undo-tree-id1636 . -4) (undo-tree-id1637 . -4) (undo-tree-id1638 . -4) 498 (495 . 498) (#("bool cts" 0 4 (face font-lock-type-face fontified nil) 4 5 (fontified nil) 5 8 (face font-lock-variable-name-face fontified nil)) . 495) (494 . 495) (485 . 492) (#("U" 0 1 (fontified nil)) . 485) (485 . 486) (#("UART_ID" 0 7 (fontified nil)) . -485) (485 . 492) (#("U" 0 1 (fontified t)) . -485) (undo-tree-id1639 . -1) (undo-tree-id1640 . -1) 486 (#("uart_inst_t *uart" 0 11 (face font-lock-type-face fontified nil) 11 13 (fontified nil) 13 17 (face font-lock-variable-name-face fontified nil)) . 486) (485 . 486) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 506 513 nil nil nil t #s(yas--field 2 515 520 nil nil nil t #s(yas--field 3 522 527 nil nil nil t nil))) #s(yas--field 2 515 520 nil nil nil t #s(yas--field 3 522 527 nil nil nil t nil)) #s(yas--field 3 522 527 nil nil nil t nil)) nil 4 nil #s(yas--field 3 522 527 nil nil nil t nil) nil nil)) (468 . 523) (#("uart_set_hw_flow(${1:uart_inst_t *uart}, ${2:bool cts}, ${3:bool rts})" 0 70 (fontified nil)) . 468) (468 . 538) (#("uart_s" 0 6 (fontified nil)) . 468) (468 . 474) (#("uart_set_hw_flow(uart_inst_t *uart, bool cts, bool rts)" 0 55 (fontified nil)) . -468) (468 . 523) (#("uart_set_h" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t)) . -468) (undo-tree-id1641 . -6) (undo-tree-id1642 . -10) (undo-tree-id1643 . -10) 478 (477 . 478) (476 . 477) (468 . 476) (#("s" 0 1 (fontified t)) . -468) (undo-tree-id1644 . -1) (undo-tree-id1645 . -1) (undo-tree-id1646 . -1) (#("e" 0 1 (fontified t)) . -469) (undo-tree-id1647 . -1) (undo-tree-id1648 . -1) (undo-tree-id1649 . -1) (#("t" 0 1 (fontified t)) . -470) (undo-tree-id1650 . -1) (undo-tree-id1651 . -1) (undo-tree-id1652 . -1) (#("_" 0 1 (fontified t)) . -471) (undo-tree-id1653 . -1) (undo-tree-id1654 . -1) (undo-tree-id1655 . -1) (#("u" 0 1 (fontified t)) . -472) (undo-tree-id1656 . -1) (undo-tree-id1657 . -1) (undo-tree-id1658 . -1) (#("a" 0 1 (fontified t)) . -473) (undo-tree-id1659 . -1) (undo-tree-id1660 . -1) (#("r" 0 1 (fontified t)) . -474) (undo-tree-id1661 . -1) (undo-tree-id1662 . -1) (#("t" 0 1 (fontified t)) . -475) (undo-tree-id1663 . -1) (undo-tree-id1664 . -1) 476 (468 . 476) (#("u" 0 1 (fontified t)) . -468) (undo-tree-id1665 . -1) (undo-tree-id1666 . -1) (#("a" 0 1 (fontified t)) . -469) (undo-tree-id1667 . -1) (undo-tree-id1668 . -1) 470 (468 . 470) (466 . 468)) nil (26028 1544 654430 382000) 0 nil])
([nil nil ((528 . 529) (apply yas--snippet-revive 489 528 #s(yas--snippet nil (#s(yas--field 1 506 513 nil nil nil t #s(yas--field 2 515 520 nil nil nil t #s(yas--field 3 522 527 nil nil nil t nil))) #s(yas--field 2 515 520 nil nil nil t #s(yas--field 3 522 527 nil nil nil t nil)) #s(yas--field 3 522 527 nil nil nil t nil)) nil 4 nil #s(yas--field 3 522 527 nil nil nil t nil) nil nil))) nil (26028 1544 654355 125000) 0 nil])
([nil nil ((#("  int _actual = uart_set_baudrate(UART_ID, BAUD_RATE);
" 0 2 (fontified t) 2 4 (face font-lock-type-face fontified t) 4 5 (face font-lock-type-face c-type c-decl-id-start fontified t) 5 6 (fontified t) 6 7 (face font-lock-variable-name-face fontified t) 7 8 (face font-lock-variable-name-face fontified t) 8 9 (face font-lock-variable-name-face fontified t) 9 10 (face font-lock-variable-name-face fontified t) 10 11 (face font-lock-variable-name-face fontified t) 11 12 (face font-lock-variable-name-face fontified t) 12 13 (face font-lock-variable-name-face fontified t) 13 14 (fontified t) 14 15 (fontified t) 15 33 (fontified t) 33 34 (face (rainbow-delimiters-depth-2-face) fontified t) 34 52 (fontified t) 52 53 (face (rainbow-delimiters-depth-2-face) fontified t) 53 54 (fontified t rear-nonsticky t) 54 55 (fontified t)) . 430) (undo-tree-id1632 . -54) (undo-tree-id1633 . -55)) nil (26028 1544 654352 685000) 0 nil])
([nil nil ((#("  uart_set_hw_flow(UART_ID, false, false);
" 0 2 (fontified t) 2 14 (fontified t) 14 18 (fontified t) 18 19 (face (rainbow-delimiters-depth-2-face) fontified t) 19 26 (fontified t) 26 27 (fontified t) 27 28 (fontified t) 28 33 (face font-lock-constant-face fontified t) 33 34 (fontified t) 34 35 (fontified t) 35 40 (face font-lock-constant-face fontified t) 40 41 (face (rainbow-delimiters-depth-2-face) fontified t) 41 42 (fontified t) 42 43 (fontified t)) . 432) (undo-tree-id1620 . 1) (undo-tree-id1621 . -42) (undo-tree-id1622 . -14) (undo-tree-id1623 . -14) (undo-tree-id1624 . -14) (undo-tree-id1625 . -14) (undo-tree-id1626 . -14) (undo-tree-id1627 . -14) (undo-tree-id1628 . -14) (undo-tree-id1629 . -14) (undo-tree-id1630 . -14) (undo-tree-id1631 . -14)) nil (26028 1544 654346 784000) 0 nil])
([nil nil ((471 . 472) (apply yas--snippet-revive 432 471 #s(yas--snippet nil (#s(yas--field 1 456 463 nil nil nil t #s(yas--field 2 465 470 nil nil nil t nil)) #s(yas--field 2 465 470 nil nil nil t nil)) nil 5 nil #s(yas--field 2 465 470 nil nil nil t nil) nil nil)) (465 . 470) (#("fal" 0 3 (fontified nil)) . 465) (465 . 468) (#("false" 0 5 (fontified nil)) . -465) (465 . 470) (#("fal" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -465) (undo-tree-id1613 . -3) (undo-tree-id1614 . -3) (undo-tree-id1615 . -3) 468 (466 . 468) (#("bool translate" 0 4 (face font-lock-type-face fontified nil) 4 5 (fontified nil) 5 14 (face font-lock-variable-name-face fontified nil)) . 466) (465 . 466) (456 . 463) (#("U" 0 1 (fontified nil)) . 456) (456 . 457) (#("UART_ID" 0 7 (fontified nil)) . -456) (456 . 463) (#("U" 0 1 (fontified t)) . -456) (undo-tree-id1616 . -1) (undo-tree-id1617 . -1) 457 (#("uart_inst_t *uart" 0 11 (face font-lock-type-face fontified nil) 11 13 (fontified nil) 13 17 (face font-lock-variable-name-face fontified nil)) . 457) (456 . 457) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 456 463 nil nil nil t #s(yas--field 2 465 470 nil nil nil t nil)) #s(yas--field 2 465 470 nil nil nil t nil)) nil 5 nil #s(yas--field 2 465 470 nil nil nil t nil) nil nil)) (432 . 490) (#("uart_set_translate_crlf(${1:uart_inst_t *uart}, ${2:bool translate})" 0 68 (fontified nil)) . 432) (432 . 500) (#("uart_s" 0 6 (fontified nil)) . 432) (432 . 438) (#("uart_set_translate_crlf(uart_inst_t *uart, bool translate)" 0 58 (fontified nil)) . -432) (432 . 490) (#("uart_set_tran" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t) 12 13 (fontified t)) . -432) (undo-tree-id1618 . -13) (undo-tree-id1619 . -13) 445 (441 . 445) (432 . 441) (430 . 432)) nil (26028 1544 654320 36000) 0 nil])
([nil nil ((474 . 476) (#("  " 0 2 (fontified nil)) . 473) (undo-tree-id1611 . -2) (undo-tree-id1612 . -2) (472 . 476)) nil (26028 1544 654293 486000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -301) (undo-tree-id1607 . -2) (undo-tree-id1608 . -2) 303 (301 . 303) (#("  " 0 2 (fontified nil)) . 300) (undo-tree-id1609 . -2) (undo-tree-id1610 . -2) (299 . 303)) nil (26028 1544 654286 305000) 0 nil])
([nil nil ((343 . 344) (apply yas--snippet-revive 327 343 #s(yas--snippet nil nil nil 6 nil nil nil nil)) (112 . 136) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 6 nil nil nil nil)) (303 . 319) (#("stdio_init_all()" 0 16 (fontified nil)) . 303) (303 . 319) (#("st" 0 2 (fontified nil)) . 303) (303 . 305) (#("stdio_init_all()" 0 16 (fontified nil)) . -303) (303 . 319) (#("stdio_ini" 0 1 (face font-lock-type-face fontified t) 1 2 (face font-lock-type-face fontified t) 2 3 (face font-lock-type-face fontified t) 3 4 (face font-lock-type-face fontified t) 4 5 (face font-lock-type-face fontified t) 5 6 (face font-lock-type-face fontified t) 6 7 (face font-lock-type-face fontified t) 7 8 (face font-lock-type-face fontified t) 8 9 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -303) (undo-tree-id1602 . -7) (undo-tree-id1603 . -9) (undo-tree-id1604 . -9) 312 (303 . 312) (301 . 303) (#("  " 0 2 (fontified nil)) . 300) (undo-tree-id1605 . -2) (undo-tree-id1606 . -2) (302 . 303) (300 . 302)) nil (26028 1544 654273 813000) 0 nil])
([nil nil ((nil rear-nonsticky nil 578 . 579) (nil fontified nil 523 . 579) (523 . 579)) nil (26028 1544 654258 268000) 0 nil])
([nil nil ((523 . 525) 578) nil (26028 1544 654255 234000) 0 nil])
([nil nil ((523 . 525) (523 . 525)) nil (26028 1544 654251 716000) 0 nil])
([nil nil ((#("  " 0 2 (c-in-sws t c-is-sws t fontified t)) . -588) (undo-tree-id1472 . -2) (undo-tree-id1473 . -2) (undo-tree-id1474 . -2) (undo-tree-id1475 . -2) (undo-tree-id1476 . -2) (undo-tree-id1477 . -2) (undo-tree-id1478 . -2) (undo-tree-id1479 . -2) (undo-tree-id1480 . -2) (undo-tree-id1481 . -2) (undo-tree-id1482 . -2) (undo-tree-id1483 . -2) (undo-tree-id1484 . -2) (undo-tree-id1485 . -2) (undo-tree-id1486 . -2) (undo-tree-id1487 . -2) (undo-tree-id1488 . -2) (undo-tree-id1489 . -2) (undo-tree-id1490 . -2) (undo-tree-id1491 . -2) (undo-tree-id1492 . -2) (undo-tree-id1493 . -2) (undo-tree-id1494 . -2) (undo-tree-id1495 . -2) (undo-tree-id1496 . -2) (undo-tree-id1497 . -2) (undo-tree-id1498 . -2) (undo-tree-id1499 . -2) (undo-tree-id1500 . -2) (undo-tree-id1501 . -2) (undo-tree-id1502 . -2) (undo-tree-id1503 . -2) (undo-tree-id1504 . -2) (undo-tree-id1505 . -2) (undo-tree-id1506 . -2) (undo-tree-id1507 . -2) (undo-tree-id1508 . -2) (undo-tree-id1509 . -2) (undo-tree-id1510 . -2) (undo-tree-id1511 . -2) (undo-tree-id1512 . -2) (undo-tree-id1513 . -2) (undo-tree-id1514 . -2) (undo-tree-id1515 . -2) (undo-tree-id1516 . -2) (undo-tree-id1517 . -2) (undo-tree-id1518 . -2) 590 (588 . 590) (#("  " 0 2 (c-in-sws t c-is-sws t fontified nil)) . 587) (undo-tree-id1519 . -2) (undo-tree-id1520 . -2) (undo-tree-id1521 . -2) (undo-tree-id1522 . -2) (undo-tree-id1523 . -2) (undo-tree-id1524 . -2) (undo-tree-id1525 . -2) (undo-tree-id1526 . -2) (undo-tree-id1527 . -2) (undo-tree-id1528 . -2) (undo-tree-id1529 . -2) (undo-tree-id1530 . -2) (undo-tree-id1531 . -2) (undo-tree-id1532 . -2) (undo-tree-id1533 . -2) (undo-tree-id1534 . -2) (undo-tree-id1535 . -2) (undo-tree-id1536 . -2) (undo-tree-id1537 . -2) (undo-tree-id1538 . -2) (undo-tree-id1539 . -2) (undo-tree-id1540 . -2) (undo-tree-id1541 . -2) (undo-tree-id1542 . -2) (undo-tree-id1543 . -2) (undo-tree-id1544 . -2) (undo-tree-id1545 . -2) (undo-tree-id1546 . -2) (undo-tree-id1547 . -2) (undo-tree-id1548 . -2) (undo-tree-id1549 . -2) (undo-tree-id1550 . -2) (undo-tree-id1551 . -2) (undo-tree-id1552 . -2) (undo-tree-id1553 . -2) (undo-tree-id1554 . -2) (587 . 590) (#("  " 0 1 (c-in-sws t c-is-sws t fontified nil) 1 2 (c-in-sws t c-is-sws t fontified nil)) . 586) (undo-tree-id1555 . -2) (undo-tree-id1556 . -2) (undo-tree-id1557 . -2) (undo-tree-id1558 . -2) (undo-tree-id1559 . -2) (undo-tree-id1560 . -2) (undo-tree-id1561 . -2) (undo-tree-id1562 . -2) (undo-tree-id1563 . -2) (undo-tree-id1564 . -2) (undo-tree-id1565 . -2) (undo-tree-id1566 . -2) (undo-tree-id1567 . -2) (undo-tree-id1568 . -2) (undo-tree-id1569 . -2) (undo-tree-id1570 . -2) (undo-tree-id1571 . -2) (undo-tree-id1572 . -2) (undo-tree-id1573 . -2) (undo-tree-id1574 . -2) (undo-tree-id1575 . -2) (undo-tree-id1576 . -2) (undo-tree-id1577 . -2) (undo-tree-id1578 . -2) (undo-tree-id1579 . -2) (undo-tree-id1580 . -2) (undo-tree-id1581 . -2) (undo-tree-id1582 . -2) (undo-tree-id1583 . -2) (undo-tree-id1584 . -2) (undo-tree-id1585 . -2) (undo-tree-id1586 . -2) (undo-tree-id1587 . -2) (undo-tree-id1588 . -2) (undo-tree-id1589 . -2) (undo-tree-id1590 . -2) (undo-tree-id1591 . -2) (undo-tree-id1592 . -2) (undo-tree-id1593 . -2) (undo-tree-id1594 . -2) (undo-tree-id1595 . -2) (undo-tree-id1596 . -2) (undo-tree-id1597 . -2) (undo-tree-id1598 . -2) (undo-tree-id1599 . -2) (undo-tree-id1600 . -2) (undo-tree-id1601 . -2) (585 . 589)) nil (26028 1544 654227 799000) 0 nil])
([nil nil ((apply yas--snippet-revive 590 623 #s(yas--snippet nil (#s(yas--field 1 597 601 nil nil nil t #s(yas--field 0 609 619 nil nil nil nil nil)) #s(yas--field 0 609 619 nil nil nil nil nil)) nil 7 nil #s(yas--field 1 597 601 nil nil nil t #s(yas--field 0 609 619 nil nil nil nil nil)) nil nil)) (597 . 601) (#("true" 0 4 (fontified nil)) . 597) (597 . 601) (#("true" 0 1 (face font-lock-constant-face fontified t) 1 2 (face font-lock-constant-face fontified t) 2 3 (face font-lock-constant-face fontified t) 3 4 (face font-lock-constant-face fontified t)) . -597) (undo-tree-id1725 . -4) (undo-tree-id1726 . -4) 601 (598 . 601) (#("expression" 0 10 (fontified nil)) . 598) (597 . 598) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 597 601 nil nil nil t #s(yas--field 0 609 619 nil nil nil nil nil)) #s(yas--field 0 609 619 nil nil nil nil nil)) nil 7 nil #s(yas--field 1 597 601 nil nil nil t #s(yas--field 0 609 619 nil nil nil nil nil)) nil nil)) (590 . 629) (#("while (${1:expression}) {
    ${0:statements}
  }" 0 1 (fontified nil c-is-sws t) 1 49 (fontified nil)) . 590) (636 . 638) (616 . 620) (590 . 633) (#("wh" 0 1 (fontified nil c-is-sws t) 1 2 (fontified nil)) . 590) (590 . 592) (#("while (expression) {statements}" 0 1 (fontified nil c-is-sws t) 1 31 (fontified nil)) . -590) (590 . 621) (#("wh" 0 1 (c-is-sws t fontified t) 1 2 (fontified t)) . -590) (undo-tree-id1727 . -2) (undo-tree-id1728 . -2) 592 (#("i" 0 1 (fontified t)) . -592) (undo-tree-id1729 . -1) (undo-tree-id1730 . -1) 593 (590 . 593) (#("i" 0 1 (c-is-sws t fontified t)) . -590) (undo-tree-id1731 . -1) (undo-tree-id1732 . -1) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -591) (undo-tree-id1733 . -1) (undo-tree-id1734 . -1) (#(" " 0 1 (fontified t)) . -592) (undo-tree-id1735 . -1) (undo-tree-id1736 . -1) 593 (590 . 593) (588 . 590) (t 26028 1544 706725 282000)) nil (26028 1645 321890 895000) 0 nil])
([nil nil ((#("ments" 0 5 (fontified t)) . 614) (undo-tree-id1722 . -4) (undo-tree-id1723 . -5) (undo-tree-id1724 . -5)) nil (26028 1645 321859 118000) 0 nil])
([nil nil ((#("  while (true) {
    state
" 0 2 (c-in-sws t c-is-sws t fontified t) 2 3 (face font-lock-keyword-face c-is-sws t fontified t) 3 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 9 (face (rainbow-delimiters-depth-2-face) fontified t) 9 13 (face font-lock-constant-face fontified t) 13 14 (face (rainbow-delimiters-depth-2-face) fontified t) 14 15 (fontified t) 15 16 (face (rainbow-delimiters-depth-2-face) fontified t) 16 17 (fontified t) 17 26 (fontified t) 26 27 (fontified t)) . 588) (undo-tree-id1717 . 6) (undo-tree-id1718 . -26) (undo-tree-id1719 . -26) (undo-tree-id1720 . -25) (undo-tree-id1721 . -25) 613) nil (26028 1645 321851 808000) 0 nil])
([nil nil ((#("  }
" 0 2 (c-in-sws t c-is-sws t fontified t) 2 3 (face (rainbow-delimiters-depth-1-face) c-is-sws t fontified t) 3 4 (fontified t)) . 588) (undo-tree-id1704 . 4) (undo-tree-id1705 . -3) (undo-tree-id1706 . -4) (undo-tree-id1707 . -4) (undo-tree-id1708 . -4) (undo-tree-id1709 . -4) (undo-tree-id1710 . -4) (undo-tree-id1711 . -4) (undo-tree-id1712 . -4) (undo-tree-id1713 . -4) (undo-tree-id1714 . -4) (undo-tree-id1715 . -2) (undo-tree-id1716 . -2) 590) nil (26028 1645 321839 69000) 0 nil])
([nil nil ((596 . 597) (#("q" 0 1 (fontified t)) . -596) (undo-tree-id1700 . -1) (undo-tree-id1701 . -1) 597 (596 . 597) (595 . 597) (594 . 595) (#(" x" 0 2 (fontified nil)) . -594) (594 . 596) (#("while" 0 1 (face font-lock-keyword-face c-is-sws t fontified nil) 1 2 (face font-lock-keyword-face fontified nil) 2 3 (face font-lock-keyword-face fontified nil) 3 4 (face font-lock-keyword-face fontified nil) 4 5 (face font-lock-keyword-face fontified nil)) . 594) (undo-tree-id1702 . -5) (undo-tree-id1703 . -5) (589 . 594) 594 (589 . 594) (587 . 589)) nil (26028 1645 321813 481000) 0 nil])
([nil nil ((601 . 605) (600 . 604) (599 . 601) (598 . 599)) nil (26028 1645 321800 900000) 0 nil])
([nil nil ((apply yas--snippet-revive 609 632 #s(yas--snippet nil (#s(yas--field 1 626 631 nil nil nil t nil)) nil 8 nil #s(yas--field 1 626 631 nil nil nil t nil) nil nil)) (626 . 631) (#("ua" 0 2 (fontified nil)) . 626) (626 . 628) (#("uart1" 0 5 (fontified nil)) . -626) (626 . 631) (#("ua" 0 1 (fontified t) 1 2 (fontified t)) . -626) (undo-tree-id1692 . -2) (undo-tree-id1693 . -2) 628 (627 . 628) (#("uart_inst_t *uart" 0 11 (face font-lock-type-face fontified nil) 11 13 (fontified nil) 13 17 (face font-lock-variable-name-face fontified nil)) . 627) (626 . 627) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 626 631 nil nil nil t nil)) nil 8 nil #s(yas--field 1 626 631 nil nil nil t nil) nil nil)) (609 . 644) (#("uart_is_readable(${1:uart_inst_t *uart})" 0 40 (fontified nil)) . 609) (609 . 649) (#("uart_i" 0 6 (fontified nil)) . 609) (609 . 615) (#("uart_is_readable(uart_inst_t *uart)" 0 35 (fontified nil)) . -609) (609 . 644) (#("uart_is_re" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t)) . -609) (undo-tree-id1694 . -7) (undo-tree-id1695 . -10) (undo-tree-id1696 . -10) 619 (617 . 619) (609 . 617) (608 . 610) (605 . 608) (601 . 605) (#("   " 0 3 (fontified nil)) . -601) (undo-tree-id1697 . -3) (undo-tree-id1698 . -3) (#(" " 0 1 (fontified t)) . 604) (undo-tree-id1699 . -1)) nil (26028 1645 321791 774000) 0 nil])
([nil nil ((636 . 642) (635 . 641) (634 . 636) (633 . 634)) nil (26028 1645 321714 126000) 0 nil])
([nil nil ((636 . 642) (#("     " 0 5 (fontified nil)) . -636) (undo-tree-id1690 . -5) (undo-tree-id1691 . -5) (#(" " 0 1 (fontified t)) . 641)) nil (26028 1645 321710 578000) 0 nil])
([nil nil ((537 . 538) (#("uint gpio" 0 4 (face font-lock-type-face fontified nil) 4 5 (fontified nil) 5 9 (face font-lock-variable-name-face fontified nil)) . 537) (536 . 537) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 536 538 nil nil nil t #s(yas--field 2 540 548 nil nil nil nil nil)) #s(yas--field 2 540 548 nil nil nil nil nil)) nil 9 nil #s(yas--field 2 540 548 nil nil nil nil nil) nil nil)) (523 . 556) (#("gpio_set_dir(${1:uint gpio}, ${2:bool out})" 0 43 (fontified nil)) . 523) (523 . 566) (#("g" 0 1 (fontified nil)) . 523) (523 . 524) (#("gpio_set_dir(uint gpio, bool out)" 0 33 (fontified nil)) . -523) (523 . 556) (#("gpio_set_di" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t) 10 11 (fontified t)) . -523) (undo-tree-id1685 . -11) (undo-tree-id1686 . -11) (undo-tree-id1687 . -11) 534 (530 . 534) (523 . 530) (521 . 523) (#("  " 0 2 (fontified nil)) . 520) (undo-tree-id1688 . -2) (undo-tree-id1689 . -2) (519 . 523)) nil (26028 1645 321701 209000) 0 nil])
([nil nil ((apply yas--snippet-revive 523 549 #s(yas--snippet nil (#s(yas--field 1 536 538 nil nil nil t #s(yas--field 2 540 548 nil nil nil nil nil)) #s(yas--field 2 540 548 nil nil nil nil nil)) nil 9 nil #s(yas--field 2 540 548 nil nil nil nil nil) nil nil))) nil (26028 1645 321684 679000) 0 nil])
([nil nil ((265 . 266)) nil (26028 1645 321682 808000) 0 nil])
([nil nil ((266 . 283) (265 . 266)) nil (26028 1645 321680 729000) 0 nil])
([nil nil ((#("bool " 0 4 (face font-lock-type-face fontified t) 4 5 (fontified t)) . 559) (undo-tree-id1684 . -4)) nil (26028 1645 321677 630000) 0 nil])
([nil nil ((#("out" 0 3 (fontified t)) . 559) (undo-tree-id1683 . -2)) nil (26028 1645 321670 655000) 0 nil])
([nil nil ((559 . 560)) nil (26028 1645 321655 813000) 0 nil])
([nil nil ((561 . 562)) nil (26028 1645 321645 42000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . 559) (t 26028 1645 362266 98000)) nil (26028 1702 439493 481000) 0 nil])
([nil nil ((559 . 567) (#("G" 0 1 (fontified nil)) . 559) (559 . 560) (#("GPIO_OUT" 0 8 (fontified nil)) . -559) (559 . 567) (#("GPIO_" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t)) . -559) (undo-tree-id1763 . -5) (undo-tree-id1764 . -5) 564 (559 . 564) (#("O" 0 1 (fontified t)) . -559) (undo-tree-id1765 . -1) (undo-tree-id1766 . -1) 560 (#("U" 0 1 (fontified t)) . -560) (undo-tree-id1767 . -1) (undo-tree-id1768 . -1) 561 (559 . 561)) nil (26028 1702 439488 208000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -571) (undo-tree-id1759 . -2) (undo-tree-id1760 . -2) 573 (571 . 573) (#("  " 0 2 (fontified nil)) . 570) (undo-tree-id1761 . -2) (undo-tree-id1762 . -2) (569 . 573)) nil (26028 1702 439420 173000) 0 nil])
([nil nil ((572 . 574) (#("  " 0 2 (fontified t)) . 572)) nil (26028 1702 439410 4000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . -573) (undo-tree-id1751 . -1) (undo-tree-id1752 . -1) (#("p" 0 1 (fontified t)) . -574) (undo-tree-id1753 . -1) (undo-tree-id1754 . -1) (#("i" 0 1 (fontified t)) . -575) (undo-tree-id1755 . -1) (undo-tree-id1756 . -1) (#("o" 0 1 (fontified t)) . -576) (undo-tree-id1757 . -1) (undo-tree-id1758 . -1) 577 (573 . 577) (571 . 573)) nil (26028 1702 439405 288000) 0 nil])
([nil nil ((709 . 712) (#("+" 0 1 (fontified t)) . -709) (undo-tree-id1741 . -1) (undo-tree-id1742 . -1) 710 (705 . 710) (#("2" 0 1 (fontified t)) . -705) (undo-tree-id1743 . -1) (undo-tree-id1744 . -1) (#("5" 0 1 (fontified t)) . -706) (undo-tree-id1745 . -1) (undo-tree-id1746 . -1) 707 (706 . 707) (#("uint gpio" 0 4 (face font-lock-type-face fontified nil) 4 5 (fontified nil) 5 9 (face font-lock-variable-name-face fontified nil)) . 706) (705 . 706) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 705 712 nil nil nil t #s(yas--field 2 714 715 nil nil nil t nil)) #s(yas--field 2 714 715 nil nil nil t nil)) nil 10 nil #s(yas--field 2 714 715 nil nil nil t nil) nil nil)) (696 . 727) (#("gpio_put(${1:uint gpio}, ${2:bool value})" 0 41 (fontified nil)) . 696) (696 . 737) (#("g" 0 1 (fontified nil)) . 696) (696 . 697) (#("gpio_put(uint gpio, bool value)" 0 31 (fontified nil)) . -696) (696 . 727) (#("gpio_put" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t)) . -696) (undo-tree-id1747 . -8) (undo-tree-id1748 . -8) (undo-tree-id1749 . -8) 704 (696 . 704) (690 . 696) (#(" " 0 1 (fontified nil)) . -690) (undo-tree-id1750 . -1) (#("     " 0 5 (fontified t)) . 691)) nil (26028 1702 439381 774000) 0 nil])
([nil nil ((716 . 717) (apply yas--snippet-revive 696 716 #s(yas--snippet nil (#s(yas--field 1 705 712 nil nil nil t #s(yas--field 2 714 715 nil nil nil t nil)) #s(yas--field 2 714 715 nil nil nil t nil)) nil 10 nil #s(yas--field 2 714 715 nil nil nil t nil) nil nil)) (#("bool value" 0 4 (face font-lock-type-face fontified nil) 4 5 (fontified nil) 5 10 (face font-lock-variable-name-face fontified nil)) . 715) (714 . 715)) nil (26028 1702 439352 44000) 0 nil])
([nil nil ((#("defune " 0 1 (face font-lock-preprocessor-face c-in-sws t fontified t) 1 2 (face font-lock-preprocessor-face c-in-sws t fontified t) 2 3 (face font-lock-preprocessor-face c-in-sws t fontified t) 3 4 (face font-lock-preprocessor-face c-in-sws t fontified t) 4 5 (face font-lock-preprocessor-face c-in-sws t fontified t) 5 6 (face font-lock-preprocessor-face c-in-sws t fontified t) 6 7 (c-in-sws t fontified t)) . 266) (undo-tree-id1738 . -6) (undo-tree-id1739 . -6) (undo-tree-id1740 . -7)) nil (26028 1702 439346 861000) 0 nil])
([nil nil ((266 . 273)) nil (26028 1702 439335 466000) 0 nil])
([nil nil ((269 . 270) (#("u" 0 1 (face font-lock-preprocessor-face c-in-sws t fontified t)) . 269) (undo-tree-id1737 . -1)) nil (26028 1702 439325 716000) 0 nil])
([nil nil ((#("25" 0 1 (fontified t) 1 2 (fontified t)) . 555) (undo-tree-id1784 . -1) (undo-tree-id1785 . -2) (t 26028 1702 454095 736000)) nil (26028 1708 220747 446000) 0 nil])
([nil nil ((555 . 562) (#("L" 0 1 (fontified nil)) . 555) (555 . 556) (#("LED_PIN" 0 7 (fontified nil)) . -555) (555 . 562) (#("LE" 0 1 (fontified t) 1 2 (fontified t)) . -555) (undo-tree-id1769 . -2) (undo-tree-id1770 . -2) (undo-tree-id1771 . -2) (undo-tree-id1772 . -2) (undo-tree-id1773 . -2) (undo-tree-id1774 . -2) (undo-tree-id1775 . -2) (undo-tree-id1776 . -2) (undo-tree-id1777 . -2) (undo-tree-id1778 . -2) (undo-tree-id1779 . -2) (undo-tree-id1780 . -2) (undo-tree-id1781 . -2) (undo-tree-id1782 . -2) (undo-tree-id1783 . -2) 557 (555 . 557)) nil (26028 1708 220730 550000) 0 nil])
([nil nil ((#("      " 0 6 (fontified t)) . -725) (undo-tree-id1812 . -6) (undo-tree-id1813 . -6) 731 (725 . 731) (#("      " 0 6 (fontified nil)) . 724) (undo-tree-id1814 . -6) (undo-tree-id1815 . -6) (724 . 731) (#("      " 0 6 (fontified nil)) . 723) (undo-tree-id1816 . -6) (undo-tree-id1817 . -6) (722 . 730) (t 26028 1708 238081 738000)) nil (26028 1772 811972 176000) 0 nil])
([nil nil ((724 . 730)) nil (26028 1772 811897 371000) 0 nil])
([nil nil ((581 . 583) (#("  " 0 2 (fontified nil)) . 580) (undo-tree-id1807 . -2) (undo-tree-id1808 . -2) (580 . 583) (#("  " 0 2 (fontified nil)) . 579) (undo-tree-id1809 . -2) (undo-tree-id1810 . -2) (581 . 582) (579 . 581) (#(" " 0 1 (fontified nil)) . -579) (undo-tree-id1811 . -1) (#(" " 0 1 (fontified t)) . 580)) nil (26028 1772 811893 372000) 0 nil])
([nil nil ((613 . 614) (608 . 613) (22 . 42) (581 . 588) (#("uint" 0 4 (fontified nil)) . 581) (581 . 585) (#("uint8_t" 0 7 (fontified nil)) . -581) (581 . 588) (#("uint" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -581) (undo-tree-id1805 . -4) (undo-tree-id1806 . -4) 585 (581 . 585) (579 . 581)) nil (26028 1772 811878 160000) 0 nil])
([nil nil ((784 . 791) (#("U" 0 1 (fontified nil)) . 784) (784 . 785) (#("UART_ID" 0 7 (fontified nil)) . -784) (784 . 791) (#("UA" 0 1 (fontified t) 1 2 (fontified t)) . -784) (undo-tree-id1789 . -2) (undo-tree-id1790 . -2) 786 (784 . 786) (#("u" 0 1 (fontified t)) . -784) (undo-tree-id1791 . -1) (undo-tree-id1792 . -1) (#("a" 0 1 (fontified t)) . -785) (undo-tree-id1793 . -1) (undo-tree-id1794 . -1) (#("r" 0 1 (fontified t)) . -786) (undo-tree-id1795 . -1) (undo-tree-id1796 . -1) (#("t" 0 1 (fontified t)) . -787) (undo-tree-id1797 . -1) (undo-tree-id1798 . -1) 788 (785 . 788) (#("uart_inst_t *uart" 0 11 (face font-lock-type-face fontified nil) 11 13 (fontified nil) 13 17 (face font-lock-variable-name-face fontified nil)) . 785) (784 . 785) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 784 791 nil nil nil t nil)) nil 11 nil #s(yas--field 1 784 791 nil nil nil t nil) nil nil)) (774 . 802) (#("uart_getc(${1:uart_inst_t *uart})" 0 33 (fontified nil)) . 774) (774 . 807) (#("uart_g" 0 6 (fontified nil)) . 774) (774 . 780) (#("uart_getc(uart_inst_t *uart)" 0 28 (fontified nil)) . -774) (774 . 802) (#("uart_ge" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t)) . -774) (undo-tree-id1799 . -6) (undo-tree-id1800 . -7) (undo-tree-id1801 . -7) 781 (#("r" 0 1 (fontified t)) . -781) (undo-tree-id1802 . -1) (undo-tree-id1803 . -1) 782 (776 . 782) (767 . 776) (761 . 767) (#("     " 0 5 (fontified nil)) . -761) (undo-tree-id1804 . -5) (#(" " 0 1 (fontified t)) . 766)) nil (26028 1772 811860 690000) 0 nil])
([nil nil ((apply yas--snippet-revive 774 792 #s(yas--snippet nil (#s(yas--field 1 784 791 nil nil nil t nil)) nil 11 nil #s(yas--field 1 784 791 nil nil nil t nil) nil nil))) nil (26028 1772 811819 421000) 0 nil])
([nil nil ((792 . 793)) nil (26028 1772 811817 271000) 0 nil])
([nil nil ((#("uart1" 0 5 (fontified t)) . 722) (undo-tree-id1788 . -4)) nil (26028 1772 811813 499000) 0 nil])
([nil nil ((722 . 729) (#("UA" 0 2 (fontified nil)) . 722) (722 . 724) (#("UART_ID" 0 7 (fontified nil)) . -722) (722 . 729) (#("UA" 0 1 (fontified t) 1 2 (fontified t)) . -722) (undo-tree-id1786 . -2) (undo-tree-id1787 . -2) 724 (723 . 724) (722 . 723)) nil (26028 1772 811799 738000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 796) (undo-tree-id1989 . -1) (t 26028 1772 853962 985000)) nil (26028 1807 973958 11000) 0 nil])
([nil nil ((#("      " 0 6 (fontified t)) . -798) (undo-tree-id1884 . -6) (undo-tree-id1885 . -6) (undo-tree-id1886 . -6) (undo-tree-id1887 . -6) (undo-tree-id1888 . -6) (undo-tree-id1889 . -6) (undo-tree-id1890 . -6) (undo-tree-id1891 . -6) (undo-tree-id1892 . -6) (undo-tree-id1893 . -6) (undo-tree-id1894 . -6) (undo-tree-id1895 . -6) (undo-tree-id1896 . -6) (undo-tree-id1897 . -6) (undo-tree-id1898 . -6) (undo-tree-id1899 . -6) (undo-tree-id1900 . -6) (undo-tree-id1901 . -6) (undo-tree-id1902 . -6) (undo-tree-id1903 . -6) (undo-tree-id1904 . -6) (undo-tree-id1905 . -6) (undo-tree-id1906 . -6) (undo-tree-id1907 . -6) (undo-tree-id1908 . -6) (undo-tree-id1909 . -6) (undo-tree-id1910 . -6) (undo-tree-id1911 . -6) (undo-tree-id1912 . -6) (undo-tree-id1913 . -6) (undo-tree-id1914 . -6) (undo-tree-id1915 . -6) (undo-tree-id1916 . -6) (undo-tree-id1917 . -6) (undo-tree-id1918 . -6) (undo-tree-id1919 . -6) (undo-tree-id1920 . -6) (undo-tree-id1921 . -6) (undo-tree-id1922 . -6) (undo-tree-id1923 . -6) (undo-tree-id1924 . -6) (undo-tree-id1925 . -6) (undo-tree-id1926 . -6) (undo-tree-id1927 . -6) (undo-tree-id1928 . -6) (undo-tree-id1929 . -6) (undo-tree-id1930 . -6) 804 (798 . 804) (#("      " 0 6 (fontified nil)) . 797) (undo-tree-id1931 . -6) (undo-tree-id1932 . -6) (undo-tree-id1933 . -6) (undo-tree-id1934 . -6) (undo-tree-id1935 . -6) (undo-tree-id1936 . -6) (undo-tree-id1937 . -6) (undo-tree-id1938 . -6) (undo-tree-id1939 . -6) (undo-tree-id1940 . -6) (undo-tree-id1941 . -6) (undo-tree-id1942 . -6) (undo-tree-id1943 . -6) (undo-tree-id1944 . -6) (undo-tree-id1945 . -6) (undo-tree-id1946 . -6) (undo-tree-id1947 . -6) (undo-tree-id1948 . -6) (undo-tree-id1949 . -6) (undo-tree-id1950 . -6) (undo-tree-id1951 . -6) (undo-tree-id1952 . -6) (undo-tree-id1953 . -6) (undo-tree-id1954 . -6) (undo-tree-id1955 . -6) (undo-tree-id1956 . -6) (undo-tree-id1957 . -6) (undo-tree-id1958 . -6) (undo-tree-id1959 . -6) (undo-tree-id1960 . -6) (undo-tree-id1961 . -6) (undo-tree-id1962 . -6) (undo-tree-id1963 . -6) (undo-tree-id1964 . -6) (undo-tree-id1965 . -6) (undo-tree-id1966 . -6) (undo-tree-id1967 . -6) (undo-tree-id1968 . -6) (undo-tree-id1969 . -6) (undo-tree-id1970 . -6) (undo-tree-id1971 . -6) (undo-tree-id1972 . -6) (undo-tree-id1973 . -6) (undo-tree-id1974 . -6) (undo-tree-id1975 . -6) (undo-tree-id1976 . -6) (undo-tree-id1977 . -6) (797 . 804) (#("      " 0 6 (fontified nil)) . 796) (undo-tree-id1978 . -6) (undo-tree-id1979 . -6) (undo-tree-id1980 . -6) (undo-tree-id1981 . -6) (undo-tree-id1982 . -6) (undo-tree-id1983 . -6) (undo-tree-id1984 . -6) (undo-tree-id1985 . -6) (undo-tree-id1986 . -6) (undo-tree-id1987 . -6) (undo-tree-id1988 . -6) (795 . 803)) nil (26028 1807 973941 614000) 0 nil])
([nil nil ((814 . 815) (nil syntax-table nil 816 . 817) (nil syntax-table (1) 810 . 811) (811 . 814) (#("?" 0 1 (face font-lock-string-face fontified t)) . -811) (undo-tree-id1882 . -1) (undo-tree-id1883 . -1) 812 (811 . 812) (811 . 812) (nil syntax-table nil 812 . 813) (nil syntax-table (1) 810 . 811) (810 . 811) (#("\"" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil)) . -810) (nil syntax-table nil 812 . 813) (nil syntax-table (1) 810 . 811) (810 . 811) (809 . 811) (806 . 809) (804 . 806) (803 . 804) (797 . 803)) nil (26028 1807 973716 902000) 0 nil])
([nil nil ((821 . 823) (819 . 821) (818 . 820) (#("d" 0 1 (fontified t)) . -818) (undo-tree-id1873 . -1) (undo-tree-id1874 . -1) (undo-tree-id1875 . -1) (undo-tree-id1876 . -1) (#("a" 0 1 (fontified t)) . -819) (undo-tree-id1877 . -1) (undo-tree-id1878 . -1) (undo-tree-id1879 . -1) 820 (818 . 820) (#("U" 0 1 (fontified t)) . -818) (undo-tree-id1880 . -1) (undo-tree-id1881 . -1) 819 (817 . 819) (816 . 817)) nil (26028 1807 973702 179000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 822) (undo-tree-id1818 . -1) (undo-tree-id1819 . -1) (undo-tree-id1820 . -1) (undo-tree-id1821 . -1) (undo-tree-id1822 . -1) (undo-tree-id1823 . -1) (undo-tree-id1824 . -1) (undo-tree-id1825 . -1) (undo-tree-id1826 . -1) (undo-tree-id1827 . -1) (undo-tree-id1828 . -1) (undo-tree-id1829 . -1) (undo-tree-id1830 . -1) (undo-tree-id1831 . -1) (undo-tree-id1832 . -1) (undo-tree-id1833 . -1) (undo-tree-id1834 . -1) (undo-tree-id1835 . -1) (undo-tree-id1836 . -1) (undo-tree-id1837 . -1) (undo-tree-id1838 . -1) (undo-tree-id1839 . -1) (undo-tree-id1840 . -1) (undo-tree-id1841 . -1) (undo-tree-id1842 . -1) (undo-tree-id1843 . -1) (undo-tree-id1844 . -1) (undo-tree-id1845 . -1) (undo-tree-id1846 . -1) (undo-tree-id1847 . -1) (undo-tree-id1848 . -1) (undo-tree-id1849 . -1) (undo-tree-id1850 . -1) (undo-tree-id1851 . -1) (undo-tree-id1852 . -1) (undo-tree-id1853 . -1) (undo-tree-id1854 . -1) (undo-tree-id1855 . -1) (undo-tree-id1856 . -1) (undo-tree-id1857 . -1) (undo-tree-id1858 . -1) (undo-tree-id1859 . -1) (undo-tree-id1860 . -1) (undo-tree-id1861 . -1) (undo-tree-id1862 . -1) (undo-tree-id1863 . -1) (undo-tree-id1864 . -1) (undo-tree-id1865 . -1) (undo-tree-id1866 . -1) (undo-tree-id1867 . -1) (undo-tree-id1868 . -1) (undo-tree-id1869 . -1) (undo-tree-id1870 . -1) (undo-tree-id1871 . -1) (undo-tree-id1872 . -1)) nil (26028 1807 973494 303000) 0 nil])
([nil nil ((824 . 825)) nil (26028 1807 973341 942000) 0 nil])
([nil nil ((823 . 828)) nil (26028 1807 973331 271000) 0 nil])
([nil nil ((570 . 572) (565 . 570) (564 . 565) (561 . 564) (559 . 561) (t 26028 1807 989925 449000)) nil (26028 4417 251311 395000) 0 nil])
([nil nil ((572 . 573)) nil (26028 4417 251309 524000) 0 nil])
([nil nil ((571 . 578) (#("L" 0 1 (fontified nil)) . 571) (571 . 572) (#("LED_PIN" 0 7 (fontified nil)) . -571) (571 . 578) (#("LE" 0 1 (fontified t) 1 2 (fontified t)) . -571) (undo-tree-id0 . -2) (undo-tree-id1 . -2) 573 (572 . 573) (571 . 572)) nil (26028 4417 251304 813000) 0 nil])
([nil nil ((#("uint8" 0 5 (fontified t face font-lock-type-face)) . 622) (undo-tree-id6 . -4) (undo-tree-id7 . -5) (t 26028 4417 288694 104000)) nil (26028 4596 806814 150000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t face font-lock-type-face)) . 622) (undo-tree-id5 . -1)) nil (26028 4596 806811 961000) 0 nil])
([nil nil ((#("t " 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face) 1 2 (fontified t)) . 622) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -2)) nil (26028 4776 422989 616000) 0 nil])
([nil nil ((625 . 627) (#("t" 0 1 (fontified t)) . -625) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (#("r" 0 1 (fontified t)) . -626) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (#(" " 0 1 (fontified t)) . -627) (undo-tree-id171 . -1) (undo-tree-id172 . -1) 628 (627 . 628) (625 . 627) (622 . 625)) nil (26028 4782 517997 833000) 0 nil] [nil nil ((622 . 627)) ((#("char " 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t face font-lock-type-face) 3 4 (fontified t c-type c-decl-id-start face font-lock-type-face) 4 5 (fontified t)) . 622)) (26028 4775 942727 349000) 0 nil])
([nil nil ((#("char " 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t face font-lock-type-face) 3 4 (fontified t c-type c-decl-id-start face font-lock-type-face) 4 5 (fontified t)) . 622) (undo-tree-id378 . -4) (undo-tree-id379 . -5) (t 26028 4782 555854 991000)) nil (26028 4798 200208 826000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-5-face))) . 836) (t 26028 4596 842189 551000)) ((836 . 837)) (26028 4775 467675 773000) 0 nil])
([nil nil ((629 . 630) (622 . 629) (#("ui" 0 2 (fontified nil)) . 622) (622 . 624) (#("uint8_t" 0 7 (fontified nil)) . -622) (622 . 629) (#("uint8" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t)) . -622) (undo-tree-id173 . -5) (undo-tree-id174 . -5) (undo-tree-id175 . -5) (undo-tree-id176 . -4) (undo-tree-id177 . -4) (undo-tree-id178 . -4) (undo-tree-id179 . -4) (undo-tree-id180 . -4) (undo-tree-id181 . -4) (undo-tree-id182 . -4) (undo-tree-id183 . -4) (undo-tree-id184 . -4) (undo-tree-id185 . -4) (undo-tree-id186 . -4) (undo-tree-id187 . -4) (undo-tree-id188 . -4) (undo-tree-id189 . -4) (undo-tree-id190 . -4) (undo-tree-id191 . -4) (undo-tree-id192 . -4) (undo-tree-id193 . -4) (undo-tree-id194 . -4) (undo-tree-id195 . -4) (undo-tree-id196 . -4) (undo-tree-id197 . -4) (undo-tree-id198 . -4) (undo-tree-id199 . -4) (undo-tree-id200 . -4) (undo-tree-id201 . -4) (undo-tree-id202 . -4) (undo-tree-id203 . -4) (undo-tree-id204 . -4) (undo-tree-id205 . -4) (undo-tree-id206 . -4) (undo-tree-id207 . -4) (undo-tree-id208 . -4) (undo-tree-id209 . -4) (undo-tree-id210 . -4) (undo-tree-id211 . -4) (undo-tree-id212 . -4) (undo-tree-id213 . -4) (undo-tree-id214 . -4) (undo-tree-id215 . -4) (undo-tree-id216 . -4) (undo-tree-id217 . -4) (undo-tree-id218 . -4) (undo-tree-id219 . -4) (undo-tree-id220 . -4) (undo-tree-id221 . -4) (undo-tree-id222 . -4) (undo-tree-id223 . -4) (undo-tree-id224 . -4) (undo-tree-id225 . -4) (undo-tree-id226 . -4) (undo-tree-id227 . -4) (undo-tree-id228 . -4) (undo-tree-id229 . -4) (undo-tree-id230 . -4) (undo-tree-id231 . -4) (undo-tree-id232 . -4) (undo-tree-id233 . -4) (undo-tree-id234 . -4) (undo-tree-id235 . -4) (undo-tree-id236 . -4) (undo-tree-id237 . -4) (undo-tree-id238 . -4) (undo-tree-id239 . -4) (undo-tree-id240 . -4) (undo-tree-id241 . -4) (undo-tree-id242 . -4) (undo-tree-id243 . -4) (undo-tree-id244 . -4) (undo-tree-id245 . -4) (undo-tree-id246 . -4) (undo-tree-id247 . -4) (undo-tree-id248 . -4) (undo-tree-id249 . -4) (undo-tree-id250 . -4) (undo-tree-id251 . -4) (undo-tree-id252 . -4) (undo-tree-id253 . -4) (undo-tree-id254 . -4) (undo-tree-id255 . -4) (undo-tree-id256 . -4) (undo-tree-id257 . -4) (undo-tree-id258 . -4) (undo-tree-id259 . -4) (undo-tree-id260 . -4) (undo-tree-id261 . -4) (undo-tree-id262 . -4) (undo-tree-id263 . -4) (undo-tree-id264 . -4) (undo-tree-id265 . -4) (undo-tree-id266 . -4) (undo-tree-id267 . -5) (undo-tree-id268 . -5) (undo-tree-id269 . -5) (undo-tree-id270 . -5) (undo-tree-id271 . -5) (undo-tree-id272 . -5) (undo-tree-id273 . -5) (undo-tree-id274 . -5) (undo-tree-id275 . -5) (undo-tree-id276 . -5) (undo-tree-id277 . -5) (undo-tree-id278 . -5) (undo-tree-id279 . -5) (undo-tree-id280 . -5) (undo-tree-id281 . -5) (undo-tree-id282 . -5) (undo-tree-id283 . -5) (undo-tree-id284 . -5) (undo-tree-id285 . -5) (undo-tree-id286 . -5) (undo-tree-id287 . -5) (undo-tree-id288 . -5) (undo-tree-id289 . -5) (undo-tree-id290 . -5) (undo-tree-id291 . -5) (undo-tree-id292 . -5) (undo-tree-id293 . -5) (undo-tree-id294 . -5) (undo-tree-id295 . -5) (undo-tree-id296 . -5) (undo-tree-id297 . -5) (undo-tree-id298 . -5) (undo-tree-id299 . -5) (undo-tree-id300 . -5) (undo-tree-id301 . -5) (undo-tree-id302 . -5) (undo-tree-id303 . -5) (undo-tree-id304 . -5) (undo-tree-id305 . -5) (undo-tree-id306 . -5) (undo-tree-id307 . -5) (undo-tree-id308 . -5) (undo-tree-id309 . -5) (undo-tree-id310 . -5) (undo-tree-id311 . -5) (undo-tree-id312 . -5) (undo-tree-id313 . -5) (undo-tree-id314 . -5) (undo-tree-id315 . -5) (undo-tree-id316 . -5) (undo-tree-id317 . -5) (undo-tree-id318 . -5) (undo-tree-id319 . -5) (undo-tree-id320 . -5) (undo-tree-id321 . -5) (undo-tree-id322 . -5) (undo-tree-id323 . -5) (undo-tree-id324 . -5) (undo-tree-id325 . -5) (undo-tree-id326 . -5) (undo-tree-id327 . -5) (undo-tree-id328 . -5) (undo-tree-id329 . -5) (undo-tree-id330 . -5) (undo-tree-id331 . -5) (undo-tree-id332 . -5) (undo-tree-id333 . -5) (undo-tree-id334 . -5) (undo-tree-id335 . -5) (undo-tree-id336 . -5) (undo-tree-id337 . -5) (undo-tree-id338 . -5) (undo-tree-id339 . -5) (undo-tree-id340 . -5) (undo-tree-id341 . -5) (undo-tree-id342 . -5) (undo-tree-id343 . -5) (undo-tree-id344 . -5) (undo-tree-id345 . -5) (undo-tree-id346 . -5) (undo-tree-id347 . -5) (undo-tree-id348 . -5) (undo-tree-id349 . -5) (undo-tree-id350 . -5) (undo-tree-id351 . -5) (undo-tree-id352 . -5) (undo-tree-id353 . -5) (undo-tree-id354 . -5) (undo-tree-id355 . -5) (undo-tree-id356 . -5) (undo-tree-id357 . -5) (undo-tree-id358 . -5) (undo-tree-id359 . -5) (undo-tree-id360 . -5) (undo-tree-id361 . -5) (undo-tree-id362 . -5) (undo-tree-id363 . -5) (undo-tree-id364 . -5) (undo-tree-id365 . -5) (undo-tree-id366 . -5) (undo-tree-id367 . -5) (undo-tree-id368 . -5) (undo-tree-id369 . -5) (undo-tree-id370 . -5) (undo-tree-id371 . -5) (undo-tree-id372 . -5) (undo-tree-id373 . -5) (undo-tree-id374 . -5) (undo-tree-id375 . -5) 627 (626 . 627) (623 . 626) (622 . 623) (#("i" 0 1 (fontified t)) . -622) (undo-tree-id376 . -1) (undo-tree-id377 . -1) 623 (622 . 623)) nil (26028 4798 200196 166000) 0 nil])
([nil nil ((#("int" 0 3 (fontified t face font-lock-type-face)) . 836) (undo-tree-id11 . -2) (undo-tree-id12 . 3) (undo-tree-id14 . -3) (undo-tree-id16 . -3) (undo-tree-id18 . -3) (undo-tree-id20 . -3) (undo-tree-id22 . -3) (undo-tree-id24 . -3) (undo-tree-id26 . -3) (undo-tree-id28 . -3) (undo-tree-id30 . -3)) ((836 . 839)) (26028 4774 307789 116000) 0 nil])
([nil nil ((#("    if (uart_is_readable(UART_ID)) {
" 0 4 (fontified t) 4 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 8 (fontified t face (rainbow-delimiters-depth-3-face)) 8 24 (fontified t) 24 25 (fontified t face (rainbow-delimiters-depth-4-face)) 25 32 (fontified t) 32 33 (fontified t face (rainbow-delimiters-depth-4-face)) 33 34 (fontified t face (rainbow-delimiters-depth-3-face)) 34 35 (fontified t) 35 36 (fontified t face (rainbow-delimiters-depth-3-face)) 36 37 (fontified t)) . 718) (undo-tree-id594 . -36) (undo-tree-id595 . -29) (undo-tree-id596 . -29) 747 (t 26028 4798 211991 891000)) nil (26028 8150 303165 73000) 0 nil])
([nil nil ((#(") " 0 1 (fontified t face (rainbow-delimiters-depth-4-face)) 1 2 (fontified t)) . 836) (undo-tree-id8 . -1) (undo-tree-id9 . 2)) ((836 . 838)) (26028 4773 899527 343000) 0 nil])
([nil nil ((#("    }
" 0 4 (fontified t) 4 5 (fontified t face (rainbow-delimiters-depth-3-face)) 5 6 (fontified t)) . 816) (undo-tree-id592 . -5) (undo-tree-id593 . -4) 820) nil (26028 8150 303162 13000) 0 nil])
([nil nil ((#("      data = uart_getc(UART_ID);
" 0 22 (fontified t) 22 23 (fontified t face (rainbow-delimiters-depth-4-face)) 23 30 (fontified t) 30 31 (fontified t face (rainbow-delimiters-depth-4-face)) 31 33 (fontified t)) . 781) (undo-tree-id33 . -32) (undo-tree-id34 . -33) (undo-tree-id35 . -33) (undo-tree-id37 . -33) (undo-tree-id39 . -33) (undo-tree-id41 . -33) (undo-tree-id43 . -33) (undo-tree-id45 . -33) (undo-tree-id47 . -21) (undo-tree-id49 . -21) (undo-tree-id51 . -21) (undo-tree-id53 . -21) (undo-tree-id55 . -21) (undo-tree-id57 . -21) (undo-tree-id59 . -21) (undo-tree-id61 . -21) (undo-tree-id63 . -21) (undo-tree-id65 . -33) (undo-tree-id67 . -33) (undo-tree-id69 . -33) (undo-tree-id71 . -33) (undo-tree-id73 . -33) (undo-tree-id75 . -33) (undo-tree-id77 . -33) (undo-tree-id79 . -33) (undo-tree-id81 . -33) (undo-tree-id83 . -21) (undo-tree-id85 . -21) (undo-tree-id87 . -21) (undo-tree-id89 . -21) (undo-tree-id91 . -33) (t 26028 4612 118330 213000)) ((781 . 814)) (26028 4773 494533 383000) 0 nil])
([nil nil ((718 . 722) (#("      " 0 6 (fontified t)) . 718) (undo-tree-id591 . -2) 720) nil (26028 8150 303159 934000) 0 nil])
([nil nil ((631 . 635) (t 26028 4620 178404 111000)) ((#(" = 1" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . 631) (undo-tree-id92 . -3) (undo-tree-id93 . -3) (undo-tree-id94 . -3) (undo-tree-id95 . -3) (undo-tree-id96 . -3) (undo-tree-id97 . -3) (undo-tree-id98 . -3) (undo-tree-id99 . -3) (undo-tree-id100 . -3) (undo-tree-id101 . -3) (undo-tree-id102 . -3) (undo-tree-id103 . -3) (undo-tree-id104 . -3) (undo-tree-id105 . -3) (undo-tree-id106 . -3) (undo-tree-id107 . -3) (undo-tree-id108 . -3) (undo-tree-id109 . -3) (undo-tree-id110 . -3) (undo-tree-id111 . -3) (undo-tree-id112 . -3) (undo-tree-id113 . -3) (undo-tree-id114 . -3) (undo-tree-id115 . -3) (undo-tree-id116 . -3) (undo-tree-id117 . -3) (undo-tree-id118 . -3) (undo-tree-id119 . -3) (undo-tree-id120 . -3) (undo-tree-id121 . -3) (undo-tree-id122 . -3) (undo-tree-id123 . -3) (undo-tree-id124 . -3) (undo-tree-id125 . -3) (undo-tree-id126 . -3) (undo-tree-id127 . -3) (undo-tree-id128 . -3) (undo-tree-id129 . -3) (undo-tree-id130 . -3) (undo-tree-id131 . -3) (undo-tree-id132 . -3) (undo-tree-id133 . -3) (undo-tree-id134 . -3) (undo-tree-id135 . -3) (undo-tree-id136 . -3) (undo-tree-id137 . -3) (undo-tree-id138 . -3) (undo-tree-id139 . -3) (undo-tree-id140 . -3) (undo-tree-id141 . -3) (undo-tree-id142 . -3) (undo-tree-id143 . -3) (undo-tree-id144 . -3) (undo-tree-id145 . -3) (undo-tree-id146 . -3) (undo-tree-id147 . -3) (undo-tree-id148 . -3) (undo-tree-id149 . -3) (undo-tree-id150 . -3) (undo-tree-id151 . -3) (undo-tree-id152 . -3) (undo-tree-id153 . -3) (undo-tree-id154 . -3) (t 26028 4625 602453 716000)) (26028 4625 567377 401000) 0 nil])
([nil nil ((745 . 749) (#("      " 0 6 (fontified t)) . 745) (undo-tree-id590 . -4) 749) nil (26028 8150 303158 497000) 0 nil])
nil
([nil nil ((811 . 817)) nil (26028 8150 303156 716000) 0 nil])
([nil nil ((776 . 780)) nil (26028 8150 303156 157000) 0 nil])
([nil nil ((815 . 821) (#("   " 0 3 (fontified nil)) . -815) (undo-tree-id479 . -3) (undo-tree-id480 . -3) (undo-tree-id481 . -3) (undo-tree-id482 . -3) (undo-tree-id483 . -3) (undo-tree-id484 . -3) (undo-tree-id485 . -3) (undo-tree-id486 . -3) (undo-tree-id487 . -3) (undo-tree-id488 . -3) (undo-tree-id489 . -3) (undo-tree-id490 . -3) (undo-tree-id491 . -3) (undo-tree-id492 . -3) (undo-tree-id493 . -3) (undo-tree-id494 . -3) (undo-tree-id495 . -3) (undo-tree-id496 . -3) (undo-tree-id497 . -3) (undo-tree-id498 . -3) (undo-tree-id499 . -3) (undo-tree-id500 . -3) (undo-tree-id501 . -3) (undo-tree-id502 . -3) (undo-tree-id503 . -3) (undo-tree-id504 . -3) (undo-tree-id505 . -3) (undo-tree-id506 . -3) (undo-tree-id507 . -3) (undo-tree-id508 . -3) (undo-tree-id509 . -3) (undo-tree-id510 . -3) (undo-tree-id511 . -3) (undo-tree-id512 . -3) (undo-tree-id513 . -3) (undo-tree-id514 . -3) (undo-tree-id515 . -3) (undo-tree-id516 . -3) (undo-tree-id517 . -3) (undo-tree-id518 . -3) (undo-tree-id519 . -3) (undo-tree-id520 . -3) (undo-tree-id521 . -3) (undo-tree-id522 . -3) (undo-tree-id523 . -3) (undo-tree-id524 . -3) (undo-tree-id525 . -3) (undo-tree-id526 . -3) (undo-tree-id527 . -3) (undo-tree-id528 . -3) (undo-tree-id529 . -3) (undo-tree-id530 . -3) (undo-tree-id531 . -3) (undo-tree-id532 . -3) (undo-tree-id533 . -3) (undo-tree-id534 . -3) (undo-tree-id535 . -3) (undo-tree-id536 . -3) (undo-tree-id537 . -3) (undo-tree-id538 . -3) (undo-tree-id539 . -3) (undo-tree-id540 . -3) (undo-tree-id541 . -3) (undo-tree-id542 . -3) (undo-tree-id543 . -3) (undo-tree-id544 . -3) (undo-tree-id545 . -3) (#("   " 0 3 (fontified t)) . 818) (undo-tree-id546 . -3) (undo-tree-id547 . -2) (undo-tree-id548 . -2) (undo-tree-id549 . -2) (undo-tree-id550 . -2) (undo-tree-id551 . -2) (undo-tree-id552 . -2) (undo-tree-id553 . -2) (undo-tree-id554 . -2) (undo-tree-id555 . -2) (undo-tree-id556 . -2) (undo-tree-id557 . -2) (undo-tree-id558 . -2) (undo-tree-id559 . -2) (undo-tree-id560 . -2) (undo-tree-id561 . -2) (undo-tree-id562 . -2) (undo-tree-id563 . -2) (undo-tree-id564 . -2) (undo-tree-id565 . -2) (undo-tree-id566 . -2) (undo-tree-id567 . -2) (undo-tree-id568 . -2) (undo-tree-id569 . -2) (undo-tree-id570 . -2) (undo-tree-id571 . -2) (undo-tree-id572 . -2) (undo-tree-id573 . -2) (undo-tree-id574 . -2) (undo-tree-id575 . -2) (undo-tree-id576 . -2) (undo-tree-id577 . -2) (undo-tree-id578 . -2) (undo-tree-id579 . -2) (undo-tree-id580 . -2) (undo-tree-id581 . -2) (undo-tree-id582 . -2) (undo-tree-id583 . -2) (undo-tree-id584 . -2) (undo-tree-id585 . -2) (undo-tree-id586 . -2) (undo-tree-id587 . -2) (undo-tree-id588 . -2) (undo-tree-id589 . -2)) nil (26028 8150 303151 983000) 0 nil])
([nil nil ((781 . 785) (#("      " 0 6 (fontified t)) . 781) (undo-tree-id380 . -5) (undo-tree-id381 . -4) (undo-tree-id382 . -4) (undo-tree-id383 . -4) (undo-tree-id384 . -4) (undo-tree-id385 . -4) (undo-tree-id386 . -4) (undo-tree-id387 . -4) (undo-tree-id388 . -4) (undo-tree-id389 . -4) (undo-tree-id390 . -4) (undo-tree-id391 . -4) (undo-tree-id392 . -4) (undo-tree-id393 . -4) (undo-tree-id394 . -4) (undo-tree-id395 . -4) (undo-tree-id396 . -4) (undo-tree-id397 . -4) (undo-tree-id398 . -4) (undo-tree-id399 . -4) (undo-tree-id400 . -4) (undo-tree-id401 . -5) (undo-tree-id402 . -5) (undo-tree-id403 . -5) (undo-tree-id404 . -5) (undo-tree-id405 . -5) (undo-tree-id406 . -5) (undo-tree-id407 . -5) (undo-tree-id408 . -5) (undo-tree-id409 . -5) (undo-tree-id410 . -5) (undo-tree-id411 . -5) (undo-tree-id412 . -5) (undo-tree-id413 . -5) (undo-tree-id414 . -5) (undo-tree-id415 . -5) (undo-tree-id416 . -5) (undo-tree-id417 . -5) (undo-tree-id418 . -5) (undo-tree-id419 . -3) (undo-tree-id420 . -3) (undo-tree-id421 . -3) (undo-tree-id422 . -3) (undo-tree-id423 . -3) (undo-tree-id424 . -3) (undo-tree-id425 . -3) (undo-tree-id426 . -3) (undo-tree-id427 . -3) (undo-tree-id428 . -3) (undo-tree-id429 . -3) (undo-tree-id430 . -3) (undo-tree-id431 . -3) (undo-tree-id432 . -3) (undo-tree-id433 . -3) (undo-tree-id434 . -3) (undo-tree-id435 . -3) (undo-tree-id436 . -3) (undo-tree-id437 . -3) (undo-tree-id438 . -3) (undo-tree-id439 . -3) (undo-tree-id440 . -3) (undo-tree-id441 . -3) (undo-tree-id442 . -3) (undo-tree-id443 . -3) (undo-tree-id444 . -3) (undo-tree-id445 . -3) (undo-tree-id446 . -3) (undo-tree-id447 . -3) (undo-tree-id448 . -5) (undo-tree-id449 . -5) (undo-tree-id450 . -5) (undo-tree-id451 . -5) (undo-tree-id452 . -5) (undo-tree-id453 . -5) (undo-tree-id454 . -5) (undo-tree-id455 . -5) (undo-tree-id456 . -5) (undo-tree-id457 . -5) (undo-tree-id458 . -5) (undo-tree-id459 . -5) (undo-tree-id460 . -5) (undo-tree-id461 . -5) (undo-tree-id462 . -5) (undo-tree-id463 . -5) (undo-tree-id464 . -5) (undo-tree-id465 . -5) (undo-tree-id466 . -6) (undo-tree-id467 . -5) (undo-tree-id468 . -5) (undo-tree-id469 . -5) (undo-tree-id470 . -5) (undo-tree-id471 . -5) (undo-tree-id472 . -5) (undo-tree-id473 . -5) (undo-tree-id474 . -5) (undo-tree-id475 . -5) (undo-tree-id476 . -5) (undo-tree-id477 . -5) (undo-tree-id478 . -5) 786) nil (26028 8150 303074 475000) 0 nil])
([nil nil ((838 . 839) (apply yas--snippet-revive 818 838 #s(yas--snippet nil (#s(yas--field 1 827 834 nil nil nil t #s(yas--field 2 836 837 nil nil nil t nil)) #s(yas--field 2 836 837 nil nil nil t nil)) nil 0 nil #s(yas--field 2 836 837 nil nil nil t nil) nil nil)) (#("bool value" 0 4 (fontified nil face font-lock-type-face) 4 5 (fontified nil) 5 10 (fontified nil face font-lock-variable-name-face)) . 837) (836 . 837) (827 . 834) (#("L" 0 1 (fontified nil)) . 827) (827 . 828) (#("LED_PIN" 0 7 (fontified nil)) . -827) (827 . 834) (#("LED" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -827) (undo-tree-id608 . -3) (undo-tree-id609 . -3) (undo-tree-id610 . -3) 830 (829 . 830) (828 . 829) (#("uint gpio" 0 4 (fontified nil face font-lock-type-face) 4 5 (fontified nil) 5 9 (fontified nil face font-lock-variable-name-face)) . 828) (827 . 828) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 827 834 nil nil nil t #s(yas--field 2 836 837 nil nil nil t nil)) #s(yas--field 2 836 837 nil nil nil t nil)) nil 0 nil #s(yas--field 2 836 837 nil nil nil t nil) nil nil)) (818 . 849) (#("gpio_put(${1:uint gpio}, ${2:bool value})" 0 41 (fontified nil)) . 818) (818 . 859) (#("g" 0 1 (fontified nil)) . 818) (818 . 819) (#("gpio_put(uint gpio, bool value)" 0 31 (fontified nil)) . -818) (818 . 849) (#("gpio" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -818) (undo-tree-id611 . -4) (undo-tree-id612 . -4) 822 (820 . 822) (818 . 820) (814 . 818) (#("    " 0 4 (fontified nil)) . 813) (undo-tree-id613 . -4) (undo-tree-id614 . -4) (812 . 818) (t 26028 8150 313134 918000)) nil (26028 8176 903792 892000) 0 nil])
([nil nil ((782 . 783) (#("uint32_t ms" 0 8 (fontified nil face font-lock-type-face) 8 9 (fontified nil) 9 11 (fontified nil face font-lock-variable-name-face)) . 782) (781 . 782) (238 . 261) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 781 783 nil nil nil t nil)) nil 1 nil #s(yas--field 1 781 783 nil nil nil t nil) nil nil)) (749 . 770) (#("sleep_ms(${1:uint32_t ms})" 0 26 (fontified nil)) . 749) (749 . 775) (#("sl" 0 2 (fontified nil)) . 749) (749 . 751) (#("sleep_ms(uint32_t ms)" 0 21 (fontified nil)) . -749) (749 . 770) (#("sleep" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t face font-lock-type-face) 3 4 (fontified t face font-lock-type-face) 4 5 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -749) (undo-tree-id603 . -2) (undo-tree-id604 . -5) (undo-tree-id605 . -5) 754 (749 . 754) (745 . 749) (#("    " 0 4 (fontified nil)) . 744) (undo-tree-id606 . -4) (undo-tree-id607 . -4) (743 . 749)) nil (26028 8176 903783 636000) 0 nil])
([nil nil ((784 . 785) (apply yas--snippet-revive 772 784 #s(yas--snippet nil (#s(yas--field 1 781 783 nil nil nil t nil)) nil 1 nil #s(yas--field 1 781 783 nil nil nil t nil) nil nil))) nil (26028 8176 903778 318000) 0 nil])
([nil nil ((897 . 898) (#("uint32_t ms" 0 8 (fontified nil face font-lock-type-face) 8 9 (fontified nil) 9 11 (fontified nil face font-lock-variable-name-face)) . 897) (undo-tree-id597 . -11) (undo-tree-id598 . -8) (896 . 897) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 896 898 nil nil nil t nil)) nil 2 nil #s(yas--field 1 896 898 nil nil nil t nil) nil nil)) (887 . 908) (#("sleep_ms(${1:uint32_t ms})" 0 26 (fontified nil)) . 887) (887 . 913) (#("sl" 0 2 (fontified nil)) . 887) (887 . 889) (#("sleep_ms(uint32_t ms)" 0 21 (fontified nil)) . -887) (887 . 908) (#("slee" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -887) (undo-tree-id599 . -4) (undo-tree-id600 . -4) 891 (887 . 891) (883 . 887) (#("    " 0 4 (fontified nil)) . 882) (undo-tree-id601 . -4) (undo-tree-id602 . -4) (881 . 887)) nil (26028 8176 903774 973000) 0 nil])
([nil nil ((apply yas--snippet-revive 887 899 #s(yas--snippet nil (#s(yas--field 1 896 898 nil nil nil t nil)) nil 2 nil #s(yas--field 1 896 898 nil nil nil t nil) nil nil))) nil (26028 8176 903758 251000) 0 nil])
([nil nil ((899 . 900)) nil (26028 8176 903753 628000) 0 nil])
([nil nil ((783 . 784) (t 26028 8176 913380 418000)) nil (26028 8311 485813 255000) 0 nil])
([nil nil ((899 . 900)) nil (26028 8311 485806 962000) 0 nil])
([nil nil ((#("uart" 0 4 (fontified t)) . 799) (undo-tree-id794 . -3) (undo-tree-id795 . -3) (undo-tree-id796 . -3) (t 26028 8311 494611 986000)) nil (26028 8794 850276 829000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 799) (undo-tree-id793 . 1)) nil (26028 8794 850268 894000) 0 nil])
([nil nil ((#("getc" 0 4 (fontified t)) . 799) (undo-tree-id791 . -3) (undo-tree-id792 . 4)) nil (26028 8794 850265 447000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . 799) (undo-tree-id790 . 1)) nil (26028 8794 850260 691000) 0 nil])
([nil nil ((#("UART" 0 4 (fontified t)) . 799) (undo-tree-id788 . -3) (undo-tree-id789 . 4)) nil (26028 8794 850256 662000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 799) (undo-tree-id787 . 1)) nil (26028 8794 850251 937000) 0 nil])
([nil nil ((#("ID" 0 2 (fontified t)) . 799) (undo-tree-id785 . -1) (undo-tree-id786 . 2)) nil (26028 8794 850248 304000) 0 nil])
([nil nil ((#(");" 0 1 (fontified t face (rainbow-delimiters-mismatched-face)) 1 2 (fontified t)) . 799) (undo-tree-id783 . -1) (undo-tree-id784 . 2)) nil (26028 8794 850243 268000) 0 nil])
([nil nil ((#("    data = 
" 0 4 (fontified t) 4 8 (fontified t) 8 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t)) . 788) (undo-tree-id775 . -11) (undo-tree-id776 . -11) (undo-tree-id777 . -11) (undo-tree-id778 . 1) (undo-tree-id779 . -11) (undo-tree-id780 . -11) (undo-tree-id781 . -10) (undo-tree-id782 . -10) 798) nil (26028 8794 850236 530000) 0 nil])
([nil nil ((812 . 816) (#("da" 0 2 (fontified nil)) . 812) (812 . 814) (#("data" 0 4 (fontified nil)) . -812) (812 . 816) (#("da" 0 1 (fontified t) 1 2 (fontified t)) . -812) (undo-tree-id768 . -2) (undo-tree-id769 . -2) 814 (812 . 814) (#("uart_inst_t *uart" 0 11 (fontified nil face font-lock-type-face) 11 13 (fontified nil) 13 17 (fontified nil face font-lock-variable-name-face)) . 812) (811 . 812) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 811 816 nil nil nil t #s(yas--field 2 818 830 nil nil nil nil #s(yas--field 3 832 842 nil nil nil nil nil))) #s(yas--field 2 818 830 nil nil nil nil #s(yas--field 3 832 842 nil nil nil nil nil)) #s(yas--field 3 832 842 nil nil nil nil nil)) nil 3 nil #s(yas--field 2 818 830 nil nil nil nil #s(yas--field 3 832 842 nil nil nil nil nil)) nil nil)) (792 . 855) (#("uart_read_blocking(${1:uart_inst_t *uart}, ${2:uint8_t *dst}, ${3:size_t len})" 0 78 (fontified nil)) . 792) (792 . 870) (#("uart_r" 0 6 (fontified nil)) . 792) (792 . 798) (#("uart_read_blocking(uart_inst_t *uart, uint8_t *dst, size_t len)" 0 63 (fontified nil)) . -792) (792 . 855) (#("uart_rea" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t face font-lock-type-face) 3 4 (fontified t face font-lock-type-face) 4 5 (fontified t face font-lock-type-face) 5 6 (fontified t face font-lock-type-face) 6 7 (fontified t face font-lock-type-face) 7 8 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -792) (undo-tree-id770 . -6) (undo-tree-id771 . -8) (undo-tree-id772 . -8) 800 (796 . 800) (792 . 796) (788 . 792) (#("    " 0 4 (fontified nil)) . 787) (undo-tree-id773 . -4) (undo-tree-id774 . -4) (791 . 792) (787 . 791)) nil (26028 8794 850214 814000) 0 nil])
([nil nil ((apply yas--snippet-revive 792 843 #s(yas--snippet nil (#s(yas--field 1 811 816 nil nil nil t #s(yas--field 2 818 830 nil nil nil nil #s(yas--field 3 832 842 nil nil nil nil nil))) #s(yas--field 2 818 830 nil nil nil nil #s(yas--field 3 832 842 nil nil nil nil nil)) #s(yas--field 3 832 842 nil nil nil nil nil)) nil 3 nil #s(yas--field 2 818 830 nil nil nil nil #s(yas--field 3 832 842 nil nil nil nil nil)) nil nil))) nil (26028 8794 850194 48000) 0 nil])
([nil nil ((#("    uart_read_blocking(&data, uint8_t *dst, size_t len)
" 0 4 (fontified t) 4 22 (fontified t) 22 23 (fontified t face (rainbow-delimiters-depth-3-face)) 23 24 (fontified t) 24 28 (fontified t) 28 29 (fontified t) 29 30 (fontified t) 30 37 (fontified t face font-lock-type-face) 37 39 (fontified t) 39 42 (fontified t face font-lock-variable-name-face) 42 44 (fontified t) 44 50 (fontified t face font-lock-type-face) 50 51 (fontified t) 51 54 (fontified t face font-lock-variable-name-face) 54 55 (fontified t face (rainbow-delimiters-depth-3-face)) 55 56 (fontified t)) . 788) (undo-tree-id635 . -22) (undo-tree-id636 . 26) (undo-tree-id637 . -55) (undo-tree-id638 . -56) (undo-tree-id639 . -56) (undo-tree-id640 . -56) (undo-tree-id641 . -56) (undo-tree-id642 . -22) (undo-tree-id643 . -22) (undo-tree-id644 . -23) (undo-tree-id645 . -30) (undo-tree-id646 . -37) (undo-tree-id647 . -39) (undo-tree-id648 . -42) (undo-tree-id649 . -44) (undo-tree-id650 . -50) (undo-tree-id651 . -28) (undo-tree-id652 . -28) (undo-tree-id653 . -28) (undo-tree-id654 . -28) (undo-tree-id655 . -24) (undo-tree-id656 . -24) (undo-tree-id657 . -24) (undo-tree-id658 . -24) (undo-tree-id659 . -24) (undo-tree-id660 . -24) (undo-tree-id661 . -24) (undo-tree-id662 . -24) (undo-tree-id663 . -24) (undo-tree-id664 . -24) (undo-tree-id665 . -24) (undo-tree-id666 . -24) (undo-tree-id667 . -24) (undo-tree-id668 . -24) (undo-tree-id669 . -24) (undo-tree-id670 . -24) (undo-tree-id671 . -24) (undo-tree-id672 . -24) (undo-tree-id673 . -24) (undo-tree-id674 . -24) (undo-tree-id675 . -24) (undo-tree-id676 . -24) (undo-tree-id677 . -24) (undo-tree-id678 . -24) (undo-tree-id679 . -24) (undo-tree-id680 . -24) (undo-tree-id681 . -24) (undo-tree-id682 . -24) (undo-tree-id683 . -24) (undo-tree-id684 . -24) (undo-tree-id685 . -24) (undo-tree-id686 . -24) (undo-tree-id687 . -24) (undo-tree-id688 . -22) (undo-tree-id689 . -22) (undo-tree-id690 . -22) (undo-tree-id691 . -22) (undo-tree-id692 . -22) (undo-tree-id693 . -22) (undo-tree-id694 . -22) (undo-tree-id695 . -22) (undo-tree-id696 . -22) (undo-tree-id697 . -22) (undo-tree-id698 . -22) (undo-tree-id699 . -22) (undo-tree-id700 . -22) (undo-tree-id701 . -22) (undo-tree-id702 . -22) (undo-tree-id703 . -22) (undo-tree-id704 . -22) (undo-tree-id705 . -22) (undo-tree-id706 . -22) (undo-tree-id707 . -22) (undo-tree-id708 . -22) (undo-tree-id709 . -22) (undo-tree-id710 . -22) (undo-tree-id711 . -22) (undo-tree-id712 . -22) (undo-tree-id713 . -22) (undo-tree-id714 . -22) (undo-tree-id715 . -22) (undo-tree-id716 . -22) (undo-tree-id717 . -22) (undo-tree-id718 . -22) (undo-tree-id719 . -22) (undo-tree-id720 . -22) (undo-tree-id721 . -22) (undo-tree-id722 . -22) (undo-tree-id723 . -22) (undo-tree-id724 . -22) (undo-tree-id725 . -22) (undo-tree-id726 . -22) (undo-tree-id727 . -22) (undo-tree-id728 . -22) (undo-tree-id729 . -22) (undo-tree-id730 . -22) (undo-tree-id731 . -22) (undo-tree-id732 . -22) (undo-tree-id733 . -22) (undo-tree-id734 . -22) (undo-tree-id735 . -22) (undo-tree-id736 . -22) (undo-tree-id737 . -22) (undo-tree-id738 . -22) (undo-tree-id739 . -22) (undo-tree-id740 . -22) (undo-tree-id741 . -22) (undo-tree-id742 . -22) (undo-tree-id743 . -22) (undo-tree-id744 . -22) (undo-tree-id745 . -22) (undo-tree-id746 . -22) (undo-tree-id747 . -22) (undo-tree-id748 . -22) (undo-tree-id749 . -22) (undo-tree-id750 . -22) (undo-tree-id751 . -22) (undo-tree-id752 . -22) (undo-tree-id753 . -22) (undo-tree-id754 . -22) (undo-tree-id755 . -22) (undo-tree-id756 . -22) (undo-tree-id757 . -22) (undo-tree-id758 . -22) (undo-tree-id759 . -22) (undo-tree-id760 . -22) (undo-tree-id761 . -22) (undo-tree-id762 . -22) (undo-tree-id763 . -22) (undo-tree-id764 . -22) (undo-tree-id765 . -22) (undo-tree-id766 . -22) (undo-tree-id767 . -56) 810) nil (26028 8794 850179 172000) 0 nil])
([nil nil ((829 . 830) (apply yas--snippet-revive 792 829 #s(yas--snippet nil (#s(yas--field 1 811 818 nil nil nil t #s(yas--field 2 820 825 nil nil nil t #s(yas--field 3 827 828 nil nil nil t nil))) #s(yas--field 2 820 825 nil nil nil t #s(yas--field 3 827 828 nil nil nil t nil)) #s(yas--field 3 827 828 nil nil nil t nil)) nil 4 nil #s(yas--field 3 827 828 nil nil nil t nil) nil nil)) (#("size_t len" 0 6 (fontified nil face font-lock-type-face) 6 7 (fontified nil) 7 10 (fontified nil face font-lock-variable-name-face)) . 828) (undo-tree-id615 . -10) (undo-tree-id616 . -6) (827 . 828) (821 . 825) (#("da" 0 2 (fontified nil)) . 821) (undo-tree-id617 . -2) (821 . 823) (#("data" 0 4 (fontified nil)) . -821) (undo-tree-id618 . -4) (821 . 825) (#("da" 0 1 (fontified t) 1 2 (fontified t)) . -821) (undo-tree-id619 . -2) (undo-tree-id620 . -2) (undo-tree-id621 . -2) (undo-tree-id622 . -2) 823 (821 . 823) (#("uint8_t *dst" 0 7 (fontified nil face font-lock-type-face) 7 9 (fontified nil) 9 12 (fontified nil face font-lock-variable-name-face)) . 821) (undo-tree-id623 . -12) (820 . 821) (811 . 818) (#("UA" 0 2 (fontified nil)) . 811) (undo-tree-id624 . -2) (811 . 813) (#("UART_ID" 0 7 (fontified nil)) . -811) (undo-tree-id625 . -7) (811 . 818) (#("UA" 0 1 (fontified t) 1 2 (fontified t)) . -811) (undo-tree-id626 . -2) (undo-tree-id627 . -2) (undo-tree-id628 . -2) 813 (812 . 813) (#("uart_inst_t *uart" 0 11 (fontified nil face font-lock-type-face) 11 13 (fontified nil) 13 17 (fontified nil face font-lock-variable-name-face)) . 812) (undo-tree-id629 . -17) (811 . 812) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 811 818 nil nil nil t #s(yas--field 2 820 825 nil nil nil t #s(yas--field 3 827 828 nil nil nil t nil))) #s(yas--field 2 820 825 nil nil nil t #s(yas--field 3 827 828 nil nil nil t nil)) #s(yas--field 3 827 828 nil nil nil t nil)) nil 4 nil #s(yas--field 3 827 828 nil nil nil t nil) nil nil)) (792 . 855) (#("uart_read_blocking(${1:uart_inst_t *uart}, ${2:uint8_t *dst}, ${3:size_t len})" 0 78 (fontified nil)) . 792) (792 . 870) (#("uart_re" 0 7 (fontified nil)) . 792) (792 . 799) (#("uart_read_blocking(uart_inst_t *uart, uint8_t *dst, size_t len)" 0 63 (fontified nil)) . -792) (792 . 855) (#("uart_rea" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t face font-lock-type-face) 3 4 (fontified t face font-lock-type-face) 4 5 (fontified t face font-lock-type-face) 5 6 (fontified t face font-lock-type-face) 6 7 (fontified t face font-lock-type-face) 7 8 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -792) (undo-tree-id630 . -7) (undo-tree-id631 . -8) (undo-tree-id632 . -8) 800 (799 . 800) (795 . 799) (792 . 795) (788 . 792) (#("    " 0 4 (fontified nil)) . 787) (undo-tree-id633 . -4) (undo-tree-id634 . -4) (791 . 792) (787 . 791)) nil (26028 8794 849946 15000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -539) (undo-tree-id932 . -2) (undo-tree-id933 . -2) (undo-tree-id934 . -2) (undo-tree-id935 . -2) (undo-tree-id936 . -2) (undo-tree-id937 . -2) (undo-tree-id938 . -2) (undo-tree-id939 . -2) (undo-tree-id940 . -2) (undo-tree-id941 . -2) (undo-tree-id942 . -2) (undo-tree-id943 . -2) (undo-tree-id944 . -2) (undo-tree-id945 . -2) (undo-tree-id946 . -2) (undo-tree-id947 . -2) (undo-tree-id948 . -2) (undo-tree-id949 . -2) (undo-tree-id950 . -2) (undo-tree-id951 . -2) (undo-tree-id952 . -2) (undo-tree-id953 . -2) (undo-tree-id954 . -2) (undo-tree-id955 . -2) (undo-tree-id956 . -2) (undo-tree-id957 . -2) (undo-tree-id958 . -2) (undo-tree-id959 . -2) (undo-tree-id960 . -2) (undo-tree-id961 . -2) (undo-tree-id962 . -2) (undo-tree-id963 . -2) (undo-tree-id964 . -2) (undo-tree-id965 . -2) (undo-tree-id966 . -2) (undo-tree-id967 . -2) (undo-tree-id968 . -2) (undo-tree-id969 . -2) (undo-tree-id970 . -2) (undo-tree-id971 . -2) (undo-tree-id972 . -2) (undo-tree-id973 . -2) (undo-tree-id974 . -2) (undo-tree-id975 . -2) (undo-tree-id976 . -2) (undo-tree-id977 . -2) (undo-tree-id978 . -2) (undo-tree-id979 . -2) (undo-tree-id980 . -2) (undo-tree-id981 . -2) (undo-tree-id982 . -2) (undo-tree-id983 . -2) (undo-tree-id984 . -2) (undo-tree-id985 . -2) (undo-tree-id986 . -2) (undo-tree-id987 . -2) (undo-tree-id988 . -2) (undo-tree-id989 . -2) (undo-tree-id990 . -2) (undo-tree-id991 . -2) (undo-tree-id992 . -2) (undo-tree-id993 . -2) (undo-tree-id994 . -2) (undo-tree-id995 . -2) (undo-tree-id996 . -2) (undo-tree-id997 . -2) (undo-tree-id998 . -2) (undo-tree-id999 . -2) (undo-tree-id1000 . -2) (undo-tree-id1001 . -2) (undo-tree-id1002 . -2) (undo-tree-id1003 . -2) (undo-tree-id1004 . -2) (undo-tree-id1005 . -2) (undo-tree-id1006 . -2) (undo-tree-id1007 . -2) (undo-tree-id1008 . -2) (undo-tree-id1009 . -2) (undo-tree-id1010 . -2) (undo-tree-id1011 . -2) 541 (539 . 541) (#("  " 0 2 (fontified nil)) . 538) (undo-tree-id1012 . -2) (undo-tree-id1013 . -2) (undo-tree-id1014 . -2) (undo-tree-id1015 . -2) (undo-tree-id1016 . -2) (undo-tree-id1017 . -2) (undo-tree-id1018 . -2) (undo-tree-id1019 . -2) (undo-tree-id1020 . -2) (undo-tree-id1021 . -2) (undo-tree-id1022 . -2) (undo-tree-id1023 . -2) (undo-tree-id1024 . -2) (undo-tree-id1025 . -2) (undo-tree-id1026 . -2) (undo-tree-id1027 . -2) (undo-tree-id1028 . -2) (undo-tree-id1029 . -2) (undo-tree-id1030 . -2) (undo-tree-id1031 . -2) (undo-tree-id1032 . -2) (undo-tree-id1033 . -2) (undo-tree-id1034 . -2) (undo-tree-id1035 . -2) (undo-tree-id1036 . -2) (undo-tree-id1037 . -2) (undo-tree-id1038 . -2) (undo-tree-id1039 . -2) (undo-tree-id1040 . -2) (undo-tree-id1041 . -2) (undo-tree-id1042 . -2) (undo-tree-id1043 . -2) (undo-tree-id1044 . -2) (undo-tree-id1045 . -2) (undo-tree-id1046 . -2) (undo-tree-id1047 . -2) (undo-tree-id1048 . -2) (undo-tree-id1049 . -2) (undo-tree-id1050 . -2) (undo-tree-id1051 . -2) (undo-tree-id1052 . -2) (undo-tree-id1053 . -2) (undo-tree-id1054 . -2) (undo-tree-id1055 . -2) (undo-tree-id1056 . -2) (undo-tree-id1057 . -2) (undo-tree-id1058 . -2) (537 . 541) (t 26028 8794 894936 340000)) nil (26028 8841 133666 570000) 0 nil])
([nil nil ((572 . 573) (apply yas--snippet-revive 540 572 #s(yas--snippet nil (#s(yas--field 1 558 565 nil nil nil t #s(yas--field 2 567 571 nil nil nil t nil)) #s(yas--field 2 567 571 nil nil nil t nil)) nil 5 nil #s(yas--field 2 567 571 nil nil nil t nil) nil nil)) (568 . 571) (#("5" 0 1 (fontified t)) . -568) (undo-tree-id925 . -1) (undo-tree-id926 . -1) 569 (568 . 569) (#("uint baudrate" 0 4 (fontified nil face font-lock-type-face) 4 5 (fontified nil) 5 13 (fontified nil face font-lock-variable-name-face)) . 568) (567 . 568) (558 . 565) (#("U" 0 1 (fontified nil)) . 558) (558 . 559) (#("UART_ID" 0 7 (fontified nil)) . -558) (558 . 565) (#("U" 0 1 (fontified t)) . -558) (undo-tree-id927 . -1) (undo-tree-id928 . -1) 559 (#("uart_inst_t *uart" 0 11 (fontified nil face font-lock-type-face) 11 13 (fontified nil) 13 17 (fontified nil face font-lock-variable-name-face)) . 559) (558 . 559) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 558 565 nil nil nil t #s(yas--field 2 567 571 nil nil nil t nil)) #s(yas--field 2 567 571 nil nil nil t nil)) nil 5 nil #s(yas--field 2 567 571 nil nil nil t nil) nil nil)) (540 . 591) (#("uart_set_baudrate(${1:uart_inst_t *uart}, ${2:uint baudrate})" 0 61 (fontified nil)) . 540) (540 . 601) (#("uart_s" 0 6 (fontified nil)) . 540) (540 . 546) (#("uart_set_baudrate(uart_inst_t *uart, uint baudrate)" 0 51 (fontified nil)) . -540) (540 . 591) (#("uart_set" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t face font-lock-type-face) 3 4 (fontified t face font-lock-type-face) 4 5 (fontified t face font-lock-type-face) 5 6 (fontified t face font-lock-type-face) 6 7 (fontified t face font-lock-type-face) 7 8 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -540) (undo-tree-id929 . -6) (undo-tree-id930 . -8) (undo-tree-id931 . -8) 548 (545 . 548) (540 . 545) (538 . 540)) nil (26028 8841 133198 996000) 0 nil])
([nil nil ((#("  uart_set_translate_crlf(UART_ID, false);
" 0 2 (fontified t) 2 25 (fontified t) 25 26 (fontified t face (rainbow-delimiters-depth-2-face)) 26 33 (fontified t) 33 34 (fontified t) 34 35 (fontified t) 35 40 (fontified t face font-lock-constant-face) 40 41 (fontified t face (rainbow-delimiters-depth-2-face)) 41 42 (fontified t) 42 43 (fontified t)) . 575) (undo-tree-id797 . -42) (undo-tree-id798 . -2) (undo-tree-id799 . -2) (undo-tree-id800 . -34) (undo-tree-id801 . -34) (undo-tree-id802 . -34) (undo-tree-id803 . -34) (undo-tree-id804 . -34) (undo-tree-id805 . -34) (undo-tree-id806 . -34) (undo-tree-id807 . -34) (undo-tree-id808 . -34) (undo-tree-id809 . -34) (undo-tree-id810 . -34) (undo-tree-id811 . -34) (undo-tree-id812 . -34) (undo-tree-id813 . -34) (undo-tree-id814 . -34) (undo-tree-id815 . -34) (undo-tree-id816 . -34) (undo-tree-id817 . -34) (undo-tree-id818 . -34) (undo-tree-id819 . -34) (undo-tree-id820 . -34) (undo-tree-id821 . -34) (undo-tree-id822 . -34) (undo-tree-id823 . -34) (undo-tree-id824 . -34) (undo-tree-id825 . -34) (undo-tree-id826 . -34) (undo-tree-id827 . -34) (undo-tree-id828 . -34) (undo-tree-id829 . -34) (undo-tree-id830 . -34) (undo-tree-id831 . -34) (undo-tree-id832 . -34) (undo-tree-id833 . -34) (undo-tree-id834 . -34) (undo-tree-id835 . -34) (undo-tree-id836 . -34) (undo-tree-id837 . -34) (undo-tree-id838 . -34) (undo-tree-id839 . -34) (undo-tree-id840 . -34) (undo-tree-id841 . -34) (undo-tree-id842 . -20) (undo-tree-id843 . -20) (undo-tree-id844 . -20) (undo-tree-id845 . -20) (undo-tree-id846 . -20) (undo-tree-id847 . -20) (undo-tree-id848 . -20) (undo-tree-id849 . -20) (undo-tree-id850 . -20) (undo-tree-id851 . -20) (undo-tree-id852 . -20) (undo-tree-id853 . -20) (undo-tree-id854 . -20) (undo-tree-id855 . -20) (undo-tree-id856 . -20) (undo-tree-id857 . -20) (undo-tree-id858 . -20) (undo-tree-id859 . -20) (undo-tree-id860 . -20) (undo-tree-id861 . -20) (undo-tree-id862 . -20) (undo-tree-id863 . -20) (undo-tree-id864 . -2) (undo-tree-id865 . -25) (undo-tree-id866 . -20) (undo-tree-id867 . -20) (undo-tree-id868 . -20) (undo-tree-id869 . -20) (undo-tree-id870 . -20) (undo-tree-id871 . -20) (undo-tree-id872 . -20) (undo-tree-id873 . -20) (undo-tree-id874 . -20) (undo-tree-id875 . -20) (undo-tree-id876 . -20) (undo-tree-id877 . -20) (undo-tree-id878 . -6) (undo-tree-id879 . -6) (undo-tree-id880 . -6) (undo-tree-id881 . -6) (undo-tree-id882 . -6) (undo-tree-id883 . -6) (undo-tree-id884 . -6) (undo-tree-id885 . -6) (undo-tree-id886 . -6) (undo-tree-id887 . -6) (undo-tree-id888 . -6) (undo-tree-id889 . -6) (undo-tree-id890 . -2) (undo-tree-id891 . -2) (undo-tree-id892 . -2) (undo-tree-id893 . -2) (undo-tree-id894 . -2) (undo-tree-id895 . -2) (undo-tree-id896 . -2) (undo-tree-id897 . -2) (undo-tree-id898 . -2) (undo-tree-id899 . -2) (undo-tree-id900 . -2) (undo-tree-id901 . -2) (undo-tree-id902 . -2) (undo-tree-id903 . -2) (undo-tree-id904 . -2) (undo-tree-id905 . -2) (undo-tree-id906 . -2) (undo-tree-id907 . -2) (undo-tree-id908 . -2) (undo-tree-id909 . -2) (undo-tree-id910 . -2) (undo-tree-id911 . -2) (undo-tree-id912 . -2) (undo-tree-id913 . -2) (undo-tree-id914 . -2) (undo-tree-id915 . -2) (undo-tree-id916 . -2) (undo-tree-id917 . -2) (undo-tree-id918 . -2) (undo-tree-id919 . -2) (undo-tree-id920 . -2) (undo-tree-id921 . -2) (undo-tree-id922 . -2) (undo-tree-id923 . -2) (undo-tree-id924 . -43) 577) nil (26028 8841 133158 268000) 0 nil])
([nil nil ((#("1" 0 1 (c-in-sws t fontified t)) . -282) (undo-tree-id1060 . -1) 283 (t 26028 8841 179345 119000)) nil (26028 36177 261276 450000) 0 nil])
([nil nil ((282 . 283)) nil (26028 36177 261270 134000) 0 nil])
([nil nil ((#("4" 0 1 (c-in-sws t fontified t)) . 348)) nil (26028 36177 261267 665000) 0 nil])
([nil nil ((#("5" 0 1 (c-in-sws t fontified t)) . 369)) nil (26028 36177 261265 691000) 0 nil])
([nil nil ((348 . 349)) nil (26028 36177 261263 854000) 0 nil])
([nil nil ((370 . 371)) nil (26028 36177 261261 927000) 0 nil])
([nil nil ((#("/" 0 1 (c-in-sws t c-is-sws t fontified t face font-lock-comment-delimiter-face)) . 659)) nil (26028 36177 261259 167000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . 659)) nil (26028 36177 261257 52000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 659)) nil (26028 36177 261254 930000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 659)) nil (26028 36177 261252 430000) 0 nil])
([nil nil ((nil rear-nonsticky nil 717 . 718) (#("
" 0 1 (fontified nil)) . -774) (715 . 775) 659) nil (26028 36177 261248 970000) 0 nil])
([nil nil ((#("TX" 0 2 (fontified t)) . 749) (undo-tree-id1059 . -1)) nil (26028 36177 261241 675000) 0 nil])
([nil nil ((750 . 751) (749 . 750)) nil (26028 36326 181885 391000) 0 nil])
([nil nil ((885 . 889) (885 . 887)) nil (26028 36345 657329 304000) 0 nil] [nil nil ((#("    uart_read_blocking(UART_ID, &data, 1);
" 0 4 (fontified t) 4 22 (fontified t) 22 23 (fontified t face (rainbow-delimiters-depth-3-face)) 23 25 (fontified t) 25 30 (fontified t) 30 31 (fontified t) 31 32 (fontified t) 32 33 (fontified t) 33 37 (fontified t) 37 38 (fontified t) 38 39 (fontified t) 39 40 (fontified t) 40 41 (fontified t face (rainbow-delimiters-depth-3-face)) 41 42 (fontified t) 42 43 (fontified t)) . 837) (undo-tree-id1164 . -42) (undo-tree-id1165 . -43) (undo-tree-id1166 . -43) (undo-tree-id1167 . -43) (undo-tree-id1168 . -43) (undo-tree-id1169 . -33) (undo-tree-id1170 . -33) (undo-tree-id1172 . -37) (undo-tree-id1174 . -33) (undo-tree-id1176 . -33) (undo-tree-id1178 . -33) (undo-tree-id1180 . -33) (undo-tree-id1182 . -33) (undo-tree-id1184 . -33) (undo-tree-id1186 . -33) (undo-tree-id1188 . -33) (undo-tree-id1190 . -33) (undo-tree-id1192 . -33) (undo-tree-id1194 . -33) (undo-tree-id1196 . -33) 870 (t 26028 36177 281681 689000)) ((837 . 880)) (26028 36325 708337 785000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t c-is-sws t c-in-sws t face font-lock-comment-delimiter-face)) . 889) (undo-tree-id1706 . -1) (undo-tree-id1707 . -1) (t 26028 36332 215033 808000)) nil (26028 36782 639700 799000) 0 nil] [nil nil ((892 . 896) (#("   " 0 1 (fontified nil face font-lock-comment-delimiter-face c-is-sws t) 1 3 (fontified nil face font-lock-comment-delimiter-face)) . 892) (undo-tree-id1634 . 3) (undo-tree-id1635 . 3) (891 . 892) (#(" " 0 1 (fontified t c-in-sws t face font-lock-comment-delimiter-face)) . 891) (undo-tree-id1636 . 1) (undo-tree-id1637 . 1) (undo-tree-id1638 . -1) (undo-tree-id1639 . -1) (undo-tree-id1640 . -1) (t 26028 36332 215033 808000)) ((891 . 892) (#("
" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . 891) (undo-tree-id1641 . -1) (undo-tree-id1642 . -1) (undo-tree-id1643 . -1) (undo-tree-id1644 . -1) (undo-tree-id1645 . -1) (892 . 895) (#("    " 0 1 (fontified t c-is-sws t c-in-sws t) 1 4 (fontified t c-is-sws t c-in-sws t)) . 892) (undo-tree-id1646 . -4) (undo-tree-id1647 . -3) (undo-tree-id1648 . -4) (undo-tree-id1649 . -3)) (26028 36345 651657 6000) 0 nil])
([nil nil ((855 . 857) (846 . 855) (#("-" 0 1 (fontified t)) . -846) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) (#(" " 0 1 (fontified t)) . -847) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) 848 (841 . 848) (837 . 841) (#("   " 0 3 (fontified nil)) . -837) (undo-tree-id1161 . 3) (undo-tree-id1162 . -3) (undo-tree-id1163 . -3) (#(" " 0 1 (fontified t)) . 840)) ((837 . 841) (#("    " 0 4 (fontified nil)) . 837) (undo-tree-id1561 . -4) (undo-tree-id1562 . -4) (undo-tree-id1563 . -4) (undo-tree-id1564 . -4) (undo-tree-id1565 . -4) (undo-tree-id1566 . -4) (undo-tree-id1567 . -4) (undo-tree-id1568 . -4) (undo-tree-id1569 . -4) (undo-tree-id1570 . -4) (undo-tree-id1571 . -4) (undo-tree-id1572 . -4) (undo-tree-id1573 . -4) (undo-tree-id1574 . -4) (undo-tree-id1575 . -4) (undo-tree-id1576 . -4) (undo-tree-id1577 . -4) (undo-tree-id1578 . -4) (undo-tree-id1579 . -4) (#("data - " 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil) 6 7 (fontified nil)) . 841) (undo-tree-id1580 . -5) (undo-tree-id1581 . -5) (undo-tree-id1582 . -5) (undo-tree-id1583 . -5) (undo-tree-id1584 . -7) (undo-tree-id1585 . -7) (undo-tree-id1586 . -5) (undo-tree-id1587 . -5) (undo-tree-id1588 . -5) (undo-tree-id1589 . -5) (undo-tree-id1590 . -5) (undo-tree-id1591 . -5) (undo-tree-id1592 . -5) (undo-tree-id1593 . -5) (undo-tree-id1594 . -5) (undo-tree-id1595 . -5) (undo-tree-id1596 . -5) (undo-tree-id1597 . -5) (undo-tree-id1598 . -5) (846 . 848) (#("= getchar" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil) 6 7 (fontified nil) 7 8 (fontified nil) 8 9 (fontified nil)) . 846) (undo-tree-id1599 . -9) (undo-tree-id1600 . -9) (undo-tree-id1601 . -2) (undo-tree-id1602 . -9) (undo-tree-id1603 . -9) (undo-tree-id1604 . -9) (undo-tree-id1605 . -9) (undo-tree-id1606 . -9) (undo-tree-id1607 . -9) (undo-tree-id1608 . -9) (undo-tree-id1609 . -9) (undo-tree-id1610 . -9) (undo-tree-id1611 . -9) (undo-tree-id1612 . -9) (undo-tree-id1613 . -9) (undo-tree-id1614 . -9) (undo-tree-id1615 . -9) (undo-tree-id1616 . -9) (undo-tree-id1617 . -9) (#("()" 0 1 (fontified t face (rainbow-delimiters-depth-3-face)) 1 2 (fontified t face (rainbow-delimiters-depth-3-face))) . 855) (undo-tree-id1618 . -1) (undo-tree-id1619 . -1) (undo-tree-id1620 . -1) (undo-tree-id1621 . -2) (undo-tree-id1622 . -1) (undo-tree-id1623 . -1) (undo-tree-id1624 . -1) (undo-tree-id1625 . -1) (undo-tree-id1626 . -1) (undo-tree-id1627 . -1) (undo-tree-id1628 . -1) (undo-tree-id1629 . -1) (undo-tree-id1630 . -1) (undo-tree-id1631 . -1) (undo-tree-id1632 . -1) (undo-tree-id1633 . -1)) (26028 36325 440360 325000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . 889) (undo-tree-id1666 . -1) (undo-tree-id1667 . -1) (undo-tree-id1668 . -1) (undo-tree-id1669 . -1) (undo-tree-id1670 . -1) (undo-tree-id1671 . -1) (undo-tree-id1672 . -1) (undo-tree-id1673 . -1) (undo-tree-id1674 . -1) (undo-tree-id1675 . -1) (undo-tree-id1676 . -1) (undo-tree-id1677 . -1) (undo-tree-id1678 . -1) (undo-tree-id1679 . -1) (undo-tree-id1680 . -1) (undo-tree-id1681 . -1) (undo-tree-id1682 . -1) (undo-tree-id1683 . -1) (undo-tree-id1684 . -1) (undo-tree-id1685 . -1) (undo-tree-id1686 . -1) (undo-tree-id1687 . -1) (undo-tree-id1688 . -1) (undo-tree-id1689 . -1) (undo-tree-id1690 . -1) (undo-tree-id1691 . -1) (undo-tree-id1692 . -1) (undo-tree-id1693 . -1) (undo-tree-id1694 . -1) (undo-tree-id1695 . -1) (undo-tree-id1696 . -1) (undo-tree-id1697 . -1) (undo-tree-id1698 . -1) (undo-tree-id1699 . -1) (undo-tree-id1700 . -1) (undo-tree-id1701 . -1) (undo-tree-id1702 . -1) (undo-tree-id1703 . -1) (undo-tree-id1704 . -1) (undo-tree-id1705 . -1)) nil (26028 36782 639691 284000) 0 nil])
nil
([nil nil ((857 . 858)) ((#(";" 0 1 (fontified t)) . 857) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) (undo-tree-id1391 . -1) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) (undo-tree-id1398 . -1) (undo-tree-id1399 . -1) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1) (undo-tree-id1423 . -1) (undo-tree-id1424 . -1) (undo-tree-id1425 . -1) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) (undo-tree-id1431 . -1) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (undo-tree-id1478 . -1) (undo-tree-id1479 . -1) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (undo-tree-id1483 . -1) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) (undo-tree-id1487 . -1) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1) (undo-tree-id1493 . -1) (undo-tree-id1494 . -1) (undo-tree-id1495 . -1) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (undo-tree-id1498 . -1) (undo-tree-id1499 . -1) (undo-tree-id1500 . -1) (undo-tree-id1501 . -1) (undo-tree-id1502 . -1) (undo-tree-id1503 . -1) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (undo-tree-id1506 . -1) (undo-tree-id1507 . -1) (undo-tree-id1508 . -1) (undo-tree-id1509 . -1) (undo-tree-id1510 . -1) (undo-tree-id1511 . -1) (undo-tree-id1512 . -1) (undo-tree-id1513 . -1) (undo-tree-id1514 . -1) (undo-tree-id1515 . -1) (undo-tree-id1516 . -1) (undo-tree-id1517 . -1) (undo-tree-id1518 . -1) (undo-tree-id1519 . -1) (undo-tree-id1520 . -1) (undo-tree-id1521 . -1) (undo-tree-id1522 . -1) (undo-tree-id1523 . -1) (undo-tree-id1524 . -1) (undo-tree-id1525 . -1) (undo-tree-id1526 . -1) (undo-tree-id1527 . -1) (undo-tree-id1528 . -1) (undo-tree-id1529 . -1) (undo-tree-id1530 . -1) (undo-tree-id1531 . -1) (undo-tree-id1532 . -1) (undo-tree-id1533 . -1) (undo-tree-id1534 . -1) (undo-tree-id1535 . -1) (undo-tree-id1536 . -1) (undo-tree-id1537 . -1) (undo-tree-id1538 . -1) (undo-tree-id1539 . -1) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1) (undo-tree-id1542 . -1) (undo-tree-id1543 . -1) (undo-tree-id1544 . -1) (undo-tree-id1545 . -1) (undo-tree-id1546 . -1) (undo-tree-id1547 . -1) (undo-tree-id1548 . -1) (undo-tree-id1549 . -1) (undo-tree-id1550 . -1) (undo-tree-id1551 . -1) (undo-tree-id1552 . -1) (undo-tree-id1553 . -1) (undo-tree-id1554 . -1) (undo-tree-id1555 . -1) (undo-tree-id1556 . -1) (undo-tree-id1557 . -1) (undo-tree-id1558 . -1) (undo-tree-id1559 . -1) (undo-tree-id1560 . -1)) (26028 36325 285160 553000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 889) (undo-tree-id1662 . 1) (undo-tree-id1663 . 1) (undo-tree-id1664 . -1) (undo-tree-id1665 . -1)) nil (26028 36782 639624 64000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -860) (undo-tree-id1061 . -4) (undo-tree-id1062 . -4) (undo-tree-id1064 . -4) (undo-tree-id1066 . -4) (undo-tree-id1068 . -4) (undo-tree-id1070 . -4) (undo-tree-id1072 . -4) (undo-tree-id1074 . -4) (undo-tree-id1076 . -4) (undo-tree-id1078 . -4) (undo-tree-id1080 . -4) (undo-tree-id1082 . -4) (undo-tree-id1084 . -4) (undo-tree-id1086 . -4) (undo-tree-id1088 . -4) (undo-tree-id1090 . -4) (undo-tree-id1092 . -4) (undo-tree-id1094 . -4) (undo-tree-id1096 . -4) (undo-tree-id1098 . -4) (undo-tree-id1100 . -4) (undo-tree-id1102 . -4) (undo-tree-id1104 . -4) (undo-tree-id1106 . -4) (undo-tree-id1108 . -4) 864 (860 . 864) (#("    " 0 4 (fontified nil)) . 859) (undo-tree-id1109 . -4) (undo-tree-id1110 . -4) (undo-tree-id1112 . -4) (undo-tree-id1114 . -4) (undo-tree-id1116 . -4) (undo-tree-id1118 . -4) (undo-tree-id1120 . -4) (undo-tree-id1122 . -4) (undo-tree-id1124 . -4) (undo-tree-id1126 . -4) (undo-tree-id1128 . -4) (undo-tree-id1130 . -4) (undo-tree-id1132 . -4) (undo-tree-id1134 . -4) (undo-tree-id1136 . -4) (undo-tree-id1138 . -4) (undo-tree-id1140 . -4) (undo-tree-id1142 . -4) (undo-tree-id1144 . -4) (undo-tree-id1146 . -4) (undo-tree-id1148 . -4) (undo-tree-id1150 . -4) (undo-tree-id1152 . -4) (undo-tree-id1154 . -4) (undo-tree-id1156 . -4) (858 . 864)) ((#("
    
" 0 1 (fontified t) 1 5 (fontified nil) 5 6 (fontified nil)) . 858) (undo-tree-id1198 . -6) (undo-tree-id1199 . -6) (undo-tree-id1200 . -6) (undo-tree-id1201 . -6) (undo-tree-id1202 . -6) (undo-tree-id1203 . -6) (undo-tree-id1204 . -6) (undo-tree-id1205 . -6) (undo-tree-id1206 . -6) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (undo-tree-id1226 . -6) (undo-tree-id1227 . -6) (undo-tree-id1228 . -6) (undo-tree-id1229 . -6) (undo-tree-id1230 . -6) (undo-tree-id1231 . -6) (undo-tree-id1232 . -6) (undo-tree-id1233 . -6) (undo-tree-id1234 . -6) (undo-tree-id1235 . -6) (undo-tree-id1236 . -6) (undo-tree-id1237 . -6) (undo-tree-id1238 . -6) (undo-tree-id1239 . -6) (undo-tree-id1240 . -6) (undo-tree-id1241 . -6) (undo-tree-id1242 . -6) (undo-tree-id1243 . -6) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (undo-tree-id1263 . -6) (undo-tree-id1264 . -6) (undo-tree-id1265 . -6) (undo-tree-id1266 . -6) (undo-tree-id1267 . -6) (undo-tree-id1268 . -6) (undo-tree-id1269 . -6) (undo-tree-id1270 . -6) (undo-tree-id1271 . -6) (undo-tree-id1272 . -6) (undo-tree-id1273 . -6) (undo-tree-id1274 . -6) (undo-tree-id1275 . -6) (undo-tree-id1276 . -6) (undo-tree-id1277 . -6) (undo-tree-id1278 . -6) (undo-tree-id1279 . -6) (undo-tree-id1280 . -6) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (undo-tree-id1300 . -6) (undo-tree-id1301 . -6) (undo-tree-id1302 . -6) (undo-tree-id1303 . -6) (undo-tree-id1304 . -6) (undo-tree-id1305 . -6) (undo-tree-id1306 . -6) (undo-tree-id1307 . -6) (undo-tree-id1308 . -6) (undo-tree-id1309 . -6) (undo-tree-id1310 . -6) (undo-tree-id1311 . -6) (undo-tree-id1312 . -6) (undo-tree-id1313 . -6) (undo-tree-id1314 . -6) (undo-tree-id1315 . -6) (undo-tree-id1316 . -6) (undo-tree-id1317 . -6) (undo-tree-id1318 . -6) (undo-tree-id1319 . -6) (undo-tree-id1320 . -6) (undo-tree-id1321 . -6) (undo-tree-id1322 . -6) (undo-tree-id1323 . -6) (undo-tree-id1324 . -6) (undo-tree-id1325 . -6) (undo-tree-id1326 . -6) (undo-tree-id1327 . -6) (undo-tree-id1328 . -6) (undo-tree-id1329 . -6) (undo-tree-id1330 . -6) (undo-tree-id1331 . -6) (undo-tree-id1332 . -6) (undo-tree-id1333 . -6) (undo-tree-id1334 . -6) (undo-tree-id1335 . -6) (undo-tree-id1336 . -6) (undo-tree-id1337 . -6) (undo-tree-id1338 . -6) (undo-tree-id1339 . -6) (undo-tree-id1340 . -6) (undo-tree-id1341 . -6) (undo-tree-id1342 . -6) (undo-tree-id1343 . -6) (undo-tree-id1344 . -6) (undo-tree-id1345 . -6) (undo-tree-id1346 . -6) (undo-tree-id1347 . -6) (undo-tree-id1348 . -6) (undo-tree-id1349 . -6) (undo-tree-id1350 . -6) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (undo-tree-id1369 . -6) (undo-tree-id1370 . -6) (undo-tree-id1371 . -6) (undo-tree-id1372 . -6) (undo-tree-id1373 . -6) (undo-tree-id1374 . -6) (undo-tree-id1375 . -6) (undo-tree-id1376 . -6) (undo-tree-id1377 . -6) (undo-tree-id1378 . -6) (undo-tree-id1379 . -6) (859 . 863) (#("    " 0 4 (fontified nil)) . 860) (860 . 864) (t 26028 36293 838699 114000)) (26028 36293 796275 943000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 889) (undo-tree-id1658 . 1) (undo-tree-id1659 . 1) (undo-tree-id1660 . -1) (undo-tree-id1661 . -1)) nil (26028 36782 639614 565000) 0 nil])
nil
([nil nil ((#(" " 0 1 (fontified t)) . 889) (undo-tree-id1654 . 1) (undo-tree-id1655 . 1) (undo-tree-id1656 . -1) (undo-tree-id1657 . -1)) nil (26028 36782 639603 26000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 889) (undo-tree-id1650 . 1) (undo-tree-id1651 . 1) (undo-tree-id1652 . -1) (undo-tree-id1653 . -1)) nil (26028 36782 639586 494000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . 832) (undo-tree-id1709 . -1) (t 26028 36782 658955 286000)) nil (26028 37063 785324 712000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . 959) (undo-tree-id1708 . -1)) nil (26028 37063 785312 330000) 0 nil])
([nil nil ((#("      
" 0 6 (fontified t) 6 7 (fontified t)) . 962) (undo-tree-id1710 . -6) (undo-tree-id1711 . -5) (undo-tree-id1712 . -5) (undo-tree-id1713 . -5) (undo-tree-id1714 . -5) (undo-tree-id1715 . -5) (undo-tree-id1716 . -5) (undo-tree-id1717 . -5) (undo-tree-id1718 . -5) (undo-tree-id1719 . -5) (undo-tree-id1720 . -5) (undo-tree-id1721 . -5) (undo-tree-id1722 . -5) (undo-tree-id1723 . -5) (undo-tree-id1724 . -5) (undo-tree-id1725 . -5) (undo-tree-id1726 . -5) (undo-tree-id1727 . -5) (undo-tree-id1728 . -5) (undo-tree-id1729 . -5) (undo-tree-id1730 . -5) (undo-tree-id1731 . -5) (undo-tree-id1732 . -5) (undo-tree-id1733 . -5) (undo-tree-id1734 . -5) (undo-tree-id1735 . -5) (undo-tree-id1736 . -7) 967 (t 26028 37063 845399 221000)) nil (26028 37070 301128 285000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -659) (undo-tree-id1740 . -1) (undo-tree-id1741 . -1) (#("/" 0 1 (fontified t face font-lock-comment-delimiter-face c-in-sws t)) . -660) (undo-tree-id1742 . -1) (undo-tree-id1743 . -1) 661 (659 . 661) (t 26028 37070 321455 487000)) nil (26028 37523 162309 486000) 0 nil])
([nil nil ((348 . 349) (#("0" 0 1 (fontified t c-in-sws t)) . -348) (undo-tree-id1739 . -1) 349) nil (26028 37523 162299 888000) 0 nil])
([nil nil ((370 . 371) (#("1" 0 1 (fontified t c-in-sws t)) . -370) (undo-tree-id1738 . -1) 371) nil (26028 37523 162293 431000) 0 nil])
([nil nil ((282 . 283) (#("0" 0 1 (fontified t c-in-sws t)) . -282) (undo-tree-id1737 . -1) 283) nil (26028 37523 162281 540000) 0 nil])
([nil nil ((832 . 833) (t 26028 37523 181388 515000)) nil (26028 37551 999804 99000) 0 nil])
([nil nil ((960 . 961)) nil (26028 37551 999800 870000) 0 nil])
([nil nil ((960 . 961) (#("-" 0 1 (fontified t)) . -960) (undo-tree-id1744 . -1) (undo-tree-id1745 . -1) (undo-tree-id1746 . -1) (undo-tree-id1747 . -1) (undo-tree-id1748 . -1) (undo-tree-id1749 . -1) (undo-tree-id1750 . -1) (undo-tree-id1751 . -1) (undo-tree-id1752 . -1) (undo-tree-id1753 . -1) (undo-tree-id1754 . -1) (undo-tree-id1755 . -1) (undo-tree-id1756 . -1) (undo-tree-id1757 . -1) (undo-tree-id1758 . -1) (undo-tree-id1759 . -1) (undo-tree-id1760 . -1) (undo-tree-id1761 . -1) (undo-tree-id1762 . -1) (undo-tree-id1763 . -1) (undo-tree-id1764 . -1) (undo-tree-id1765 . -1) (undo-tree-id1766 . -1) (undo-tree-id1767 . -1) (undo-tree-id1768 . -1) (undo-tree-id1769 . -1) (undo-tree-id1770 . -1) (undo-tree-id1771 . -1) (undo-tree-id1772 . -1) (undo-tree-id1773 . -1) (undo-tree-id1774 . -1) (undo-tree-id1775 . -1) (undo-tree-id1776 . -1) (undo-tree-id1777 . -1) (undo-tree-id1778 . -1) (undo-tree-id1779 . -1) (undo-tree-id1780 . -1) (undo-tree-id1781 . -1) (undo-tree-id1782 . -1) (undo-tree-id1783 . -1) (undo-tree-id1784 . -1) (undo-tree-id1785 . -1) (undo-tree-id1786 . -1) (undo-tree-id1787 . -1) (undo-tree-id1788 . -1) (undo-tree-id1789 . -1) (undo-tree-id1790 . -1) (undo-tree-id1791 . -1) (undo-tree-id1792 . -1) (undo-tree-id1793 . -1) (undo-tree-id1794 . -1) (undo-tree-id1795 . -1) (undo-tree-id1796 . -1) (undo-tree-id1797 . -1) (undo-tree-id1798 . -1) (undo-tree-id1799 . -1) (undo-tree-id1800 . -1) (undo-tree-id1801 . -1) 961) nil (26028 37915 470296 46000) 0 nil])
([nil nil ((348 . 349) (#("6" 0 1 (c-in-sws t fontified t)) . -348) (undo-tree-id1805 . -1) (undo-tree-id1806 . -1) (undo-tree-id1807 . -1) (undo-tree-id1808 . -1) (undo-tree-id1809 . -1) (undo-tree-id1810 . -1) (undo-tree-id1811 . -1) (undo-tree-id1812 . -1) (undo-tree-id1813 . -1) (undo-tree-id1814 . -1) (undo-tree-id1815 . -1) (undo-tree-id1816 . -1) (undo-tree-id1817 . -1) 349 (t 26028 37552 21638 915000)) nil (26028 37921 173064 604000) 0 nil] [nil nil ((#("1" 0 1 (fontified t c-in-sws t)) . -282) (undo-tree-id1802 . -1) (undo-tree-id1803 . -1) 283 (t 26028 37552 21638 915000)) ((282 . 283)) (26028 37915 467420 518000) 0 nil])
([nil nil ((370 . 371) (#("7" 0 1 (c-in-sws t fontified t)) . -370) (undo-tree-id1804 . -1) 371) nil (26028 37921 173030 561000) 0 nil])
nil
([nil nil ((276 . 279) (275 . 276) (271 . 275) (271 . 272) (nil syntax-table nil 271 . 272) (nil syntax-table (1) 270 . 271) (270 . 271) (#("\"" 0 1 (fontified nil)) . -270) (nil syntax-table nil 271 . 272) (nil syntax-table (1) 270 . 271) (266 . 271) (262 . 266) (261 . 262) (260 . 261) (t 26028 37921 220843 957000)) nil (26028 45120 848743 255000) 0 nil])
([nil nil ((#("#include \"pico/mul\"
" 0 1 (fontified t c-is-sws t c-in-sws t face font-lock-preprocessor-face) 1 2 (fontified t c-in-sws t face font-lock-preprocessor-face) 2 3 (fontified t c-in-sws t face font-lock-preprocessor-face) 3 4 (fontified t c-in-sws t face font-lock-preprocessor-face) 4 5 (fontified t c-in-sws t face font-lock-preprocessor-face) 5 6 (fontified t c-in-sws t face font-lock-preprocessor-face) 6 7 (fontified t c-in-sws t face font-lock-preprocessor-face) 7 8 (fontified t c-in-sws t face font-lock-preprocessor-face) 8 9 (fontified t c-in-sws t) 9 10 (fontified t c-in-sws t face font-lock-string-face) 10 11 (fontified t c-in-sws t face font-lock-string-face) 11 12 (fontified t c-in-sws t face font-lock-string-face) 12 13 (fontified t c-in-sws t face font-lock-string-face) 13 14 (fontified t c-in-sws t face font-lock-string-face) 14 15 (fontified t c-in-sws t face font-lock-string-face) 15 16 (fontified t c-in-sws t face font-lock-string-face) 16 17 (fontified t c-in-sws t face font-lock-string-face) 17 18 (fontified t c-in-sws t face font-lock-string-face) 18 19 (fontified t c-in-sws t face font-lock-string-face) 19 20 (fontified t c-in-sws t)) . 261) (undo-tree-id1818 . -16) (undo-tree-id1819 . 2) (undo-tree-id1820 . -19) (undo-tree-id1821 . -17) (undo-tree-id1822 . -17) (undo-tree-id1823 . 2) (undo-tree-id1824 . -18) (undo-tree-id1825 . -18) (undo-tree-id1826 . -18) (undo-tree-id1827 . -18) (undo-tree-id1828 . -18) (undo-tree-id1829 . -18) (undo-tree-id1830 . -18) (undo-tree-id1831 . -18) (undo-tree-id1832 . -18) (undo-tree-id1833 . -18) (undo-tree-id1834 . -18) (undo-tree-id1835 . -18) (undo-tree-id1836 . -18) (undo-tree-id1837 . -18) (undo-tree-id1838 . -18) (undo-tree-id1839 . -18) (undo-tree-id1840 . -18) (undo-tree-id1841 . -18) (undo-tree-id1842 . -18) (undo-tree-id1843 . -18) (undo-tree-id1844 . -18) (undo-tree-id1845 . -18) (undo-tree-id1846 . -18) (undo-tree-id1847 . -18) (undo-tree-id1848 . -18) (undo-tree-id1849 . -18) (undo-tree-id1850 . -18) (undo-tree-id1851 . -18) (undo-tree-id1852 . -18) (undo-tree-id1853 . -18) (undo-tree-id1854 . -18) (undo-tree-id1855 . -18) (undo-tree-id1856 . -18) (undo-tree-id1857 . -18) (undo-tree-id1858 . -18) (undo-tree-id1859 . -18) (undo-tree-id1860 . -18) (undo-tree-id1861 . -18) (undo-tree-id1862 . -18) (undo-tree-id1863 . -18) (undo-tree-id1864 . -18) (undo-tree-id1865 . -18) (undo-tree-id1866 . -18) (undo-tree-id1867 . -18) (undo-tree-id1868 . -18) (undo-tree-id1869 . -18) (undo-tree-id1870 . -18) (undo-tree-id1871 . -18) (undo-tree-id1872 . -18) (undo-tree-id1873 . -18) (undo-tree-id1874 . -18) (undo-tree-id1875 . -18) (undo-tree-id1876 . -18) (undo-tree-id1877 . -18) (undo-tree-id1878 . -18) (undo-tree-id1879 . -18) (undo-tree-id1880 . -18) (undo-tree-id1881 . -18) (undo-tree-id1882 . -18) (undo-tree-id1883 . -18) (undo-tree-id1884 . -18) (undo-tree-id1885 . -18) (undo-tree-id1886 . -18) (undo-tree-id1887 . -18) (undo-tree-id1888 . -18) (undo-tree-id1889 . -18) (undo-tree-id1890 . -18) (undo-tree-id1891 . -18) (undo-tree-id1892 . -18) (undo-tree-id1893 . -18) (undo-tree-id1894 . -18) (undo-tree-id1895 . -18) (undo-tree-id1896 . -18) (undo-tree-id1897 . -18) (undo-tree-id1898 . -18) (undo-tree-id1899 . -18) (undo-tree-id1900 . -18) (undo-tree-id1901 . -18) (undo-tree-id1902 . -18) (undo-tree-id1903 . -18) (undo-tree-id1904 . -18) (undo-tree-id1905 . -18) (undo-tree-id1906 . -18) (undo-tree-id1907 . -18) (undo-tree-id1908 . -18) (undo-tree-id1909 . -18) (undo-tree-id1910 . -18) (undo-tree-id1911 . -18) (undo-tree-id1912 . -18) (undo-tree-id1913 . -18) (undo-tree-id1914 . -18) (undo-tree-id1915 . -18) (undo-tree-id1916 . -18) (undo-tree-id1917 . -18) (undo-tree-id1918 . -18) (undo-tree-id1919 . -18) (undo-tree-id1920 . -18) (undo-tree-id1921 . -18) (undo-tree-id1922 . -18) (undo-tree-id1923 . -17) (undo-tree-id1924 . -17) (undo-tree-id1925 . -17) (undo-tree-id1926 . -17) (undo-tree-id1927 . -17) (undo-tree-id1928 . -17) (undo-tree-id1929 . -17) (undo-tree-id1930 . -17) (undo-tree-id1931 . -17) (undo-tree-id1932 . -17) (undo-tree-id1933 . -17) (undo-tree-id1934 . -17) (undo-tree-id1935 . -17) (undo-tree-id1936 . -17) (undo-tree-id1937 . -17) (undo-tree-id1938 . -17) (undo-tree-id1939 . -17) (undo-tree-id1940 . -17) (undo-tree-id1941 . -17) (undo-tree-id1942 . -17) (undo-tree-id1943 . -17) (undo-tree-id1944 . -17) (undo-tree-id1945 . -17) (undo-tree-id1946 . -20) 278) nil (26028 45120 848718 389000) 0 nil])
([nil nil ((#("#include \"pico/stdio.h\"
" 0 1 (fontified t face font-lock-preprocessor-face c-is-sws t c-in-sws t) 1 8 (fontified t face font-lock-preprocessor-face c-in-sws t) 8 9 (fontified t c-in-sws t) 9 23 (fontified t face font-lock-string-face c-in-sws t) 23 24 (fontified t c-in-sws t)) . 132) (undo-tree-id1947 . -23) (t 26028 45120 894085 400000)) nil (26028 45128 284818 659000) 0 nil])
([nil nil ((#("#include <stdbool.h>
" 0 1 (fontified t face font-lock-preprocessor-face c-is-sws t c-in-sws t) 1 8 (fontified t face font-lock-preprocessor-face c-in-sws t) 8 9 (fontified t c-in-sws t) 9 10 (fontified t face (rainbow-delimiters-depth-1-face font-lock-string-face) category c-<-as-paren-syntax c-in-sws t) 10 19 (fontified t face font-lock-string-face c-in-sws t) 19 20 (fontified t face (rainbow-delimiters-depth-1-face font-lock-string-face) category c->-as-paren-syntax c-in-sws t) 20 21 (fontified t c-in-sws t)) . 1) (undo-tree-id1948 . -20) (undo-tree-id1949 . -21) (undo-tree-id1950 . -21) (undo-tree-id1951 . -21) (undo-tree-id1952 . -21) (undo-tree-id1953 . -21) (undo-tree-id1954 . -21) (undo-tree-id1955 . -21) (undo-tree-id1956 . -21) (undo-tree-id1957 . -21) (undo-tree-id1958 . -21) (undo-tree-id1959 . -21) (undo-tree-id1960 . -21) (undo-tree-id1961 . -21) (undo-tree-id1962 . -21) (undo-tree-id1963 . -21) (undo-tree-id1964 . -21) (undo-tree-id1965 . -21) (undo-tree-id1966 . -21) (undo-tree-id1967 . -21) (undo-tree-id1968 . -21) (undo-tree-id1969 . -21) (undo-tree-id1970 . -21) (undo-tree-id1971 . -21) (undo-tree-id1972 . -21) (undo-tree-id1973 . -21) (undo-tree-id1974 . -21) (undo-tree-id1975 . -21) (undo-tree-id1976 . -21) (undo-tree-id1977 . -21) (undo-tree-id1978 . -21) (undo-tree-id1979 . -21) (undo-tree-id1980 . -21) (undo-tree-id1981 . 12) (undo-tree-id1982 . -20) (undo-tree-id1983 . -21) (undo-tree-id1984 . -21) (undo-tree-id1985 . -21) (undo-tree-id1986 . -21) (undo-tree-id1987 . -21) (undo-tree-id1988 . -21) (undo-tree-id1989 . -21) (undo-tree-id1990 . -21) (undo-tree-id1991 . -21) (undo-tree-id1992 . -21) (undo-tree-id1993 . -21) (undo-tree-id1994 . -21) (undo-tree-id1995 . -21) (t 26028 45128 330595 833000)) nil (26028 45159 857918 226000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -732) (undo-tree-id2035 . -2) (undo-tree-id2036 . -2) 734 (732 . 734) (#("  " 0 2 (fontified nil)) . 731) (undo-tree-id2037 . -2) (undo-tree-id2038 . -2) (731 . 734) (#("  " 0 2 (fontified nil)) . 730) (undo-tree-id2039 . -2) (undo-tree-id2040 . -2) (729 . 733) (t 26028 45161 251937 342000)) nil (26028 45840 39046 597000) 0 nil] [nil nil ((#("#include \"pico/binary_info.h\"
" 0 1 (c-is-sws t c-in-sws t fontified t face font-lock-preprocessor-face) 1 8 (c-in-sws t fontified t face font-lock-preprocessor-face) 8 9 (c-in-sws t fontified t) 9 29 (c-in-sws t fontified t face font-lock-string-face) 29 30 (c-in-sws t fontified t)) . 136) (undo-tree-id1996 . -29) (undo-tree-id1997 . 21) (undo-tree-id1998 . -29) (undo-tree-id1999 . -30) (t 26028 45142 997962 666000)) ((136 . 166) (t 26028 45154 681209 171000)) (26028 45154 658892 274000) 0 nil])
([nil nil ((326 . 329)) nil (26028 45840 39033 417000) 0 nil])
nil
([nil nil ((344 . 346) (328 . 344)) nil (26028 45840 39031 542000) 0 nil])
([nil nil ((349 . 351) (348 . 350) (347 . 349) (346 . 347)) nil (26028 45840 39028 938000) 0 nil])
([nil nil ((226 . 227) (nil syntax-table nil 226 . 227) (nil syntax-table (1) 225 . 226) (#("\"" 0 1 (fontified nil face font-lock-warning-face c-in-sws t)) . -226) (226 . 227) (nil syntax-table nil 226 . 227) (nil syntax-table (1) 225 . 226) (#("p" 0 1 (c-in-sws t fontified t face font-lock-string-face)) . -226) (undo-tree-id2012 . -1) (undo-tree-id2013 . -1) (nil syntax-table nil 227 . 228) (nil syntax-table (1) 225 . 226) (#("i" 0 1 (c-in-sws t fontified t face font-lock-string-face)) . -227) (undo-tree-id2014 . -1) (undo-tree-id2015 . -1) (nil syntax-table nil 228 . 229) (nil syntax-table (1) 225 . 226) (#("c" 0 1 (c-in-sws t fontified t face font-lock-string-face)) . -228) (undo-tree-id2016 . -1) (undo-tree-id2017 . -1) (nil syntax-table nil 229 . 230) (nil syntax-table (1) 225 . 226) (#("o" 0 1 (c-in-sws t fontified t face font-lock-string-face)) . -229) (undo-tree-id2018 . -1) (undo-tree-id2019 . -1) (nil syntax-table nil 230 . 231) (nil syntax-table (1) 225 . 226) (#("." 0 1 (c-in-sws t fontified t face font-lock-string-face)) . -230) (undo-tree-id2020 . -1) (undo-tree-id2021 . -1) (nil syntax-table nil 231 . 232) (nil syntax-table (1) 225 . 226) (#("h" 0 1 (c-in-sws t fontified t face font-lock-string-face)) . -231) (undo-tree-id2022 . -1) (undo-tree-id2023 . -1) (nil syntax-table nil 232 . 233) (nil syntax-table (1) 225 . 226) (#("\"" 0 1 (c-in-sws t fontified t face font-lock-string-face)) . -232) (undo-tree-id2024 . -1) (undo-tree-id2025 . -1) (undo-tree-id2026 . -1) 233 (226 . 233) (nil syntax-table nil 226 . 227) (nil syntax-table (1) 225 . 226) (#("pheader\"" 0 1 (c-in-sws t fontified nil) 1 7 (fontified nil face font-lock-string-face c-in-sws t) 7 8 (fontified nil face font-lock-string-face c-in-sws t)) . 226) (undo-tree-id2027 . -8) (undo-tree-id2028 . -7) (226 . 227) (#("pico.h\"" 0 7 (fontified nil)) . -226) (nil syntax-table nil 240 . 241) (nil syntax-table (1) 239 . 240) (226 . 233) (#("pico" 0 1 (fontified t c-in-sws t face font-lock-string-face) 1 2 (fontified t c-in-sws t face font-lock-string-face) 2 3 (fontified t c-in-sws t face font-lock-string-face) 3 4 (fontified t c-in-sws t face font-lock-string-face)) . -226) (undo-tree-id2029 . -2) (undo-tree-id2030 . -4) (undo-tree-id2031 . -4) 230 (226 . 230) (apply yas--snippet-revive 217 233 #s(yas--snippet nil (#s(yas--field 0 226 232 nil nil nil nil nil)) nil 6 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 0 226 232 nil nil nil nil nil)) nil 6 nil nil nil nil)) (217 . 233) (#("include \"${0:header}\"" 0 21 (c-in-sws t fontified nil)) . 217) (217 . 238) (#("i" 0 1 (c-in-sws t fontified nil)) . 217) (217 . 218) (#("include \"header\"" 0 16 (c-in-sws t fontified nil)) . -217) (217 . 233) (#("inclu" 0 1 (fontified t c-in-sws t face font-lock-preprocessor-face) 1 2 (fontified t c-in-sws t face font-lock-preprocessor-face) 2 3 (fontified t c-in-sws t face font-lock-preprocessor-face) 3 4 (fontified t c-in-sws t face font-lock-preprocessor-face) 4 5 (fontified t c-in-sws t face font-lock-preprocessor-face)) . -217) (undo-tree-id2032 . -5) (undo-tree-id2033 . -5) (undo-tree-id2034 . -5) 222 (217 . 222) (216 . 217) (215 . 216)) nil (26028 45840 39015 446000) 0 nil])
([nil nil ((231 . 243) (nil syntax-table nil 231 . 232) (nil syntax-table (1) 225 . 226) (#("m" 0 1 (fontified nil)) . 231) (nil syntax-table nil 232 . 233) (nil syntax-table (1) 225 . 226) (231 . 232) (nil syntax-table nil 231 . 232) (nil syntax-table (1) 225 . 226) (#("multicore.h\"" 0 12 (c-in-sws t fontified nil)) . -231) (231 . 243) (nil syntax-table nil 231 . 232) (nil syntax-table (1) 225 . 226) (#("mul" 0 1 (fontified t c-in-sws t face font-lock-string-face) 1 2 (fontified t c-in-sws t face font-lock-string-face) 2 3 (fontified t face font-lock-string-face c-in-sws t)) . -231) (undo-tree-id2006 . -3) (undo-tree-id2007 . -3) (nil syntax-table nil 234 . 235) (nil syntax-table (1) 225 . 226) (233 . 234) (nil syntax-table nil 233 . 234) (nil syntax-table (1) 225 . 226) (232 . 233) (nil syntax-table nil 232 . 233) (nil syntax-table (1) 225 . 226) (231 . 232) (nil syntax-table nil 231 . 232) (nil syntax-table (1) 225 . 226) (226 . 231) (nil syntax-table nil 226 . 227) (nil syntax-table (1) 225 . 226) (#("p\"" 0 1 (c-in-sws t fontified nil) 1 2 (fontified nil face font-lock-string-face c-in-sws t)) . 226) (undo-tree-id2008 . -2) (226 . 227) (#("pico/" 0 5 (c-in-sws t fontified nil)) . -226) (226 . 231) (#("pi" 0 1 (fontified t c-in-sws t face font-lock-string-face) 1 2 (fontified t c-in-sws t face font-lock-string-face)) . -226) (undo-tree-id2009 . -2) (undo-tree-id2010 . -2) (undo-tree-id2011 . -2) 228 (226 . 228)) nil (26028 45840 38956 396000) 0 nil])
([nil nil ((263 . 269) (nil syntax-table nil 263 . 264) (nil syntax-table (1) 253 . 254) (#("i" 0 1 (fontified nil)) . 263) (nil syntax-table nil 264 . 265) (nil syntax-table (1) 253 . 254) (263 . 264) (nil syntax-table nil 263 . 264) (nil syntax-table (1) 253 . 254) (#("irq.h\"" 0 6 (c-in-sws t fontified nil)) . -263) (263 . 269) (nil syntax-table nil 263 . 264) (nil syntax-table (1) 253 . 254) (#("i" 0 1 (fontified t face font-lock-string-face c-in-sws t)) . -263) (undo-tree-id2000 . -1) (undo-tree-id2001 . -1) (nil syntax-table nil 264 . 265) (nil syntax-table (1) 253 . 254) (263 . 264) (nil syntax-table nil 263 . 264) (nil syntax-table (1) 253 . 254) (254 . 263) (nil syntax-table nil 254 . 255) (nil syntax-table (1) 253 . 254) (#("ha\"" 0 2 (c-in-sws t fontified nil) 2 3 (fontified nil face font-lock-string-face c-in-sws t)) . 254) (undo-tree-id2002 . -3) (254 . 256) (#("hardware/" 0 9 (c-in-sws t fontified nil)) . -254) (254 . 263) (#("hard" 0 1 (fontified t c-in-sws t face font-lock-string-face) 1 2 (fontified t c-in-sws t face font-lock-string-face) 2 3 (fontified t c-in-sws t face font-lock-string-face) 3 4 (fontified t c-in-sws t face font-lock-string-face)) . -254) (undo-tree-id2003 . -2) (undo-tree-id2004 . -4) (undo-tree-id2005 . -4) 258 (254 . 258) (254 . 255) (nil syntax-table nil 254 . 255) (nil syntax-table (1) 253 . 254) (253 . 254) (#("\"" 0 1 (fontified nil)) . -253) (nil syntax-table nil 254 . 255) (nil syntax-table (1) 253 . 254) (245 . 254) (244 . 245) (243 . 244)) nil (26028 45840 38920 255000) 0 nil])
([nil nil ((393 . 399) (#("n" 0 1 (fontified t face font-lock-function-name-face)) . -393) (undo-tree-id2170 . -1) (undo-tree-id2171 . -1) 394 (387 . 394) (#("o" 0 1 (fontified t face font-lock-function-name-face)) . -387) (undo-tree-id2172 . -1) (undo-tree-id2173 . -1) 388 (387 . 388) (t 26028 45840 87315 386000)) nil (26028 45908 361851 302000) 0 nil])
([nil nil ((445 . 447) (441 . 445) (437 . 441) (#(")" 0 1 (fontified t face (rainbow-delimiters-unmatched-face))) . -437) (undo-tree-id2167 . -1) (undo-tree-id2168 . -1) 438 (437 . 438) (#(")" 0 1 (fontified nil face font-lock-function-name-face)) . -437) (437 . 438) (425 . 437) (424 . 425) (422 . 424) (417 . 422) (416 . 417) (#("
  
" 0 1 (fontified t) 1 4 (fontified t)) . -414) (undo-tree-id2169 . 4) (419 . 420)) nil (26028 45908 361839 115000) 0 nil])
([nil nil ((450 . 452) (449 . 451) (448 . 450) (447 . 448)) nil (26028 45908 361827 618000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -416) (undo-tree-id2163 . -2) (undo-tree-id2164 . -2) 418 (416 . 418) (#("  " 0 2 (fontified nil)) . 415) (undo-tree-id2165 . -2) (undo-tree-id2166 . -2) (415 . 418) (414 . 416)) nil (26028 45908 361822 388000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -496) (undo-tree-id2159 . -2) (undo-tree-id2160 . -2) 498 (496 . 498) (#("  " 0 2 (fontified nil)) . 495) (undo-tree-id2161 . -2) (undo-tree-id2162 . -2) (494 . 498)) nil (26028 45908 361809 433000) 0 nil])
([nil nil ((#("(" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -543) (undo-tree-id2138 . -1) (undo-tree-id2139 . -1) (undo-tree-id2140 . -1) (undo-tree-id2141 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . 544) (undo-tree-id2142 . 1) (undo-tree-id2143 . -1) (undo-tree-id2144 . 1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -544) (undo-tree-id2145 . -1) (undo-tree-id2146 . -1) (undo-tree-id2147 . -1) 545 (apply yas--snippet-revive 520 545 #s(yas--snippet nil nil nil 8 nil nil #s(yas--field 1 520 547 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 8 nil nil #s(yas--field 1 520 547 nil nil nil t nil) nil)) (520 . 545) (#("core1_entry_uart_reader()" 0 25 (fontified nil)) . 520) (undo-tree-id2148 . -25) (520 . 545) (#("cor" 0 3 (fontified nil)) . 520) (undo-tree-id2149 . -3) (520 . 523) (#("core1_entry_uart_reader()" 0 25 (fontified nil)) . -520) (undo-tree-id2150 . -25) (520 . 545) (#("core" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -520) (undo-tree-id2151 . -4) (undo-tree-id2152 . -4) (undo-tree-id2153 . -4) (undo-tree-id2154 . -4) 524 (521 . 524) (#("void (*entry)(void)" 0 4 (fontified nil face font-lock-type-face) 4 5 (fontified nil) 5 6 (fontified nil face (rainbow-delimiters-depth-3-face)) 6 7 (fontified nil) 7 12 (fontified nil face font-lock-function-name-face) 12 13 (fontified nil face (rainbow-delimiters-depth-3-face)) 13 14 (fontified nil c-type c-decl-arg-start face (rainbow-delimiters-depth-3-face)) 14 18 (fontified t face font-lock-type-face) 18 19 (fontified t face (rainbow-delimiters-depth-3-face))) . 521) (undo-tree-id2155 . -19) (520 . 521) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 520 547 nil nil nil t nil)) nil 7 nil #s(yas--field 1 520 547 nil nil nil t nil) nil nil)) (497 . 540) (#("multicore_launch_core1(${1:void (*entry)(void)})" 0 48 (fontified nil)) . 497) (497 . 545) (#("mul" 0 3 (fontified nil)) . 497) (497 . 500) (#("multicore_launch_core1(void (*entry)(void))" 0 43 (fontified nil)) . -497) (497 . 540) (#("multicore_laun" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t face font-lock-type-face) 3 4 (fontified t face font-lock-type-face) 4 5 (fontified t face font-lock-type-face) 5 6 (fontified t face font-lock-type-face) 6 7 (fontified t face font-lock-type-face) 7 8 (fontified t face font-lock-type-face) 8 9 (fontified t face font-lock-type-face) 9 10 (fontified t face font-lock-type-face) 10 11 (fontified t face font-lock-type-face) 11 12 (fontified t face font-lock-type-face) 12 13 (fontified t face font-lock-type-face) 13 14 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -497) (undo-tree-id2156 . -12) (undo-tree-id2157 . -14) (undo-tree-id2158 . -14) 511 (507 . 511) (497 . 507) (495 . 497)) nil (26028 45908 361791 628000) 0 nil])
([nil nil ((544 . 545) (543 . 544) (#(")" 0 1 (fontified nil face font-lock-type-face)) . -543) (undo-tree-id2136 . -1) (undo-tree-id2137 . 1) (543 . 544)) nil (26028 45908 361689 325000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -547) (undo-tree-id2041 . -2) (undo-tree-id2042 . -2) (undo-tree-id2043 . -2) (undo-tree-id2044 . -2) (undo-tree-id2045 . -2) (undo-tree-id2046 . -2) (undo-tree-id2047 . -2) (undo-tree-id2048 . -2) (undo-tree-id2049 . -2) (undo-tree-id2050 . -2) (undo-tree-id2051 . -2) (undo-tree-id2052 . -2) (undo-tree-id2053 . -2) (undo-tree-id2054 . -2) (undo-tree-id2055 . -2) (undo-tree-id2056 . -2) (undo-tree-id2057 . -2) (undo-tree-id2058 . -2) (undo-tree-id2059 . -2) (undo-tree-id2060 . -2) (undo-tree-id2061 . -2) (undo-tree-id2062 . -2) (undo-tree-id2063 . -2) (undo-tree-id2064 . -2) (undo-tree-id2065 . -2) (undo-tree-id2066 . -2) (undo-tree-id2067 . -2) (undo-tree-id2068 . -2) (undo-tree-id2069 . -2) (undo-tree-id2070 . -2) (undo-tree-id2071 . -2) (undo-tree-id2072 . -2) (undo-tree-id2073 . -2) (undo-tree-id2074 . -2) (undo-tree-id2075 . -2) (undo-tree-id2076 . -2) (undo-tree-id2077 . -2) (undo-tree-id2078 . -2) (undo-tree-id2079 . -2) (undo-tree-id2080 . -2) (undo-tree-id2081 . -2) (undo-tree-id2082 . -2) (undo-tree-id2083 . -2) (undo-tree-id2084 . -2) (undo-tree-id2085 . -2) (undo-tree-id2086 . -2) (undo-tree-id2087 . -2) (undo-tree-id2088 . -2) 549 (547 . 549) (#("  " 0 2 (fontified nil)) . 546) (undo-tree-id2089 . -2) (undo-tree-id2090 . -2) (undo-tree-id2091 . -2) (undo-tree-id2092 . -2) (undo-tree-id2093 . -2) (undo-tree-id2094 . -2) (undo-tree-id2095 . -2) (undo-tree-id2096 . -2) (undo-tree-id2097 . -2) (undo-tree-id2098 . -2) (undo-tree-id2099 . -2) (undo-tree-id2100 . -2) (undo-tree-id2101 . -2) (undo-tree-id2102 . -2) (undo-tree-id2103 . -2) (undo-tree-id2104 . -2) (undo-tree-id2105 . -2) (undo-tree-id2106 . -2) (undo-tree-id2107 . -2) (undo-tree-id2108 . -2) (undo-tree-id2109 . -2) (undo-tree-id2110 . -2) (undo-tree-id2111 . -2) (undo-tree-id2112 . -2) (undo-tree-id2113 . -2) (undo-tree-id2114 . -2) (undo-tree-id2115 . -2) (undo-tree-id2116 . -2) (undo-tree-id2117 . -2) (undo-tree-id2118 . -2) (undo-tree-id2119 . -2) (undo-tree-id2120 . -2) (undo-tree-id2121 . -2) (undo-tree-id2122 . -2) (undo-tree-id2123 . -2) (undo-tree-id2124 . -2) (undo-tree-id2125 . -2) (undo-tree-id2126 . -2) (undo-tree-id2127 . -2) (undo-tree-id2128 . -2) (undo-tree-id2129 . -2) (undo-tree-id2130 . -2) (undo-tree-id2131 . -2) (undo-tree-id2132 . -2) (undo-tree-id2133 . -2) (undo-tree-id2134 . -2) (undo-tree-id2135 . -2) (545 . 549)) nil (26028 45908 361666 430000) 0 nil])
([nil nil ((apply yas--snippet-revive 497 547 #s(yas--snippet nil (#s(yas--field 1 520 547 nil nil nil t nil)) nil 7 nil #s(yas--field 1 520 547 nil nil nil t nil) nil nil))) nil (26028 45929 800659 233000) 0 nil])
([nil nil ((547 . 549) (#("  " 0 2 (fontified nil)) . 546) (undo-tree-id2344 . -2) (undo-tree-id2345 . -2) (548 . 549) (546 . 548) (t 26028 45908 407090 637000)) nil (26028 45929 800655 775000) 0 nil])
([nil nil ((#(" uart_init(UART_ID, 9600);

  gpio_set_function(UART_RX_PIN, GPIO_FUNC_UART);
  gpio_set_function(UART_TX_PIN, GPIO_FUNC_UART);

  uart_set_baudrate(UART_ID, 9600);

" 0 1 (fontified t) 1 10 (fontified t) 10 11 (fontified t face (rainbow-delimiters-depth-2-face)) 11 24 (fontified t) 24 25 (fontified t face (rainbow-delimiters-depth-2-face)) 25 26 (fontified t) 26 27 (fontified t) 27 47 (fontified t) 47 48 (fontified t face (rainbow-delimiters-depth-2-face)) 48 75 (fontified t) 75 76 (fontified t face (rainbow-delimiters-depth-2-face)) 76 97 (fontified t) 97 98 (fontified t face (rainbow-delimiters-depth-2-face)) 98 115 (fontified t) 115 125 (fontified t) 125 126 (fontified t face (rainbow-delimiters-depth-2-face)) 126 128 (fontified t) 128 129 (fontified t) 129 131 (fontified t) 131 148 (fontified t) 148 149 (fontified t face (rainbow-delimiters-depth-2-face)) 149 156 (fontified t) 156 157 (fontified t) 157 158 (fontified t) 158 159 (fontified t) 159 160 (fontified t) 160 161 (fontified t) 161 162 (fontified t) 162 163 (fontified t face (rainbow-delimiters-depth-2-face)) 163 164 (fontified t) 164 165 (fontified t) 165 166 (fontified t)) . 553) (undo-tree-id2254 . -165) (undo-tree-id2255 . -165) (undo-tree-id2256 . -165) (undo-tree-id2257 . -165) (undo-tree-id2258 . -166) (undo-tree-id2259 . -165) (undo-tree-id2260 . -27) (undo-tree-id2261 . -27) (undo-tree-id2262 . -27) (undo-tree-id2263 . -27) (undo-tree-id2264 . -27) (undo-tree-id2265 . -27) (undo-tree-id2266 . -27) (undo-tree-id2267 . -27) (undo-tree-id2268 . -27) (undo-tree-id2269 . -29) (undo-tree-id2270 . -29) (undo-tree-id2271 . -29) (undo-tree-id2272 . -29) (undo-tree-id2273 . -29) (undo-tree-id2274 . -29) (undo-tree-id2275 . -29) (undo-tree-id2276 . -29) (undo-tree-id2277 . -29) (undo-tree-id2278 . -79) (undo-tree-id2279 . -79) (undo-tree-id2280 . -79) (undo-tree-id2281 . -79) (undo-tree-id2282 . -79) (undo-tree-id2283 . -79) (undo-tree-id2284 . -79) (undo-tree-id2285 . -79) (undo-tree-id2286 . -79) (undo-tree-id2287 . -128) (undo-tree-id2288 . -128) (undo-tree-id2289 . -128) (undo-tree-id2290 . -128) (undo-tree-id2291 . -128) (undo-tree-id2292 . -128) (undo-tree-id2293 . -128) (undo-tree-id2294 . -128) (undo-tree-id2295 . -128) (undo-tree-id2296 . -130) (undo-tree-id2297 . -130) (undo-tree-id2298 . -130) (undo-tree-id2299 . -130) (undo-tree-id2300 . -130) (undo-tree-id2301 . -130) (undo-tree-id2302 . -130) (undo-tree-id2303 . -130) (undo-tree-id2304 . -130) (undo-tree-id2305 . -165) (undo-tree-id2306 . -165) (undo-tree-id2307 . -165) (undo-tree-id2308 . -165) (undo-tree-id2309 . -165) (undo-tree-id2310 . -165) (undo-tree-id2311 . -165) (undo-tree-id2312 . -165) (undo-tree-id2313 . -165) (undo-tree-id2314 . -166) (undo-tree-id2315 . -166) (undo-tree-id2316 . -166) (undo-tree-id2317 . -166) (undo-tree-id2318 . -166) (undo-tree-id2319 . -166) (undo-tree-id2320 . -166) (undo-tree-id2321 . -166) (undo-tree-id2322 . -166) (undo-tree-id2323 . -166) (undo-tree-id2324 . -166) (undo-tree-id2325 . -166) (undo-tree-id2326 . -166) (undo-tree-id2327 . -166) (undo-tree-id2328 . -166) (undo-tree-id2329 . -166) (undo-tree-id2330 . -166) (undo-tree-id2331 . -166) (undo-tree-id2332 . -165) (undo-tree-id2333 . -165) (undo-tree-id2334 . -165) (undo-tree-id2335 . -165) (undo-tree-id2336 . -165) (undo-tree-id2337 . -165) (undo-tree-id2338 . -165) (undo-tree-id2339 . -165) (undo-tree-id2340 . -165) (undo-tree-id2341 . -165) (undo-tree-id2342 . -165) (undo-tree-id2343 . -166) 718) nil (26028 45929 800639 993000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -416) (undo-tree-id2174 . -2) (undo-tree-id2175 . -2) (undo-tree-id2176 . -2) (undo-tree-id2177 . -2) (undo-tree-id2178 . -2) (undo-tree-id2179 . -2) (undo-tree-id2180 . -2) (undo-tree-id2181 . -2) (undo-tree-id2182 . -2) (undo-tree-id2183 . -2) (undo-tree-id2184 . -2) (undo-tree-id2185 . -2) (undo-tree-id2186 . -2) (undo-tree-id2187 . -2) (undo-tree-id2188 . -2) (undo-tree-id2189 . -2) (undo-tree-id2190 . -2) (undo-tree-id2191 . -2) (undo-tree-id2192 . -2) (undo-tree-id2193 . -2) (undo-tree-id2194 . -2) (undo-tree-id2195 . -2) (undo-tree-id2196 . -2) (undo-tree-id2197 . -2) (undo-tree-id2198 . -2) (undo-tree-id2199 . -2) (undo-tree-id2200 . -2) (undo-tree-id2201 . -2) (undo-tree-id2202 . -2) (undo-tree-id2203 . -2) (undo-tree-id2204 . -2) (undo-tree-id2205 . -2) (undo-tree-id2206 . -2) (undo-tree-id2207 . -2) (undo-tree-id2208 . -2) (undo-tree-id2209 . -2) (undo-tree-id2210 . -2) (undo-tree-id2211 . -2) (undo-tree-id2212 . -2) (undo-tree-id2213 . -2) (undo-tree-id2214 . -2) (undo-tree-id2215 . -2) (undo-tree-id2216 . -2) (undo-tree-id2217 . -2) (undo-tree-id2218 . -2) (undo-tree-id2219 . -2) (undo-tree-id2220 . -2) (undo-tree-id2221 . -2) (undo-tree-id2222 . -2) (undo-tree-id2223 . -2) (undo-tree-id2224 . -2) (undo-tree-id2225 . -2) (undo-tree-id2226 . -2) (undo-tree-id2227 . -2) (undo-tree-id2228 . -2) (undo-tree-id2229 . -2) (undo-tree-id2230 . -2) (undo-tree-id2231 . -2) (undo-tree-id2232 . -2) (undo-tree-id2233 . -2) (undo-tree-id2234 . -2) (undo-tree-id2235 . -2) (undo-tree-id2236 . -2) (undo-tree-id2237 . -2) (undo-tree-id2238 . -2) (undo-tree-id2239 . -2) (undo-tree-id2240 . -2) (undo-tree-id2241 . -2) (undo-tree-id2242 . -2) (undo-tree-id2243 . -2) (undo-tree-id2244 . -2) (undo-tree-id2245 . -2) (undo-tree-id2246 . -2) (undo-tree-id2247 . -2) (undo-tree-id2248 . -2) (undo-tree-id2249 . -2) (undo-tree-id2250 . -2) (undo-tree-id2251 . -2) (undo-tree-id2252 . -2) (undo-tree-id2253 . -2) 418 (415 . 418) 415) nil (26028 45929 800470 236000) 0 nil])
([nil nil ((nil rear-nonsticky nil 581 . 582) (nil fontified nil 416 . 582) (416 . 582)) nil (26028 45929 803050 143000) 0 nil])
([nil nil ((416 . 418) (#(" " 0 1 (fontified t)) . 416)) nil (26028 45943 600693 374000) 0 nil] [nil nil ((nil rear-nonsticky nil 747 . 748) (nil fontified nil 582 . 748) (582 . 748)) ((#(" uart_init(UART_ID, 9600);

  gpio_set_function(UART_RX_PIN, GPIO_FUNC_UART);
  gpio_set_function(UART_TX_PIN, GPIO_FUNC_UART);

  uart_set_baudrate(UART_ID, 9600);

" 0 10 (fontified nil) 10 11 (fontified nil face (rainbow-delimiters-depth-2-face)) 11 24 (fontified nil) 24 25 (fontified nil face (rainbow-delimiters-depth-2-face)) 25 47 (fontified nil) 47 48 (fontified nil face (rainbow-delimiters-depth-2-face)) 48 75 (fontified nil) 75 76 (fontified nil face (rainbow-delimiters-depth-2-face)) 76 97 (fontified nil) 97 98 (fontified nil face (rainbow-delimiters-depth-2-face)) 98 125 (fontified nil) 125 126 (fontified nil face (rainbow-delimiters-depth-2-face)) 126 148 (fontified nil) 148 149 (fontified nil face (rainbow-delimiters-depth-2-face)) 149 162 (fontified nil) 162 163 (fontified nil face (rainbow-delimiters-depth-2-face)) 163 165 (fontified nil) 165 166 (rear-nonsticky nil fontified nil)) . 582) (undo-tree-id2346 . -165) (undo-tree-id2347 . -166) (undo-tree-id2348 . -166) (undo-tree-id2349 . -166) (undo-tree-id2350 . -166) (nil rear-nonsticky t 747 . 748)) (26028 45929 800236 721000) 0 nil])
([nil nil ((#("  
  bi_decl(bi_1pin_with_func(UART_TX_PIN, GPIO_FUNC_UART));
  bi_decl(bi_1pin_with_func(UART_RX_PIN, GPIO_FUNC_UART));


" 0 3 (fontified t) 3 4 (c-in-sws t c-is-sws t fontified t) 4 5 (c-in-sws t c-is-sws t fontified t) 5 12 (fontified t) 12 13 (fontified t face (rainbow-delimiters-depth-2-face)) 13 30 (fontified t) 30 31 (fontified t face (rainbow-delimiters-depth-3-face)) 31 57 (fontified t) 57 58 (fontified t) 58 59 (fontified t face (rainbow-delimiters-depth-3-face)) 59 60 (fontified t face (rainbow-delimiters-depth-2-face)) 60 61 (fontified t) 61 62 (fontified t) 62 63 (c-is-sws t c-in-sws t fontified t) 63 64 (rear-nonsticky t c-is-sws t c-in-sws t fontified t) 64 65 (c-is-sws t fontified t) 65 71 (fontified t) 71 72 (fontified t face (rainbow-delimiters-depth-2-face)) 72 79 (fontified t) 79 80 (fontified t) 80 89 (fontified t) 89 90 (fontified t face (rainbow-delimiters-depth-3-face)) 90 95 (fontified t) 95 96 (fontified t) 96 97 (fontified t) 97 102 (fontified t) 102 107 (fontified t) 107 108 (fontified t) 108 116 (fontified t) 116 117 (fontified t) 117 118 (fontified t face (rainbow-delimiters-depth-3-face)) 118 119 (fontified t face (rainbow-delimiters-depth-2-face)) 119 120 (fontified t) 120 121 (fontified t) 121 122 (fontified t) 122 123 (fontified t)) . 800) (undo-tree-id2351 . -122) (undo-tree-id2352 . -122) (undo-tree-id2353 . -122) (undo-tree-id2354 . -4) (undo-tree-id2355 . -121) (undo-tree-id2356 . -121) (undo-tree-id2357 . -122)) nil (26028 45943 600687 533000) 0 nil])
nil
([nil nil ((nil rear-nonsticky nil 705 . 706) (nil fontified nil 583 . 706) (583 . 706)) nil (26028 45943 600645 698000) 0 nil])
([nil nil ((925 . 927) (#("  " 0 2 (fontified nil)) . 924) (undo-tree-id2518 . -2) (undo-tree-id2519 . -2) (924 . 927) (#("  " 0 2 (fontified nil)) . 923) (undo-tree-id2520 . -2) (undo-tree-id2521 . -2) (922 . 926) (t 26028 45943 624887 152000)) nil (26028 46047 978978 9000) 0 nil])
([nil nil ((715 . 716) (714 . 716) (713 . 714) (#(" x" 0 2 (fontified nil)) . -713) (713 . 715) (#("while" 0 1 (fontified nil face font-lock-keyword-face) 1 2 (fontified nil face font-lock-keyword-face) 2 3 (fontified nil face font-lock-keyword-face) 3 4 (fontified nil face font-lock-keyword-face) 4 5 (fontified nil face font-lock-keyword-face)) . 713) (undo-tree-id2513 . -3) (undo-tree-id2514 . -5) (undo-tree-id2515 . -5) (708 . 713) 713 (708 . 713) (706 . 708) (#("  " 0 2 (fontified nil)) . 705) (undo-tree-id2516 . -2) (undo-tree-id2517 . -2) (707 . 708) (705 . 707)) nil (26028 46047 978966 502000) 0 nil])
([nil nil ((720 . 724) (719 . 723) (718 . 720) (717 . 718)) nil (26028 46047 978953 264000) 0 nil])
([nil nil ((#(" gpio_put(LED_PIN, 1);

    sleep_ms(100);

    uart_read_blocking(UART_ID, &data, 1);
    
    printf(\"%i\\n\", (int) data);

    gpio_put(LED_PIN, 0);

    sleep_ms(100);
" 0 1 (fontified t) 1 2 (fontified t) 2 9 (fontified t) 9 10 (fontified t face (rainbow-delimiters-depth-3-face)) 10 14 (fontified t) 14 15 (fontified t) 15 18 (fontified t) 18 20 (fontified t) 20 21 (fontified t face (rainbow-delimiters-depth-3-face)) 21 22 (fontified t) 22 23 (fontified t) 23 24 (fontified t) 24 28 (fontified t) 28 34 (fontified t) 34 36 (fontified t) 36 37 (fontified t face (rainbow-delimiters-depth-3-face)) 37 38 (fontified t) 38 39 (fontified t) 39 40 (fontified t) 40 41 (fontified t face (rainbow-delimiters-depth-3-face)) 41 42 (fontified t) 42 43 (fontified t) 43 44 (fontified t) 44 48 (fontified t) 48 66 (fontified t) 66 67 (fontified t face (rainbow-delimiters-depth-3-face)) 67 69 (fontified t) 69 74 (fontified t) 74 75 (fontified t) 75 76 (fontified t) 76 77 (fontified t) 77 80 (fontified t) 80 81 (fontified t) 81 82 (fontified t) 82 83 (fontified t) 83 84 (fontified t) 84 85 (fontified t face (rainbow-delimiters-depth-3-face)) 85 86 (fontified t) 86 87 (fontified t) 87 90 (fontified t) 90 91 (fontified t) 91 92 (fontified t) 92 95 (c-in-sws t c-is-sws t fontified t) 95 96 (fontified t) 96 97 (fontified t) 97 102 (fontified t) 102 103 (fontified t face (rainbow-delimiters-depth-3-face)) 103 109 (fontified t face font-lock-string-face) 109 110 (fontified t) 110 111 (fontified t) 111 112 (fontified t face (rainbow-delimiters-depth-4-face)) 112 115 (fontified t face font-lock-type-face) 115 116 (fontified t face (rainbow-delimiters-depth-4-face)) 116 117 (fontified t) 117 121 (fontified t) 121 122 (fontified t face (rainbow-delimiters-depth-3-face)) 122 123 (fontified t) 123 124 (fontified t) 124 125 (c-is-sws t c-in-sws t fontified t) 125 129 (c-in-sws t c-is-sws t fontified t) 129 130 (c-is-sws t fontified t) 130 133 (fontified t) 133 134 (fontified t) 134 135 (fontified t) 135 137 (fontified t) 137 138 (fontified t face (rainbow-delimiters-depth-3-face)) 138 139 (fontified t) 139 140 (fontified t) 140 141 (fontified t) 141 142 (fontified t) 142 145 (fontified t) 145 146 (fontified t) 146 147 (fontified t) 147 148 (fontified t) 148 149 (fontified t face (rainbow-delimiters-depth-3-face)) 149 150 (fontified t) 150 151 (fontified t) 151 152 (fontified t) 152 156 (fontified t) 156 164 (fontified t) 164 165 (fontified t face (rainbow-delimiters-depth-3-face)) 165 166 (fontified t) 166 167 (fontified t) 167 168 (fontified t) 168 169 (fontified t face (rainbow-delimiters-depth-3-face)) 169 170 (fontified t) 170 171 (fontified t)) . 970) (undo-tree-id2492 . -170) (undo-tree-id2493 . -170) (undo-tree-id2494 . -43) (undo-tree-id2495 . -170) (undo-tree-id2496 . -169) (undo-tree-id2497 . -151) (undo-tree-id2498 . -96) (undo-tree-id2499 . -167) (undo-tree-id2500 . -90) (undo-tree-id2501 . -90) (undo-tree-id2502 . -90) (undo-tree-id2503 . -124) (undo-tree-id2504 . -124) (undo-tree-id2505 . -124) (undo-tree-id2506 . -151) (undo-tree-id2507 . -151) (undo-tree-id2508 . -151) (undo-tree-id2509 . -151) (undo-tree-id2510 . -170) (undo-tree-id2511 . -170) (undo-tree-id2512 . -170) 1140) nil (26028 46047 978948 87000) 0 nil])
([nil nil ((nil rear-nonsticky nil 894 . 895) (nil fontified nil 724 . 895) (724 . 895) 723) nil (26028 46047 978912 991000) 0 nil])
([nil nil ((720 . 724) (#("     " 0 4 (fontified t) 4 5 (fontified t)) . 720) (undo-tree-id2490 . -4) (undo-tree-id2491 . -4)) nil (26028 46047 978909 539000) 0 nil])
([nil nil ((766 . 770)) nil (26028 46047 978904 172000) 0 nil])
([nil nil ((814 . 818) (#("   " 0 3 (fontified nil)) . -814) (undo-tree-id2489 . -3) (#(" " 0 1 (fontified t)) . 817)) nil (26028 46047 978901 706000) 0 nil])
([nil nil ((851 . 855)) nil (26028 46047 978897 784000) 0 nil])
([nil nil ((902 . 906)) nil (26028 46047 978896 168000) 0 nil])
([nil nil ((1149 . 1151) (#("     " 0 3 (fontified t) 3 5 (fontified t)) . 1149) (undo-tree-id2465 . -3) (undo-tree-id2466 . -3) (undo-tree-id2467 . 2) (undo-tree-id2468 . -3) (undo-tree-id2469 . -3) (undo-tree-id2470 . -3) (undo-tree-id2471 . -3) (undo-tree-id2472 . -3) (undo-tree-id2473 . -5) (undo-tree-id2474 . -3) (undo-tree-id2475 . -3) (undo-tree-id2476 . -3) (undo-tree-id2477 . -3) (undo-tree-id2478 . -3) (undo-tree-id2479 . -3) (undo-tree-id2480 . -3) (undo-tree-id2481 . -3) (undo-tree-id2482 . -3) (undo-tree-id2483 . -3) (undo-tree-id2484 . -3) (undo-tree-id2485 . -5) (undo-tree-id2486 . -5) (undo-tree-id2487 . -3) (undo-tree-id2488 . -3) 1152) nil (26028 46047 978891 830000) 0 nil])
([nil nil ((1150 . 1154) (#("    " 0 4 (fontified nil)) . 1149) (undo-tree-id2461 . -4) (undo-tree-id2462 . -4) (1148 . 1154) (#("'" 0 1 (fontified nil face font-lock-warning-face)) . -1148) (undo-tree-id2463 . -1) (undo-tree-id2464 . -1) (#("'" 0 1 (fontified t face font-lock-warning-face)) . 1149) (1148 . 1150) (#("'" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -1148) (1148 . 1149)) nil (26028 46047 978849 525000) 0 nil])
([nil nil ((#("    gpio_put(LED_PIN, 1);
" 0 4 (fontified t) 4 12 (fontified t) 12 13 (fontified t face (rainbow-delimiters-depth-3-face)) 13 23 (fontified t) 23 24 (fontified t face (rainbow-delimiters-depth-3-face)) 24 26 (fontified t)) . 720) (undo-tree-id2456 . -25) (undo-tree-id2457 . -3) (undo-tree-id2458 . -3) (undo-tree-id2459 . -3) (undo-tree-id2460 . -3) 723) nil (26028 46047 978838 60000) 0 nil])
([nil nil ((#("    gpio_put(LED_PIN, 0);
" 0 12 (fontified t) 12 13 (fontified t face (rainbow-delimiters-depth-3-face)) 13 23 (fontified t) 23 24 (fontified t face (rainbow-delimiters-depth-3-face)) 24 26 (fontified t)) . 830) (undo-tree-id2455 . -25)) nil (26028 46047 978825 585000) 0 nil])
([nil nil ((#("    sleep_ms(100);
" 0 12 (fontified t) 12 13 (fontified t face (rainbow-delimiters-depth-3-face)) 13 16 (fontified t) 16 17 (fontified t face (rainbow-delimiters-depth-3-face)) 17 18 (fontified t) 18 19 (rear-nonsticky t fontified t)) . 831) (undo-tree-id2453 . -18) (undo-tree-id2454 . -19)) nil (26028 46047 978821 893000) 0 nil])
([nil nil ((#("    sleep_ms(100);
" 0 12 (fontified t) 12 13 (fontified t face (rainbow-delimiters-depth-3-face)) 13 16 (fontified t) 16 17 (fontified t face (rainbow-delimiters-depth-3-face)) 17 19 (fontified t)) . 721) (undo-tree-id2442 . -18) (undo-tree-id2443 . -19) (undo-tree-id2444 . -19) (undo-tree-id2445 . -19) (undo-tree-id2446 . -19) (undo-tree-id2447 . -19) (undo-tree-id2448 . -19) (undo-tree-id2449 . -19) (undo-tree-id2450 . -19) (undo-tree-id2451 . -19) (undo-tree-id2452 . -19)) nil (26028 46047 978814 897000) 0 nil])
([nil nil ((#("    printf(\"%i\\n\", (int) data);
" 0 10 (fontified t) 10 11 (fontified t face (rainbow-delimiters-depth-3-face)) 11 17 (fontified t face font-lock-string-face) 17 19 (fontified t) 19 20 (fontified t face (rainbow-delimiters-depth-4-face)) 20 23 (fontified t face font-lock-type-face) 23 24 (fontified t face (rainbow-delimiters-depth-4-face)) 24 29 (fontified t) 29 30 (fontified t face (rainbow-delimiters-depth-3-face)) 30 32 (fontified t)) . 774) (undo-tree-id2420 . -31) (undo-tree-id2421 . -32) (undo-tree-id2422 . -32) (undo-tree-id2423 . -32) (undo-tree-id2424 . -32) (undo-tree-id2425 . -32) (undo-tree-id2426 . -32) (undo-tree-id2427 . -32) (undo-tree-id2428 . -32) (undo-tree-id2429 . -32) (undo-tree-id2430 . -4) (undo-tree-id2431 . -10) (undo-tree-id2432 . -32) (undo-tree-id2433 . -32) (undo-tree-id2434 . -32) (undo-tree-id2435 . -32) (undo-tree-id2436 . -32) (undo-tree-id2437 . -32) (undo-tree-id2438 . -32) (undo-tree-id2439 . -32) (undo-tree-id2440 . -32) (undo-tree-id2441 . -32)) nil (26028 46047 978793 281000) 0 nil])
([nil nil ((720 . 724)) nil (26028 46047 978755 365000) 0 nil])
([nil nil ((707 . 709) (#("  " 0 2 (fontified nil)) . 706) (undo-tree-id2364 . -2) (undo-tree-id2365 . -2) (undo-tree-id2366 . -2) (undo-tree-id2367 . -2) (undo-tree-id2368 . -2) (undo-tree-id2369 . -2) (undo-tree-id2370 . -2) (undo-tree-id2371 . -2) (undo-tree-id2372 . -2) (undo-tree-id2373 . -2) (undo-tree-id2374 . -2) (undo-tree-id2375 . -2) (undo-tree-id2376 . -2) (undo-tree-id2377 . -2) (undo-tree-id2378 . -2) (undo-tree-id2379 . -2) (undo-tree-id2380 . -2) (undo-tree-id2381 . -2) (undo-tree-id2382 . -2) (undo-tree-id2383 . -2) (undo-tree-id2384 . -2) (undo-tree-id2385 . -2) (undo-tree-id2386 . -2) (undo-tree-id2387 . -2) (undo-tree-id2388 . -2) (undo-tree-id2389 . -2) (undo-tree-id2390 . -2) (undo-tree-id2391 . -2) (undo-tree-id2392 . -2) (undo-tree-id2393 . -2) (undo-tree-id2394 . -2) (undo-tree-id2395 . -2) (undo-tree-id2396 . -2) (undo-tree-id2397 . -2) (undo-tree-id2398 . -2) (undo-tree-id2399 . -2) (undo-tree-id2400 . -2) (undo-tree-id2401 . -2) (undo-tree-id2402 . -2) (undo-tree-id2403 . -2) (undo-tree-id2404 . -2) (undo-tree-id2405 . -2) (undo-tree-id2406 . -2) (undo-tree-id2407 . -2) (undo-tree-id2408 . -2) (undo-tree-id2409 . -2) (undo-tree-id2410 . -2) (706 . 709) (#("  " 0 2 (fontified nil)) . 705) (undo-tree-id2411 . -2) (undo-tree-id2412 . -2) (undo-tree-id2413 . -2) (undo-tree-id2414 . -2) (undo-tree-id2415 . -2) (undo-tree-id2416 . -2) (undo-tree-id2417 . -2) (undo-tree-id2418 . -2) (undo-tree-id2419 . -2) (707 . 708) (705 . 707)) nil (26028 46047 978746 202000) 0 nil])
([nil nil ((720 . 721) (715 . 720) (708 . 715) (#("ui" 0 2 (fontified nil)) . 708) (708 . 710) (#("uint8_t" 0 7 (fontified nil)) . -708) (708 . 715) (#("uint8" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t)) . -708) (undo-tree-id2358 . -5) (undo-tree-id2359 . -5) (undo-tree-id2360 . -5) (undo-tree-id2361 . -5) 713 (712 . 713) (#("_" 0 1 (fontified t)) . -712) (undo-tree-id2362 . -1) (undo-tree-id2363 . -1) 713 (708 . 713) (706 . 708)) nil (26028 46047 978466 445000) 0 nil])
([nil nil ((#("    
" 0 4 (fontified t) 4 5 (fontified t)) . 797) (undo-tree-id2561 . -4) (undo-tree-id2562 . -3) 800 (t 26028 46048 26294 697000)) nil (26028 46121 399851 244000) 0 nil])
([nil nil ((#("    
" 0 4 (fontified t) 4 5 (fontified t)) . 792) (undo-tree-id2559 . -4) (undo-tree-id2560 . -5)) nil (26028 46121 399845 754000) 0 nil])
([nil nil ((#("    
" 0 4 (fontified t) 4 5 (fontified t)) . 744) (undo-tree-id2557 . -4) (undo-tree-id2558 . -5)) nil (26028 46121 399840 671000) 0 nil])
([nil nil ((787 . 791)) nil (26028 46121 399835 787000) 0 nil])
([nil nil ((933 . 935) (#(" " 0 1 (fontified nil)) . -933) (undo-tree-id2556 . -1) (#(" " 0 1 (fontified t)) . 934)) nil (26028 46121 399833 213000) 0 nil])
([nil nil ((822 . 830) (#("ui" 0 2 (fontified nil)) . 822) (822 . 824) (#("uint32_t" 0 8 (fontified nil)) . -822) (822 . 830) (#("uint32" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t)) . -822) (undo-tree-id2548 . -5) (undo-tree-id2549 . -6) (undo-tree-id2550 . -6) 828 (826 . 828) (822 . 826) (822 . 823) (#("uint32_t data" 0 8 (fontified nil face font-lock-type-face) 8 9 (fontified nil) 9 13 (fontified nil face font-lock-variable-name-face)) . 822) (821 . 822) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 821 836 nil nil nil t nil)) nil 9 nil #s(yas--field 1 821 836 nil nil nil t nil) nil nil)) (792 . 835) (#("multicore_fifo_push_blocking(${1:uint32_t data})" 0 48 (fontified nil)) . 792) (792 . 840) (#("mu" 0 2 (fontified nil)) . 792) (792 . 794) (#("multicore_fifo_push_blocking(uint32_t data)" 0 43 (fontified nil)) . -792) (792 . 835) (#("mul" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -792) (undo-tree-id2551 . -3) (undo-tree-id2552 . -3) 795 (792 . 795) (788 . 792) (#("    " 0 4 (fontified nil)) . 787) (undo-tree-id2553 . -4) (undo-tree-id2554 . -4) (791 . 792) (787 . 791) (#(" " 0 1 (fontified nil)) . -787) (undo-tree-id2555 . -1) (#("   " 0 3 (fontified t)) . 788)) nil (26028 46121 399823 78000) 0 nil])
([nil nil ((831 . 836)) nil (26028 46121 399800 354000) 0 nil])
([nil nil ((837 . 838) (apply yas--snippet-revive 792 837 #s(yas--snippet nil (#s(yas--field 1 821 836 nil nil nil t nil)) nil 9 nil #s(yas--field 1 821 836 nil nil nil t nil) nil nil))) nil (26028 46121 399798 617000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -840) (undo-tree-id2544 . -4) (undo-tree-id2545 . -4) 844 (840 . 844) (#("    " 0 4 (fontified nil)) . 839) (undo-tree-id2546 . -4) (undo-tree-id2547 . -4) (838 . 844)) nil (26028 46121 399795 228000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 840) (undo-tree-id2543 . 1)) nil (26028 46121 399785 893000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 839)) nil (26028 46121 399781 696000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -840) (undo-tree-id2539 . -4) (undo-tree-id2540 . -4) 844 (840 . 844) (#("    " 0 4 (fontified nil)) . 839) (undo-tree-id2541 . -4) (undo-tree-id2542 . -4) (838 . 844)) nil (26028 46121 399778 555000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 840) (undo-tree-id2538 . 1)) nil (26028 46121 399768 760000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 839) (undo-tree-id2537 . -1)) nil (26028 46121 399765 358000) 0 nil])
([nil nil ((#("    
" 0 4 (fontified t) 4 5 (fontified t)) . 739) (undo-tree-id2536 . -4)) nil (26028 46121 399762 31000) 0 nil])
([nil nil ((#("    
" 0 4 (fontified t) 4 5 (fontified t)) . 834) (undo-tree-id2531 . 5) (undo-tree-id2532 . -4) (undo-tree-id2533 . -3) (undo-tree-id2534 . 1) (undo-tree-id2535 . -3)) nil (26028 46121 399757 580000) 0 nil])
([nil nil ((849 . 850) (#("uint32_t ms" 0 8 (fontified nil face font-lock-type-face) 8 9 (fontified nil) 9 11 (fontified nil face font-lock-variable-name-face)) . 849) (undo-tree-id2522 . -11) (undo-tree-id2523 . -8) (848 . 849) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 848 850 nil nil nil t nil)) nil 10 nil #s(yas--field 1 848 850 nil nil nil t nil) nil nil)) (839 . 860) (#("sleep_ms(${1:uint32_t ms})" 0 26 (fontified nil)) . 839) (839 . 865) (#("sl" 0 2 (fontified nil)) . 839) (839 . 841) (#("sleep_ms(uint32_t ms)" 0 21 (fontified nil)) . -839) (839 . 860) (#("sleep" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t)) . -839) (undo-tree-id2524 . -3) (undo-tree-id2525 . -5) (undo-tree-id2526 . -5) 844 (839 . 844) (#("e" 0 1 (fontified t)) . -839) (undo-tree-id2527 . -1) (undo-tree-id2528 . -1) 840 (839 . 840) (835 . 839) (#("    " 0 4 (fontified nil)) . 834) (undo-tree-id2529 . -4) (undo-tree-id2530 . -4) (833 . 839)) nil (26028 46121 399740 588000) 0 nil])
([nil nil ((851 . 852) (apply yas--snippet-revive 839 851 #s(yas--snippet nil (#s(yas--field 1 848 850 nil nil nil t nil)) nil 10 nil #s(yas--field 1 848 850 nil nil nil t nil) nil nil))) nil (26028 46121 399692 94000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 992) (t 26028 46121 421628 696000)) nil (26028 46208 960289 958000) 0 nil])
([nil nil ((#("  
" 0 2 (fontified t) 2 3 (fontified t)) . 989) (undo-tree-id2597 . -2)) nil (26028 46208 960287 629000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 989)) nil (26028 46208 960283 947000) 0 nil])
([nil nil ((1105 . 1111) (1102 . 1105) (1099 . 1102) (#("uint num" 0 4 (fontified nil face font-lock-type-face) 4 5 (fontified nil) 5 8 (fontified nil face font-lock-variable-name-face)) . 1099) (undo-tree-id2588 . -8) (1098 . 1099) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1098 1111 nil nil nil t #s(yas--field 2 1113 1140 nil nil nil t nil)) #s(yas--field 2 1113 1140 nil nil nil t nil)) nil 11 nil #s(yas--field 2 1113 1140 nil nil nil t nil) nil nil)) (1072 . 1130) (#("irq_set_exclusive_handler(${1:uint num}, ${2:irq_handler_t handler})" 0 68 (fontified nil)) . 1072) (1072 . 1140) (#("ir" 0 2 (fontified nil)) . 1072) (1072 . 1074) (#("irq_set_exclusive_handler(uint num, irq_handler_t handler)" 0 58 (fontified nil)) . -1072) (1072 . 1130) (#("irq_set_" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t)) . -1072) (undo-tree-id2589 . -7) (undo-tree-id2590 . -8) (undo-tree-id2591 . -8) 1080 (1079 . 1080) (#("e" 0 1 (fontified t)) . -1079) (undo-tree-id2592 . -1) (undo-tree-id2593 . -1) 1080 (1079 . 1080) (1074 . 1079) (#("2" 0 1 (fontified t)) . -1074) (undo-tree-id2594 . -1) (undo-tree-id2595 . -1) (undo-tree-id2596 . -1) 1075 (1074 . 1075) (1072 . 1074) (1070 . 1072)) nil (26028 46208 960276 699000) 0 nil])
([nil nil ((#("(" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -1136) (undo-tree-id2570 . -1) (undo-tree-id2571 . -1) (undo-tree-id2572 . -1) (undo-tree-id2573 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . 1137) (undo-tree-id2574 . 1) (undo-tree-id2575 . -1) (undo-tree-id2576 . 1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -1137) (undo-tree-id2577 . -1) (undo-tree-id2578 . -1) (undo-tree-id2579 . -1) 1138 (apply yas--snippet-revive 1113 1138 #s(yas--snippet nil nil nil 12 nil nil #s(yas--field 2 1113 1140 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 12 nil nil #s(yas--field 2 1113 1140 nil nil nil t nil) nil)) (1113 . 1138) (#("core1_interrupt_handler()" 0 25 (fontified nil)) . 1113) (undo-tree-id2580 . -25) (1113 . 1138) (#("co" 0 2 (fontified nil)) . 1113) (undo-tree-id2581 . -2) (1113 . 1115) (#("core1_interrupt_handler()" 0 25 (fontified nil)) . -1113) (undo-tree-id2582 . -25) (1113 . 1138) (#("core" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -1113) (undo-tree-id2583 . -2) (undo-tree-id2584 . -4) (undo-tree-id2585 . -4) (undo-tree-id2586 . -4) 1117 (1114 . 1117) (#("irq_handler_t handler" 0 13 (fontified nil face font-lock-type-face) 13 14 (fontified nil) 14 21 (fontified nil face font-lock-variable-name-face)) . 1114) (undo-tree-id2587 . -21) (1113 . 1114)) nil (26028 46208 960247 848000) 0 nil])
([nil nil ((1137 . 1138) (1136 . 1137) (#(")" 0 1 (fontified nil)) . -1136) (undo-tree-id2568 . -1) (undo-tree-id2569 . 1) (1136 . 1137)) nil (26028 46208 960210 998000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -1140) (undo-tree-id2563 . -2) (undo-tree-id2564 . -2) (undo-tree-id2565 . -2) 1142 (1140 . 1142) (#("  " 0 2 (fontified nil)) . 1139) (undo-tree-id2566 . -2) (undo-tree-id2567 . -2) (1138 . 1142)) nil (26028 46208 960196 261000) 0 nil])
([nil nil ((apply yas--snippet-revive 1072 1140 #s(yas--snippet nil (#s(yas--field 1 1098 1111 nil nil nil t #s(yas--field 2 1113 1140 nil nil nil t nil)) #s(yas--field 2 1113 1140 nil nil nil t nil)) nil 11 nil #s(yas--field 2 1113 1140 nil nil nil t nil) nil nil))) nil (26028 46371 307399 622000) 0 nil])
([nil nil ((1140 . 1142) (t 26028 46209 8043 699000)) nil (26028 46371 307397 815000) 0 nil])
([nil nil ((1139 . 1141)) nil (26028 46371 307395 792000) 0 nil])
([nil nil ((#("  
" 0 2 (fontified t) 2 3 (fontified t)) . 1139) (undo-tree-id2809 . -2) (undo-tree-id2810 . -1) 1140) nil (26028 46371 307393 520000) 0 nil])
([nil nil ((#("  
" 0 2 (fontified t) 2 3 (fontified t)) . 1139) (undo-tree-id2805 . 1) (undo-tree-id2806 . -2) (undo-tree-id2807 . -1) (undo-tree-id2808 . -1) 1140) nil (26028 46371 307387 317000) 0 nil])
([nil nil ((#("  
" 0 2 (fontified t) 2 3 (fontified t)) . 1139) (undo-tree-id2798 . 3) (undo-tree-id2799 . -2) (undo-tree-id2800 . -3) (undo-tree-id2801 . -3) (undo-tree-id2802 . -3) (undo-tree-id2803 . -1) (undo-tree-id2804 . -1) 1140) nil (26028 46371 307377 888000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -1140) (undo-tree-id2794 . -2) (undo-tree-id2795 . -2) 1142 (1140 . 1142) (#("  " 0 2 (fontified nil)) . 1139) (undo-tree-id2796 . -2) (undo-tree-id2797 . -2) (1138 . 1142)) nil (26028 46371 307364 73000) 0 nil])
([nil nil ((1141 . 1143) (#("  " 0 2 (fontified nil)) . 1140) (undo-tree-id2790 . -2) (undo-tree-id2791 . -2) (1140 . 1143) (#("  " 0 2 (fontified nil)) . 1139) (undo-tree-id2792 . -2) (undo-tree-id2793 . -2) (1141 . 1142) (1139 . 1141)) nil (26028 46371 307258 870000) 0 nil])
([nil nil ((1169 . 1170) (apply yas--snippet-revive 1143 1169 #s(yas--snippet nil nil nil 13 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 13 nil nil nil nil)) (1143 . 1169) (#("multicore_fifo_clear_irq()" 0 26 (fontified nil)) . 1143) (1143 . 1169) (#("mu" 0 2 (fontified nil)) . 1143) (1143 . 1145) (#("multicore_fifo_clear_irq()" 0 26 (fontified nil)) . -1143) (1143 . 1169) (#("multicore_fi" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t)) . -1143) (undo-tree-id2785 . -11) (undo-tree-id2786 . -12) (undo-tree-id2787 . -12) 1155 (1148 . 1155) (1143 . 1148) (1141 . 1143) (#(" " 0 1 (fontified nil)) . -1141) (undo-tree-id2788 . -1) (undo-tree-id2789 . -1) (#(" " 0 1 (fontified t)) . 1142)) nil (26028 46371 307246 510000) 0 nil])
([nil nil ((1170 . 1173)) nil (26028 46371 307231 313000) 0 nil])
([nil nil ((#("  irq_set_exclusive_handler(SIO_IRQ_PROC1, core1_interrupt_handler);
" 0 2 (fontified t) 2 27 (fontified t) 27 28 (fontified t face (rainbow-delimiters-depth-2-face)) 28 29 (fontified t) 29 30 (fontified t) 30 31 (fontified t) 31 32 (fontified t) 32 33 (fontified t) 33 34 (fontified t) 34 35 (fontified t) 35 36 (fontified t) 36 37 (fontified t) 37 38 (fontified t) 38 39 (fontified t) 39 40 (fontified t) 40 41 (fontified t) 41 42 (fontified t) 42 43 (fontified t) 43 66 (fontified t) 66 67 (fontified t face (rainbow-delimiters-depth-2-face)) 67 68 (fontified t) 68 69 (fontified t)) . 1070) (undo-tree-id2755 . -68) (undo-tree-id2756 . -28) (undo-tree-id2757 . -1) (undo-tree-id2758 . -69) (undo-tree-id2759 . -69) (undo-tree-id2760 . -69) (undo-tree-id2761 . -69) (undo-tree-id2762 . -69) (undo-tree-id2763 . -1) (undo-tree-id2764 . -1) (undo-tree-id2765 . -1) (undo-tree-id2766 . -1) (undo-tree-id2767 . -1) (undo-tree-id2768 . -1) (undo-tree-id2769 . -1) (undo-tree-id2770 . -1) (undo-tree-id2771 . -1) (undo-tree-id2772 . -1) (undo-tree-id2773 . -1) (undo-tree-id2774 . -1) (undo-tree-id2775 . -1) (undo-tree-id2776 . -1) (undo-tree-id2777 . -1) (undo-tree-id2778 . -1) (undo-tree-id2779 . -1) (undo-tree-id2780 . -1) (undo-tree-id2781 . -1) (undo-tree-id2782 . -1) (undo-tree-id2783 . -1) (undo-tree-id2784 . -69) 1071) nil (26028 46371 307226 233000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -1106) (undo-tree-id2675 . -2) (undo-tree-id2676 . -2) (undo-tree-id2677 . -2) (undo-tree-id2678 . -2) (undo-tree-id2679 . -2) (undo-tree-id2680 . -2) (undo-tree-id2681 . -2) (undo-tree-id2682 . -2) (undo-tree-id2683 . -2) (undo-tree-id2684 . -2) (undo-tree-id2685 . -2) (undo-tree-id2686 . -2) (undo-tree-id2687 . -2) (undo-tree-id2688 . -2) (undo-tree-id2689 . -2) (undo-tree-id2690 . -2) (undo-tree-id2691 . -2) (undo-tree-id2692 . -2) (undo-tree-id2693 . -2) (undo-tree-id2694 . -2) (undo-tree-id2695 . -2) (undo-tree-id2696 . -2) (undo-tree-id2697 . -2) (undo-tree-id2698 . -2) (undo-tree-id2699 . -2) (undo-tree-id2700 . -2) (undo-tree-id2701 . -2) (undo-tree-id2702 . -2) (undo-tree-id2703 . -2) (undo-tree-id2704 . -2) (undo-tree-id2705 . -2) (undo-tree-id2706 . -2) (undo-tree-id2707 . -2) (undo-tree-id2708 . -2) (undo-tree-id2709 . -2) (undo-tree-id2710 . -2) (undo-tree-id2711 . -2) (undo-tree-id2712 . -2) (undo-tree-id2713 . -2) (undo-tree-id2714 . -2) (undo-tree-id2715 . -2) (undo-tree-id2716 . -2) (undo-tree-id2717 . -2) (undo-tree-id2718 . -2) (undo-tree-id2719 . -2) (undo-tree-id2720 . -2) (undo-tree-id2721 . -2) (undo-tree-id2722 . -2) (undo-tree-id2723 . -2) (undo-tree-id2724 . -2) (undo-tree-id2725 . -2) (undo-tree-id2726 . -2) (undo-tree-id2727 . -2) (undo-tree-id2728 . -2) (undo-tree-id2729 . -2) (undo-tree-id2730 . -2) (undo-tree-id2731 . -2) (undo-tree-id2732 . -2) (undo-tree-id2733 . -2) (undo-tree-id2734 . -2) (undo-tree-id2735 . -2) (undo-tree-id2736 . -2) (undo-tree-id2737 . -2) (undo-tree-id2738 . -2) (undo-tree-id2739 . -2) (undo-tree-id2740 . -2) (undo-tree-id2741 . -2) (undo-tree-id2742 . -2) (undo-tree-id2743 . -2) (undo-tree-id2744 . -2) (undo-tree-id2745 . -2) (undo-tree-id2746 . -2) (undo-tree-id2747 . -2) (undo-tree-id2748 . -2) (undo-tree-id2749 . -2) (undo-tree-id2750 . -2) (undo-tree-id2751 . -2) (undo-tree-id2752 . -2) (undo-tree-id2753 . -2) (undo-tree-id2754 . -2) 1108 (1105 . 1108) 1105) nil (26028 46371 307169 292000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1108 . 1109) (#("
" 0 1 (fontified nil)) . -1175) (1106 . 1176)) nil (26028 46371 307038 481000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -1237) (undo-tree-id2598 . -1) (undo-tree-id2599 . -1) (undo-tree-id2600 . -1) (undo-tree-id2601 . -1) (undo-tree-id2602 . -1) (undo-tree-id2603 . -1) (undo-tree-id2604 . -1) (undo-tree-id2605 . -1) (undo-tree-id2606 . -1) (undo-tree-id2607 . -1) (undo-tree-id2608 . -1) (undo-tree-id2609 . -1) (undo-tree-id2610 . -1) (undo-tree-id2611 . -1) (undo-tree-id2612 . -1) (undo-tree-id2613 . -1) (undo-tree-id2614 . -1) (undo-tree-id2615 . -1) (undo-tree-id2616 . -1) (undo-tree-id2617 . -1) (undo-tree-id2618 . -1) (undo-tree-id2619 . -1) (undo-tree-id2620 . -1) (undo-tree-id2621 . -1) (undo-tree-id2622 . -1) (undo-tree-id2623 . -1) (undo-tree-id2624 . -1) (undo-tree-id2625 . -1) (undo-tree-id2626 . -1) (undo-tree-id2627 . -1) (undo-tree-id2628 . -1) (undo-tree-id2629 . -1) (undo-tree-id2630 . -1) (undo-tree-id2631 . -1) (undo-tree-id2632 . -1) (undo-tree-id2633 . -1) (undo-tree-id2634 . -1) (undo-tree-id2635 . -1) (undo-tree-id2636 . -1) (undo-tree-id2637 . -1) (undo-tree-id2638 . -1) (undo-tree-id2639 . -1) (undo-tree-id2640 . -1) (undo-tree-id2641 . -1) (undo-tree-id2642 . -1) (undo-tree-id2643 . -1) (undo-tree-id2644 . -1) (undo-tree-id2645 . -1) (undo-tree-id2646 . -1) (undo-tree-id2647 . -1) (undo-tree-id2648 . -1) (undo-tree-id2649 . -1) (undo-tree-id2650 . -1) (undo-tree-id2651 . -1) (undo-tree-id2652 . -1) (undo-tree-id2653 . -1) (undo-tree-id2654 . -1) (undo-tree-id2655 . -1) (undo-tree-id2656 . -1) (undo-tree-id2657 . -1) (undo-tree-id2658 . -1) (undo-tree-id2659 . -1) (undo-tree-id2660 . -1) (undo-tree-id2661 . -1) 1238 (1237 . 1238) (1236 . 1237) (apply yas--snippet-revive 1200 1236 #s(yas--snippet nil (#s(yas--field 1 1216 1229 nil nil nil t #s(yas--field 2 1231 1235 nil nil nil t nil)) #s(yas--field 2 1231 1235 nil nil nil t nil)) nil 14 nil #s(yas--field 2 1231 1235 nil nil nil t nil) nil nil)) (1 . 22) (1210 . 1214) (#("true" 0 4 (fontified nil)) . 1210) (1210 . 1214) (#("true" 0 1 (fontified t face font-lock-constant-face) 1 2 (fontified t face font-lock-constant-face) 2 3 (fontified t face font-lock-constant-face) 3 4 (fontified t face font-lock-constant-face)) . -1210) (undo-tree-id2662 . -1) (undo-tree-id2663 . -4) (undo-tree-id2664 . -4) 1214 (1211 . 1214) (#("bool enabled" 0 4 (fontified nil face font-lock-type-face) 4 5 (fontified nil) 5 12 (fontified nil face font-lock-variable-name-face)) . 1211) (1210 . 1211) (1195 . 1208) (#("SIO_" 0 4 (fontified nil)) . 1195) (1195 . 1199) (#("SIO_IRQ_PROC1" 0 13 (fontified nil)) . -1195) (1195 . 1208) (#("SIO_" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -1195) (undo-tree-id2665 . -4) (undo-tree-id2666 . -4) 1199 (1196 . 1199) (#("uint num" 0 4 (fontified nil face font-lock-type-face) 4 5 (fontified nil) 5 8 (fontified nil face font-lock-variable-name-face)) . 1196) (1195 . 1196) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1216 1229 nil nil nil t #s(yas--field 2 1231 1235 nil nil nil t nil)) #s(yas--field 2 1231 1235 nil nil nil t nil)) nil 14 nil #s(yas--field 2 1231 1235 nil nil nil t nil) nil nil)) (1179 . 1218) (#("irq_set_enabled(${1:uint num}, ${2:bool enabled})" 0 49 (fontified nil)) . 1179) (1179 . 1228) (#("ir" 0 2 (fontified nil)) . 1179) (1179 . 1181) (#("irq_set_enabled(uint num, bool enabled)" 0 39 (fontified nil)) . -1179) (1179 . 1218) (#("irq_set_ena" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t) 10 11 (fontified t)) . -1179) (undo-tree-id2667 . -7) (undo-tree-id2668 . -11) (undo-tree-id2669 . -11) 1190 (1188 . 1190) (1187 . 1188) (1186 . 1187) (1181 . 1186) (#("2" 0 1 (fontified t)) . -1181) (undo-tree-id2670 . -1) (undo-tree-id2671 . -1) (undo-tree-id2672 . -1) 1182 (1181 . 1182) (1179 . 1181) (1177 . 1179) (#("  " 0 2 (fontified nil)) . 1176) (undo-tree-id2673 . -2) (undo-tree-id2674 . -2) (1175 . 1179)) nil (26028 46371 307014 262000) 0 nil])
([nil nil ((1228 . 1229) (#("1" 0 1 (fontified t)) . 1228) (t 26028 46371 356919 103000)) nil (26028 46385 426957 897000) 0 nil])
([nil nil ((1228 . 1229) (#("2" 0 1 (fontified t)) . 1228) (undo-tree-id2811 . -1) (1228 . 1229) (#("0" 0 1 (fontified t)) . 1228)) nil (26028 46385 426947 50000) 0 nil])
([nil nil ((apply yas--snippet-revive 925 948 #s(yas--snippet nil nil nil 15 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 15 nil nil nil nil)) (925 . 948) (#("multicore_fifo_rvalid()" 0 23 (fontified nil)) . 925) (925 . 948) (#("mul" 0 3 (fontified nil)) . 925) (925 . 928) (#("multicore_fifo_rvalid()" 0 23 (fontified nil)) . -925) (925 . 948) (#("multicore_fifo_r" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t) 12 13 (fontified t) 13 14 (fontified t) 14 15 (fontified t) 15 16 (fontified t)) . -925) (undo-tree-id2926 . -11) (undo-tree-id2927 . -16) (undo-tree-id2928 . -16) 941 (927 . 941) (925 . 927) (924 . 926) (923 . 924) (#(" x" 0 2 (fontified nil)) . -923) (923 . 925) (#("while" 0 1 (fontified nil face font-lock-keyword-face) 1 2 (fontified nil face font-lock-keyword-face) 2 3 (fontified nil face font-lock-keyword-face) 3 4 (fontified nil face font-lock-keyword-face) 4 5 (fontified nil face font-lock-keyword-face)) . 923) (undo-tree-id2929 . -1) (undo-tree-id2930 . -5) (undo-tree-id2931 . -5) (918 . 923) 923 (921 . 923) (920 . 921) (918 . 920) (916 . 918) (#(" " 0 1 (fontified nil)) . -916) (undo-tree-id2932 . -1) (undo-tree-id2933 . -1) (#(" " 0 1 (fontified t)) . 917) (t 26028 46385 451775 775000)) nil (26028 46576 687382 134000) 0 nil])
([nil nil ((952 . 956) (951 . 955) (950 . 952) (949 . 950)) nil (26028 46576 687354 872000) 0 nil])
([nil nil ((1000 . 1001) (apply yas--snippet-revive 971 1000 #s(yas--snippet nil nil nil 16 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 16 nil nil nil nil)) (971 . 1000) (#("multicore_fifo_pop_blocking()" 0 29 (fontified nil)) . 971) (971 . 1000) (#("mul" 0 3 (fontified nil)) . 971) (971 . 974) (#("multicore_fifo_pop_blocking()" 0 29 (fontified nil)) . -971) (971 . 1000) (#("mul" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -971) (undo-tree-id2900 . -3) (undo-tree-id2901 . -3) 974 (973 . 974) (971 . 973) (969 . 971) (#("-" 0 1 (fontified t)) . -969) (undo-tree-id2902 . -1) (undo-tree-id2903 . -1) 970 (969 . 970) (#(" " 0 1 (fontified t)) . -969) (undo-tree-id2904 . -1) (undo-tree-id2905 . -1) (#("-" 0 1 (fontified t)) . -970) (undo-tree-id2906 . -1) (undo-tree-id2907 . -1) (#("=" 0 1 (fontified t)) . -971) (undo-tree-id2908 . -1) (undo-tree-id2909 . -1) 972 (967 . 972) (#("t" 0 1 (fontified t face font-lock-variable-name-face)) . -967) (undo-tree-id2910 . -1) (undo-tree-id2911 . -1) 968 (965 . 968) (#("b" 0 1 (fontified t face font-lock-variable-name-face)) . -965) (undo-tree-id2912 . -1) (undo-tree-id2913 . -1) (#("l" 0 1 (fontified t face font-lock-variable-name-face)) . -966) (undo-tree-id2914 . -1) (undo-tree-id2915 . -1) (#("o" 0 1 (fontified t face font-lock-variable-name-face)) . -967) (undo-tree-id2916 . -1) (undo-tree-id2917 . -1) (#("c" 0 1 (fontified t face font-lock-variable-name-face)) . -968) (undo-tree-id2918 . -1) (undo-tree-id2919 . -1) (#("k" 0 1 (fontified t face font-lock-variable-name-face)) . -969) (undo-tree-id2920 . -1) (undo-tree-id2921 . -1) 970 (964 . 970) (956 . 964) (#("uin" 0 3 (fontified nil)) . 956) (956 . 959) (#("uint32_t" 0 8 (fontified nil)) . -956) (956 . 964) (#("uint" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -956) (undo-tree-id2922 . -4) (undo-tree-id2923 . -4) 960 (959 . 960) (956 . 959) (952 . 956) (#("   " 0 3 (fontified nil)) . -952) (undo-tree-id2924 . -3) (undo-tree-id2925 . -3) (#(" " 0 1 (fontified t)) . 955)) nil (26028 46576 687340 481000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1003) (undo-tree-id2897 . -4) 1007 (1003 . 1007) (#("    " 0 4 (fontified nil)) . 1002) (undo-tree-id2898 . -4) (undo-tree-id2899 . -4) (1001 . 1007)) nil (26028 46576 687276 845000) 0 nil])
([nil nil ((1004 . 1008) (#("    " 0 4 (fontified nil)) . 1003) (undo-tree-id2893 . -4) (undo-tree-id2894 . -4) (1003 . 1008) (#("    " 0 4 (fontified nil)) . 1002) (undo-tree-id2895 . -4) (undo-tree-id2896 . -4) (1006 . 1007) (1002 . 1006)) nil (26028 46576 687266 41000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -1007) (undo-tree-id2885 . -1) (undo-tree-id2886 . -1) (#("n" 0 1 (fontified t)) . -1008) (undo-tree-id2887 . -1) (undo-tree-id2888 . -1) (#("t" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -1009) (undo-tree-id2889 . -1) (undo-tree-id2890 . -1) (#(" " 0 1 (fontified t)) . -1010) (undo-tree-id2891 . -1) (undo-tree-id2892 . -1) 1011 (1007 . 1011) (1003 . 1007)) nil (26028 46576 687252 178000) 0 nil])
([nil nil ((1003 . 1007) (#("   " 0 3 (fontified nil)) . -1003) (undo-tree-id2882 . -3) (undo-tree-id2883 . -3) (#(" " 0 1 (fontified t)) . 1006) (undo-tree-id2884 . -1)) nil (26028 46576 687234 375000) 0 nil])
([nil nil ((1003 . 1007) (#("   " 0 3 (fontified nil)) . -1003) (undo-tree-id2880 . -3) (undo-tree-id2881 . -3) (#(" " 0 1 (fontified t)) . 1006)) nil (26028 46576 687226 121000) 0 nil])
([nil nil ((1003 . 1007) (#("   " 0 3 (fontified nil)) . -1003) (undo-tree-id2878 . -3) (undo-tree-id2879 . -3) (#(" " 0 1 (fontified t)) . 1006)) nil (26028 46576 687220 171000) 0 nil])
([nil nil ((1003 . 1007) (#("   " 0 3 (fontified nil)) . -1003) (undo-tree-id2875 . -3) (undo-tree-id2876 . -3) (#(" " 0 1 (fontified t)) . 1006) (undo-tree-id2877 . -1)) nil (26028 46576 687213 659000) 0 nil])
([nil nil ((1003 . 1007) (#("   " 0 3 (fontified nil)) . -1003) (undo-tree-id2872 . -3) (undo-tree-id2873 . -3) (#(" " 0 1 (fontified t)) . 1006) (undo-tree-id2874 . -1)) nil (26028 46576 687205 607000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1013)) nil (26028 46576 687194 141000) 0 nil])
([nil nil ((#("    
" 0 4 (fontified t) 4 5 (fontified t)) . 1008) (undo-tree-id2871 . -4)) nil (26028 46576 687191 724000) 0 nil])
([nil nil ((1023 . 1030) (#("uin" 0 3 (fontified nil)) . 1023) (1023 . 1026) (#("uint8_t" 0 7 (fontified nil)) . -1023) (1023 . 1030) (#("uin" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -1023) (undo-tree-id2862 . -3) (undo-tree-id2863 . -3) 1026 (1023 . 1026) (1022 . 1024) (1014 . 1022) (1007 . 1014) (#("ui" 0 2 (fontified nil)) . 1007) (1007 . 1009) (#("uint8_t" 0 7 (fontified nil)) . -1007) (1007 . 1014) (#("uint8" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t)) . -1007) (undo-tree-id2864 . -5) (undo-tree-id2865 . -5) (undo-tree-id2866 . -5) 1012 (1011 . 1012) (#(" " 0 1 (fontified t)) . -1011) (undo-tree-id2867 . -1) (undo-tree-id2868 . -1) 1012 (1007 . 1012) (1003 . 1007) (#("    " 0 4 (fontified nil)) . 1002) (undo-tree-id2869 . -4) (undo-tree-id2870 . -4) (1006 . 1007) (1002 . 1006)) nil (26028 46576 687182 809000) 0 nil])
([nil nil ((1035 . 1036) (1033 . 1035) (1031 . 1033)) nil (26028 46576 687153 843000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1039) (undo-tree-id2856 . -4) (undo-tree-id2857 . -4) 1043 (1039 . 1043) (#("    " 0 4 (fontified nil)) . 1038) (undo-tree-id2858 . -4) (undo-tree-id2859 . -4) (1038 . 1043) (#("    " 0 4 (fontified nil)) . 1037) (undo-tree-id2860 . -4) (undo-tree-id2861 . -4) (1036 . 1042)) nil (26028 46576 687148 356000) 0 nil])
([nil nil ((1038 . 1042)) nil (26028 46576 687134 842000) 0 nil])
([nil nil ((1039 . 1043) (#("    " 0 4 (fontified nil)) . 1038) (undo-tree-id2852 . -4) (undo-tree-id2853 . -4) (1038 . 1043) (#("    " 0 4 (fontified nil)) . 1037) (undo-tree-id2854 . -4) (undo-tree-id2855 . -4) (1041 . 1042) (1037 . 1041)) nil (26028 46576 687130 835000) 0 nil])
([nil nil ((1062 . 1063) (apply yas--snippet-revive 1042 1062 #s(yas--snippet nil (#s(yas--field 1 1051 1058 nil nil nil t #s(yas--field 2 1060 1061 nil nil nil t nil)) #s(yas--field 2 1060 1061 nil nil nil t nil)) nil 17 nil #s(yas--field 2 1060 1061 nil nil nil t nil) nil nil)) (1060 . 1061) (#("t" 0 1 (fontified t)) . -1060) (undo-tree-id2845 . -1) (undo-tree-id2846 . -1) (undo-tree-id2847 . -1) 1061 (#("bool value" 0 4 (fontified nil face font-lock-type-face) 4 5 (fontified nil) 5 10 (fontified nil face font-lock-variable-name-face)) . 1061) (1060 . 1061) (1051 . 1058) (#("L" 0 1 (fontified nil)) . 1051) (1051 . 1052) (#("LED_PIN" 0 7 (fontified nil)) . -1051) (1051 . 1058) (#("LE" 0 1 (fontified t) 1 2 (fontified t)) . -1051) (undo-tree-id2848 . -2) (undo-tree-id2849 . -2) 1053 (1052 . 1053) (#("uint gpio" 0 4 (fontified nil face font-lock-type-face) 4 5 (fontified nil) 5 9 (fontified nil face font-lock-variable-name-face)) . 1052) (1051 . 1052) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1051 1058 nil nil nil t #s(yas--field 2 1060 1061 nil nil nil t nil)) #s(yas--field 2 1060 1061 nil nil nil t nil)) nil 17 nil #s(yas--field 2 1060 1061 nil nil nil t nil) nil nil)) (1042 . 1073) (#("gpio_put(${1:uint gpio}, ${2:bool value})" 0 41 (fontified nil)) . 1042) (1042 . 1083) (#("gp" 0 2 (fontified nil)) . 1042) (1042 . 1044) (#("gpio_put(uint gpio, bool value)" 0 31 (fontified nil)) . -1042) (1042 . 1073) (#("gpio_pu" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t)) . -1042) (undo-tree-id2850 . -7) (undo-tree-id2851 . -7) 1049 (1042 . 1049) (1038 . 1042)) nil (26028 46576 687113 816000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1065) (undo-tree-id2841 . -4) (undo-tree-id2842 . -4) 1069 (1065 . 1069) (#("    " 0 4 (fontified nil)) . 1064) (undo-tree-id2843 . -4) (undo-tree-id2844 . -4) (1063 . 1069)) nil (26028 46576 687088 834000) 0 nil])
([nil nil ((#("put" 0 3 (fontified t)) . 1047) (undo-tree-id2840 . -2)) nil (26028 46576 687078 40000) 0 nil])
([nil nil ((1047 . 1048)) nil (26028 46576 687074 45000) 0 nil])
([nil nil ((#("    gpio_t(LED_PIN, 1);
" 0 4 (fontified t) 4 9 (fontified t) 9 10 (fontified t) 10 11 (fontified t face (rainbow-delimiters-depth-3-face)) 11 18 (fontified t) 18 19 (fontified t) 19 20 (fontified t) 20 21 (fontified t) 21 22 (fontified t face (rainbow-delimiters-depth-3-face)) 22 23 (fontified t) 23 24 (fontified t)) . 1038) (undo-tree-id2835 . -22) (undo-tree-id2836 . 14) (undo-tree-id2837 . -23) (undo-tree-id2838 . -10) (undo-tree-id2839 . -9) 1047) nil (26028 46576 687070 271000) 0 nil])
([nil nil ((1050 . 1053) (#("l" 0 1 (fontified t)) . -1050) (undo-tree-id2831 . -1) (undo-tree-id2832 . -1) (#("e" 0 1 (fontified t)) . -1051) (undo-tree-id2833 . -1) (undo-tree-id2834 . -1) 1052 (1042 . 1052) (1038 . 1042)) nil (26028 46576 687057 929000) 0 nil])
([nil nil ((#("    gpio_toggle
" 0 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t) 12 13 (fontified t) 13 14 (fontified t) 14 15 (fontified t) 15 16 (fontified t)) . 1038) (undo-tree-id2827 . 1) (undo-tree-id2828 . -15) (undo-tree-id2829 . -15) (undo-tree-id2830 . -14) 1052) nil (26028 46576 687045 539000) 0 nil])
([nil nil ((882 . 884)) nil (26028 46576 687036 55000) 0 nil])
([nil nil ((404 . 405) (402 . 404)) nil (26028 46576 687033 727000) 0 nil])
([nil nil ((421 . 422) (413 . 421) (409 . 413) (404 . 409)) nil (26028 46576 687030 243000) 0 nil])
([nil nil ((1262 . 1263) (apply yas--snippet-revive 1234 1262 #s(yas--snippet nil (#s(yas--field 1 1243 1250 nil nil nil t #s(yas--field 2 1252 1261 nil nil nil t nil)) #s(yas--field 2 1252 1261 nil nil nil t nil)) nil 18 nil #s(yas--field 2 1252 1261 nil nil nil t nil) nil nil)) (1252 . 1261) (#("st" 0 2 (fontified nil)) . 1252) (1252 . 1254) (#("state_led" 0 9 (fontified nil)) . -1252) (1252 . 1261) (#("sta" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -1252) (undo-tree-id2814 . -3) (undo-tree-id2815 . -3) 1255 (1253 . 1255) (1252 . 1253) (#("l" 0 1 (fontified t)) . -1252) (undo-tree-id2816 . -1) (undo-tree-id2817 . -1) (#("e" 0 1 (fontified t)) . -1253) (undo-tree-id2818 . -1) (undo-tree-id2819 . -1) 1254 (1253 . 1254) (#("bool value" 0 4 (fontified nil face font-lock-type-face) 4 5 (fontified nil) 5 10 (fontified nil face font-lock-variable-name-face)) . 1253) (1252 . 1253) (1243 . 1250) (#("L" 0 1 (fontified nil)) . 1243) (1243 . 1244) (#("LED_PIN" 0 7 (fontified nil)) . -1243) (1243 . 1250) (#("LE" 0 1 (fontified t) 1 2 (fontified t)) . -1243) (undo-tree-id2820 . -2) (undo-tree-id2821 . -2) 1245 (1244 . 1245) (#("uint gpio" 0 4 (fontified nil face font-lock-type-face) 4 5 (fontified nil) 5 9 (fontified nil face font-lock-variable-name-face)) . 1244) (1243 . 1244) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1243 1250 nil nil nil t #s(yas--field 2 1252 1261 nil nil nil t nil)) #s(yas--field 2 1252 1261 nil nil nil t nil)) nil 18 nil #s(yas--field 2 1252 1261 nil nil nil t nil) nil nil)) (1234 . 1265) (#("gpio_put(${1:uint gpio}, ${2:bool value})" 0 41 (fontified nil)) . 1234) (1234 . 1275) (#("gp" 0 2 (fontified nil)) . 1234) (1234 . 1236) (#("gpio_put(uint gpio, bool value)" 0 31 (fontified nil)) . -1234) (1234 . 1265) (#("gpio_put" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t)) . -1234) (undo-tree-id2822 . -8) (undo-tree-id2823 . -8) (undo-tree-id2824 . -8) 1242 (1236 . 1242) (1235 . 1236) (1234 . 1235) (#("b" 0 1 (fontified t)) . -1234) (undo-tree-id2825 . -1) (undo-tree-id2826 . -1) 1235 (1234 . 1235) (1232 . 1234)) nil (26028 46576 687016 636000) 0 nil])
([nil nil ((#("
" 0 1 (c-in-sws t c-is-sws t fontified t)) . 86)) nil (26028 46576 686972 73000) 0 nil])
([nil nil ((#("#include <math.h>
" 0 1 (fontified t c-is-sws t c-in-sws t face font-lock-preprocessor-face) 1 8 (fontified t c-in-sws t face font-lock-preprocessor-face) 8 9 (fontified t c-in-sws t) 9 10 (category c-<-as-paren-syntax fontified t c-in-sws t face (rainbow-delimiters-depth-1-face font-lock-string-face)) 10 16 (fontified t c-in-sws t face font-lock-string-face) 16 17 (category c->-as-paren-syntax fontified t c-in-sws t face (rainbow-delimiters-depth-1-face font-lock-string-face)) 17 18 (c-in-sws t fontified t)) . 86) (undo-tree-id2812 . -17) (undo-tree-id2813 . -18)) nil (26028 46576 686961 387000) 0 nil])
([nil nil ((422 . 424) (416 . 422) (415 . 416) (412 . 415) (405 . 412) (403 . 405) (t 26028 46576 737515 829000)) nil (26028 46674 63667 400000) 0 nil])
([nil nil ((443 . 444) (442 . 443) (#(")" 0 1 (fontified nil)) . -442) (442 . 443) (433 . 442) (#("state_l" 0 7 (fontified nil)) . 433) (433 . 440) (#("state_led" 0 9 (fontified nil)) . -433) (433 . 442) (#("state_l" 0 6 (fontified t) 6 7 (fontified t)) . -433) (undo-tree-id3079 . -7) (undo-tree-id3080 . -7) 440 (439 . 440) (#("t" 0 1 (fontified t)) . -439) (undo-tree-id3081 . -1) (undo-tree-id3082 . -1) (#("o" 0 1 (fontified t)) . -440) (undo-tree-id3083 . -1) (undo-tree-id3084 . -1) (#("g" 0 1 (fontified t)) . -441) (undo-tree-id3085 . -1) (undo-tree-id3086 . -1) (#("g" 0 1 (fontified t)) . -442) (undo-tree-id3087 . -1) (undo-tree-id3088 . -1) (#("l" 0 1 (fontified t)) . -443) (undo-tree-id3089 . -1) (undo-tree-id3090 . -1) (#("e" 0 1 (fontified t)) . -444) (undo-tree-id3091 . -1) (undo-tree-id3092 . -1) 445 (#("(" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -445) (undo-tree-id3093 . -1) (undo-tree-id3094 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . 446) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -446) (undo-tree-id3095 . -1) (undo-tree-id3096 . -1) 447 (apply yas--snippet-revive 433 447 #s(yas--snippet nil nil nil 19 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 19 nil nil nil nil)) (433 . 447) (#("state_toggle()" 0 14 (fontified nil)) . 433) (433 . 447) (#("sta" 0 3 (fontified nil)) . 433) (433 . 436) (#("state_toggle()" 0 14 (fontified nil)) . -433) (433 . 447) (#("state" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t)) . -433) (undo-tree-id3097 . -5) (undo-tree-id3098 . -5) 438 (437 . 438) (433 . 437) (432 . 434) (429 . 432) (427 . 429) (426 . 428) (425 . 427) (424 . 425)) nil (26028 46674 63654 50000) 0 nil])
([nil nil ((442 . 447)) nil (26028 46674 63384 885000) 0 nil])
([nil nil ((451 . 455) (450 . 454) (449 . 451) (#(" " 0 1 (fontified t)) . -449) (undo-tree-id3077 . -1) (undo-tree-id3078 . -1) 450 (449 . 450)) nil (26028 46674 63382 243000) 0 nil])
([nil nil ((#("else" 0 4 (fontified nil face font-lock-keyword-face)) . 464) (460 . 464) 471 (467 . 471) (466 . 470) (465 . 467) (464 . 465) (#("else" 0 1 (fontified nil face font-lock-keyword-face) 1 2 (fontified nil face font-lock-keyword-face) 2 3 (fontified nil face font-lock-keyword-face) 3 4 (fontified nil face font-lock-keyword-face)) . 464) (undo-tree-id3075 . -4) (undo-tree-id3076 . -4) (460 . 464) 464 (459 . 464)) nil (26028 46674 63373 576000) 0 nil])
([nil nil ((468 . 469) (464 . 468) (455 . 464) (#("st" 0 2 (fontified nil)) . 455) (455 . 457) (#("state_led" 0 9 (fontified nil)) . -455) (455 . 464) (#("sta" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -455) (undo-tree-id3072 . -3) (undo-tree-id3073 . -3) 458 (456 . 458) (455 . 456) (451 . 455) (#("   " 0 3 (fontified nil)) . -451) (undo-tree-id3074 . -3) (#(" " 0 1 (fontified t)) . 454)) nil (26028 46674 63360 868000) 0 nil])
([nil nil ((498 . 499) (497 . 498) (494 . 497) (485 . 494) (#("st" 0 2 (fontified nil)) . 485) (485 . 487) (#("state_led" 0 9 (fontified nil)) . -485) (485 . 494) (#("sta" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -485) (undo-tree-id3069 . -3) (undo-tree-id3070 . -3) 488 (485 . 488) (481 . 485) (#("   " 0 3 (fontified nil)) . -481) (undo-tree-id3071 . -3) (#(" " 0 1 (fontified t)) . 484)) nil (26028 46674 63347 28000) 0 nil])
([nil nil ((1162 . 1163) (apply yas--snippet-revive 1148 1162 #s(yas--snippet nil nil nil 20 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 20 nil nil nil nil)) (1148 . 1162) (#("state_toggle()" 0 14 (fontified nil)) . 1148) (1148 . 1162) (#("sta" 0 3 (fontified nil)) . 1148) (1148 . 1151) (#("state_toggle()" 0 14 (fontified nil)) . -1148) (1148 . 1162) (#("sta" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -1148) (undo-tree-id3065 . -3) (undo-tree-id3066 . -3) 1151 (1148 . 1151) (1144 . 1148) (#("    " 0 4 (fontified nil)) . 1143) (undo-tree-id3067 . -4) (undo-tree-id3068 . -4) (1147 . 1148) (1143 . 1147)) nil (26028 46674 63331 438000) 0 nil])
([nil nil ((1196 . 1197) (#(")" 0 1 (fontified nil)) . -1196) (1196 . 1197) (1187 . 1196) (#("state_" 0 6 (fontified nil)) . 1187) (undo-tree-id3017 . 6) (1187 . 1193) (#("state_led" 0 9 (fontified nil)) . -1187) (undo-tree-id3018 . 9) (1187 . 1196) (#("state_l" 0 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t)) . -1187) (undo-tree-id3019 . -7) (undo-tree-id3020 . -7) (undo-tree-id3021 . 2) (undo-tree-id3022 . -5) 1194 (1192 . 1194) (#("_" 0 1 (fontified t)) . -1192) (undo-tree-id3023 . -1) (undo-tree-id3024 . -1) (undo-tree-id3025 . -1) (#("t" 0 1 (fontified t)) . -1193) (undo-tree-id3026 . -1) (undo-tree-id3027 . -1) (undo-tree-id3028 . -1) (#("o" 0 1 (fontified t)) . -1194) (undo-tree-id3029 . -1) (undo-tree-id3030 . -1) (undo-tree-id3031 . -1) (#("g" 0 1 (fontified t)) . -1195) (undo-tree-id3032 . -1) (undo-tree-id3033 . -1) (undo-tree-id3034 . -1) (#("g" 0 1 (fontified t)) . -1196) (undo-tree-id3035 . -1) (undo-tree-id3036 . -1) (undo-tree-id3037 . -1) (#("l" 0 1 (fontified t)) . -1197) (undo-tree-id3038 . -1) (undo-tree-id3039 . -1) (undo-tree-id3040 . -1) (#("e" 0 1 (fontified t)) . -1198) (undo-tree-id3041 . -1) (undo-tree-id3042 . -1) (undo-tree-id3043 . -1) 1199 (#("(" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face))) . -1199) (undo-tree-id3044 . -1) (undo-tree-id3045 . -1) (undo-tree-id3046 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . 1200) (undo-tree-id3047 . 1) (undo-tree-id3048 . -1) (undo-tree-id3049 . 1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . -1200) (undo-tree-id3050 . -1) (undo-tree-id3051 . -1) 1201 (apply yas--snippet-revive 1187 1201 #s(yas--snippet nil nil nil 22 nil nil #s(yas--field 2 1187 1198 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 22 nil nil #s(yas--field 2 1187 1198 nil nil nil t nil) nil)) (1187 . 1201) (#("state_toggle()" 0 14 (fontified nil)) . 1187) (1187 . 1201) (#("sta" 0 3 (fontified nil)) . 1187) (1187 . 1190) (#("state_toggle()" 0 14 (fontified nil)) . -1187) (1187 . 1201) (#("sta" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -1187) (undo-tree-id3052 . -3) (undo-tree-id3053 . -3) (undo-tree-id3054 . -3) 1190 (1188 . 1190) (#("bool value" 0 4 (fontified nil face font-lock-type-face) 4 5 (fontified nil) 5 10 (fontified nil face font-lock-variable-name-face)) . 1188) (1187 . 1188) (1178 . 1185) (#("LE" 0 2 (fontified nil)) . 1178) (1178 . 1180) (#("LED_PIN" 0 7 (fontified nil)) . -1178) (1178 . 1185) (#("LE" 0 1 (fontified t) 1 2 (fontified t)) . -1178) (undo-tree-id3055 . -2) (undo-tree-id3056 . -2) (undo-tree-id3057 . -2) 1180 (1179 . 1180) (#("uint gpio" 0 4 (fontified nil face font-lock-type-face) 4 5 (fontified nil) 5 9 (fontified nil face font-lock-variable-name-face)) . 1179) (1178 . 1179) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1178 1185 nil nil nil t #s(yas--field 2 1187 1198 nil nil nil t nil)) #s(yas--field 2 1187 1198 nil nil nil t nil)) nil 21 nil #s(yas--field 2 1187 1198 nil nil nil t nil) nil nil)) (1169 . 1200) (#("gpio_put(${1:uint gpio}, ${2:bool value})" 0 41 (fontified nil)) . 1169) (1169 . 1210) (#("g" 0 1 (fontified nil)) . 1169) (1169 . 1170) (#("gpio_put(uint gpio, bool value)" 0 31 (fontified nil)) . -1169) (1169 . 1200) (#("gpio_pu" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t)) . -1169) (undo-tree-id3058 . -6) (undo-tree-id3059 . -7) (undo-tree-id3060 . -7) 1176 (1175 . 1176) (#("i" 0 1 (fontified t)) . -1175) (undo-tree-id3061 . -1) (undo-tree-id3062 . -1) (undo-tree-id3063 . -1) 1176 (1169 . 1176) (1165 . 1169) (#("   " 0 3 (fontified nil)) . -1165) (undo-tree-id3064 . -3) (#(" " 0 1 (fontified t)) . 1168)) nil (26028 46674 63299 761000) 0 nil])
([nil nil ((1197 . 1198)) nil (26028 46674 63197 686000) 0 nil])
([nil nil ((apply yas--snippet-revive 1169 1198 #s(yas--snippet nil (#s(yas--field 1 1178 1185 nil nil nil t #s(yas--field 2 1187 1198 nil nil nil t nil)) #s(yas--field 2 1187 1198 nil nil nil t nil)) nil 21 nil #s(yas--field 2 1187 1198 nil nil nil t nil) nil nil))) nil (26028 46674 63195 595000) 0 nil])
([nil nil ((1201 . 1205) (#("    " 0 4 (fontified nil)) . 1200) (undo-tree-id3011 . -4) (undo-tree-id3012 . -4) (1200 . 1205) (#("    " 0 4 (fontified nil)) . 1199) (undo-tree-id3013 . -4) (undo-tree-id3014 . -4) (1203 . 1204) (1199 . 1203) (#("   " 0 3 (fontified nil)) . -1199) (undo-tree-id3015 . -3) (undo-tree-id3016 . -3) (#(" " 0 1 (fontified t)) . 1202)) nil (26028 46674 63191 558000) 0 nil])
([nil nil ((#("    
" 0 4 (fontified t) 4 5 (fontified t)) . 1201) (undo-tree-id3007 . 1) (undo-tree-id3008 . -4) (undo-tree-id3009 . -4) (undo-tree-id3010 . -3) 1204) nil (26028 46674 63176 636000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1199) (undo-tree-id3006 . -1)) nil (26028 46674 63168 399000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1199)) nil (26028 46674 63164 565000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1199) (undo-tree-id3005 . 1)) nil (26028 46674 63162 76000) 0 nil])
([nil nil ((1201 . 1205) (#("    " 0 4 (fontified nil)) . 1200) (undo-tree-id3000 . -4) (undo-tree-id3001 . -4) (1200 . 1205) (#("    " 0 4 (fontified nil)) . 1199) (undo-tree-id3002 . -4) (undo-tree-id3003 . -4) (1203 . 1204) (1199 . 1203) (#("    " 0 4 (fontified t)) . 1199) (undo-tree-id3004 . 4)) nil (26028 46674 63156 272000) 0 nil])
([nil nil ((1216 . 1217) (nil syntax-table nil 1218 . 1219) (nil syntax-table (1) 1212 . 1213) (1213 . 1216) (1213 . 1214) (nil syntax-table nil 1214 . 1215) (nil syntax-table (1) 1212 . 1213) (1212 . 1213) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -1212) (nil syntax-table nil 1214 . 1215) (nil syntax-table (1) 1212 . 1213) (1212 . 1213) (1211 . 1213) (1206 . 1211) (#("r" 0 1 (fontified t)) . -1206) (undo-tree-id2993 . -1) (undo-tree-id2994 . -1) (#("i" 0 1 (fontified t)) . -1207) (undo-tree-id2995 . -1) (undo-tree-id2996 . -1) 1208 (1205 . 1208) (1201 . 1205) (#("   " 0 3 (fontified nil)) . -1201) (undo-tree-id2997 . -3) (undo-tree-id2998 . -3) (#(" " 0 1 (fontified t)) . 1204) (undo-tree-id2999 . -1)) nil (26028 46674 63136 835000) 0 nil])
([nil nil ((1224 . 1225) (1220 . 1224) (#("da" 0 2 (fontified nil)) . 1220) (1220 . 1222) (#("data" 0 4 (fontified nil)) . -1220) (1220 . 1224) (#("da" 0 1 (fontified t) 1 2 (fontified t)) . -1220) (undo-tree-id2991 . -2) (undo-tree-id2992 . -2) 1222 (1220 . 1222) (1219 . 1220) (1218 . 1219)) nil (26028 46674 63113 474000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -1224) (undo-tree-id2934 . -1) (undo-tree-id2935 . -1) (undo-tree-id2936 . -1) (undo-tree-id2937 . -1) (undo-tree-id2938 . -1) (undo-tree-id2939 . -1) (undo-tree-id2940 . -1) (undo-tree-id2941 . -1) (undo-tree-id2942 . -1) (undo-tree-id2943 . -1) (undo-tree-id2944 . -1) (undo-tree-id2945 . -1) (undo-tree-id2946 . -1) (undo-tree-id2947 . -1) (undo-tree-id2948 . -1) (undo-tree-id2949 . -1) (undo-tree-id2950 . -1) (undo-tree-id2951 . -1) (undo-tree-id2952 . -1) (undo-tree-id2953 . -1) (undo-tree-id2954 . -1) (undo-tree-id2955 . -1) (undo-tree-id2956 . -1) (undo-tree-id2957 . -1) (undo-tree-id2958 . -1) (undo-tree-id2959 . -1) (undo-tree-id2960 . -1) (undo-tree-id2961 . -1) (undo-tree-id2962 . -1) (undo-tree-id2963 . -1) (undo-tree-id2964 . -1) (undo-tree-id2965 . -1) (undo-tree-id2966 . -1) (undo-tree-id2967 . -1) (undo-tree-id2968 . -1) (undo-tree-id2969 . -1) (undo-tree-id2970 . -1) (undo-tree-id2971 . -1) (undo-tree-id2972 . -1) (undo-tree-id2973 . -1) (undo-tree-id2974 . -1) (undo-tree-id2975 . -1) (undo-tree-id2976 . -1) (undo-tree-id2977 . -1) (undo-tree-id2978 . -1) (undo-tree-id2979 . -1) (undo-tree-id2980 . -1) (undo-tree-id2981 . -1) (undo-tree-id2982 . -1) (undo-tree-id2983 . -1) (undo-tree-id2984 . -1) (undo-tree-id2985 . -1) (undo-tree-id2986 . -1) (undo-tree-id2987 . -1) (undo-tree-id2988 . -1) (undo-tree-id2989 . -1) (undo-tree-id2990 . -1) 1225) nil (26028 46878 267314 64000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -1601) (undo-tree-id3177 . -1) (undo-tree-id3178 . -1) (undo-tree-id3179 . -1) (#("c" 0 1 (fontified t)) . -1602) (undo-tree-id3180 . -1) (undo-tree-id3181 . -1) (undo-tree-id3182 . -1) (#("h" 0 1 (fontified t)) . -1603) (undo-tree-id3183 . -1) (undo-tree-id3184 . -1) (#("o" 0 1 (fontified t)) . -1604) (undo-tree-id3185 . -1) (undo-tree-id3186 . -1) (#(" " 0 1 (fontified t)) . -1605) (undo-tree-id3187 . -1) (undo-tree-id3188 . -1) 1606 (1601 . 1606) (1597 . 1601) (#("    " 0 4 (fontified nil)) . 1596) (undo-tree-id3189 . -4) (undo-tree-id3190 . -4) (1600 . 1601) (1596 . 1600) (t 26028 46879 838721 436000)) nil (26028 46934 465439 553000) 0 nil] [nil nil ((1225 . 1226)) ((#(";" 0 1 (fontified t)) . 1225) (t 26028 46674 87365 326000)) (26028 46674 62973 584000) 0 nil])
([nil nil ((1597 . 1601) (#("   " 0 3 (fontified nil)) . -1597) (undo-tree-id3127 . -3) (undo-tree-id3128 . -3) (undo-tree-id3129 . -3) (undo-tree-id3130 . -3) (undo-tree-id3131 . -3) (undo-tree-id3132 . -3) (undo-tree-id3133 . -3) (undo-tree-id3134 . -3) (undo-tree-id3135 . -3) (undo-tree-id3136 . -3) (undo-tree-id3137 . -3) (undo-tree-id3138 . -3) (undo-tree-id3139 . -3) (undo-tree-id3140 . -3) (undo-tree-id3141 . -3) (undo-tree-id3142 . -3) (undo-tree-id3143 . -3) (undo-tree-id3144 . -3) (undo-tree-id3145 . -3) (undo-tree-id3146 . -3) (undo-tree-id3147 . -3) (undo-tree-id3148 . -3) (undo-tree-id3149 . -3) (undo-tree-id3150 . -3) (undo-tree-id3151 . -3) (undo-tree-id3152 . -3) (undo-tree-id3153 . -3) (undo-tree-id3154 . -3) (undo-tree-id3155 . -3) (undo-tree-id3156 . -3) (undo-tree-id3157 . -3) (undo-tree-id3158 . -3) (undo-tree-id3159 . -3) (undo-tree-id3160 . -3) (undo-tree-id3161 . -3) (undo-tree-id3162 . -3) (undo-tree-id3163 . -3) (#(" " 0 1 (fontified t)) . 1600) (undo-tree-id3164 . -1) (undo-tree-id3165 . -1) (undo-tree-id3166 . -1) (undo-tree-id3167 . -1) (undo-tree-id3168 . -1) (undo-tree-id3169 . -1) (undo-tree-id3170 . -1) (undo-tree-id3171 . -1) (undo-tree-id3172 . -1) (undo-tree-id3173 . -1) (undo-tree-id3174 . -1) (undo-tree-id3175 . -1) (undo-tree-id3176 . -1)) nil (26028 46934 465381 712000) 0 nil])
nil
([nil nil ((1610 . 1612) (#("2" 0 1 (fontified t)) . -1610) (#("1" 0 1 (fontified t)) . -1611) (#("0" 0 1 (fontified t)) . -1612) (#("0" 0 1 (fontified t)) . -1613) 1614 (1611 . 1614) (#("uint32_t ms" 0 8 (fontified nil face font-lock-type-face) 8 9 (fontified nil) 9 11 (fontified nil face font-lock-variable-name-face)) . 1611) (1610 . 1611) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1610 1612 nil nil nil t nil)) nil 23 nil #s(yas--field 1 1610 1612 nil nil nil t nil) nil nil)) (1601 . 1622) (#("sleep_ms(${1:uint32_t ms})" 0 26 (fontified nil)) . 1601) (1601 . 1627) (#("sl" 0 2 (fontified nil)) . 1601) (1601 . 1603) (#("sleep_ms(uint32_t ms)" 0 21 (fontified nil)) . -1601) (1601 . 1622) (#("sleep" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t)) . -1601) 1606 (1601 . 1606) (1597 . 1601) (#("   " 0 3 (fontified nil)) . -1597) (#(" " 0 1 (fontified t)) . 1600)) nil (26030 49134 612139 866000) 0 nil])
([nil nil ((#("2" 0 1 (fontified nil)) . 1610) (1611 . 1622) (#("100" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 1611) (1610 . 1614) (#("10" 0 1 (fontified t) 1 2 (fontified t)) . 1610)) nil (26030 49216 899633 383000) 0 nil] [nil nil ((#("2" 0 1 (fontified nil)) . 1610) (undo-tree-id3972 . 1) (1611 . 1622) (#("100" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 1611) (1610 . 1614) (#("10" 0 1 (fontified t) 1 2 (fontified t)) . 1610) (undo-tree-id3973 . -2) (undo-tree-id3974 . 2)) ((1610 . 1612) (#("2100" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil)) . 1610) (undo-tree-id3975 . 3) (undo-tree-id3976 . -1) (1611 . 1614) (#("uint32_t ms" 0 8 (face font-lock-type-face fontified nil) 8 9 (fontified nil) 9 11 (face font-lock-variable-name-face fontified nil)) . 1611) (undo-tree-id3977 . 9) (undo-tree-id3978 . -3) (undo-tree-id3979 . 9) (1610 . 1611)) (26030 49134 604632 893000) 0 nil] [nil nil ((#("2" 0 1 (fontified nil)) . 1610) (undo-tree-id3964 . 1) (1611 . 1622) (#("100" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 1611) (1610 . 1614) (#("10" 0 1 (fontified t) 1 2 (fontified t)) . 1610) (undo-tree-id3965 . -2) (undo-tree-id3966 . 2)) ((1610 . 1612) (#("2100" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil)) . 1610) (undo-tree-id3967 . 3) (undo-tree-id3968 . -1) (1611 . 1614) (#("uint32_t ms" 0 8 (face font-lock-type-face fontified nil) 8 9 (fontified nil) 9 11 (face font-lock-variable-name-face fontified nil)) . 1611) (undo-tree-id3969 . 9) (undo-tree-id3970 . -3) (undo-tree-id3971 . 9) (1610 . 1611)) (26030 49133 811049 732000) 0 nil] [nil nil ((#("2" 0 1 (fontified nil)) . 1610) (undo-tree-id3956 . 1) (1611 . 1622) (#("100" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 1611) (1610 . 1614) (#("10" 0 1 (fontified t) 1 2 (fontified t)) . 1610) (undo-tree-id3957 . -2) (undo-tree-id3958 . 2)) ((1610 . 1612) (#("2100" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil)) . 1610) (undo-tree-id3959 . 3) (undo-tree-id3960 . -1) (1611 . 1614) (#("uint32_t ms" 0 8 (face font-lock-type-face fontified nil) 8 9 (fontified nil) 9 11 (face font-lock-variable-name-face fontified nil)) . 1611) (undo-tree-id3961 . 9) (undo-tree-id3962 . -3) (undo-tree-id3963 . 9) (1610 . 1611)) (26030 49133 407495 815000) 0 nil] [nil nil ((#("2" 0 1 (fontified nil)) . 1610) (undo-tree-id3948 . 1) (1611 . 1622) (#("100" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 1611) (1610 . 1614) (#("10" 0 1 (fontified t) 1 2 (fontified t)) . 1610) (undo-tree-id3949 . -2) (undo-tree-id3950 . 2)) ((1610 . 1612) (#("2100" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil)) . 1610) (undo-tree-id3951 . 3) (undo-tree-id3952 . -1) (1611 . 1614) (#("uint32_t ms" 0 8 (face font-lock-type-face fontified nil) 8 9 (fontified nil) 9 11 (face font-lock-variable-name-face fontified nil)) . 1611) (undo-tree-id3953 . 9) (undo-tree-id3954 . -3) (undo-tree-id3955 . 9) (1610 . 1611)) (26030 49133 29724 572000) 0 nil] [nil nil ((#("2" 0 1 (fontified nil)) . 1610) (undo-tree-id3940 . 1) (1611 . 1622) (#("100" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 1611) (1610 . 1614) (#("10" 0 1 (fontified t) 1 2 (fontified t)) . 1610) (undo-tree-id3941 . -2) (undo-tree-id3942 . 2)) ((1610 . 1612) (#("2100" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil)) . 1610) (undo-tree-id3943 . 3) (undo-tree-id3944 . -1) (1611 . 1614) (#("uint32_t ms" 0 8 (face font-lock-type-face fontified nil) 8 9 (fontified nil) 9 11 (face font-lock-variable-name-face fontified nil)) . 1611) (undo-tree-id3945 . 9) (undo-tree-id3946 . -3) (undo-tree-id3947 . 9) (1610 . 1611)) (26030 49132 547623 544000) 0 nil] [nil nil ((#("2" 0 1 (fontified nil)) . 1610) (undo-tree-id3932 . 1) (1611 . 1622) (#("100" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 1611) (1610 . 1614) (#("10" 0 1 (fontified t) 1 2 (fontified t)) . 1610) (undo-tree-id3933 . -2) (undo-tree-id3934 . 2)) ((1610 . 1612) (#("2100" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil)) . 1610) (undo-tree-id3935 . 3) (undo-tree-id3936 . -1) (1611 . 1614) (#("uint32_t ms" 0 8 (face font-lock-type-face fontified nil) 8 9 (fontified nil) 9 11 (face font-lock-variable-name-face fontified nil)) . 1611) (undo-tree-id3937 . 9) (undo-tree-id3938 . -3) (undo-tree-id3939 . 9) (1610 . 1611)) (26030 49131 916656 918000) 0 nil] [nil nil ((#("2" 0 1 (fontified nil)) . 1610) (undo-tree-id3924 . 1) (1611 . 1622) (#("100" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 1611) (1610 . 1614) (#("10" 0 1 (fontified t) 1 2 (fontified t)) . 1610) (undo-tree-id3925 . -2) (undo-tree-id3926 . 2)) ((1610 . 1612) (#("2100" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil)) . 1610) (undo-tree-id3927 . 3) (undo-tree-id3928 . -1) (1611 . 1614) (#("uint32_t ms" 0 8 (face font-lock-type-face fontified nil) 8 9 (fontified nil) 9 11 (face font-lock-variable-name-face fontified nil)) . 1611) (undo-tree-id3929 . 9) (undo-tree-id3930 . -3) (undo-tree-id3931 . 9) (1610 . 1611)) (26030 49131 689375 813000) 0 nil] [nil nil ((#("2" 0 1 (fontified nil)) . 1610) (1611 . 1622) (#("100" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 1611) (1610 . 1614) (#("10" 0 1 (fontified t) 1 2 (fontified t)) . 1610) (undo-tree-id3918 . -2)) ((1610 . 1612) (#("2100" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil)) . 1610) (undo-tree-id3919 . 3) (undo-tree-id3920 . -1) (1611 . 1614) (#("uint32_t ms" 0 8 (face font-lock-type-face fontified nil) 8 9 (fontified nil) 9 11 (face font-lock-variable-name-face fontified nil)) . 1611) (undo-tree-id3921 . 9) (undo-tree-id3922 . -3) (undo-tree-id3923 . 9) (1610 . 1611)) (26030 49131 419137 783000) 0 nil] [nil nil ((1613 . 1614) (apply yas--snippet-revive 1601 1613 #s(yas--snippet nil (#s(yas--field 1 1610 1610 nil nil nil t nil)) nil 23 nil #s(yas--field 1 1610 1612 nil nil nil t nil) nil nil))) ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1610 1610 nil nil nil t nil)) nil 23 nil #s(yas--field 1 1610 1612 nil nil nil t nil) nil nil)) (#(";" 0 1 (fontified t)) . 1613)) (26030 49131 100983 363000) 0 nil])
([nil nil ((apply yas--snippet-revive 1601 1622 #s(yas--snippet nil (#s(yas--field 1 1610 1610 nil nil nil t nil)) nil 23 nil #s(yas--field 1 1610 1612 nil nil nil t nil) nil nil))) nil (26030 49216 899629 27000) 0 nil])
nil
nil
nil
nil
nil
nil
nil
nil
([nil nil ((#("    sleep_ms(10);
" 0 4 (fontified t) 4 12 (fontified t) 12 13 (fontified t face (rainbow-delimiters-depth-3-face)) 13 14 (fontified t) 14 15 (fontified t) 15 16 (fontified t face (rainbow-delimiters-depth-3-face)) 16 17 (fontified t) 17 18 (fontified t)) . 1597) (undo-tree-id3199 . 1) (undo-tree-id3201 . -13) (undo-tree-id3203 . -16) 1613 (t 26028 46934 491146 42000)) ((1597 . 1615)) (26030 49130 509834 311000) 0 nil])
([nil nil ((#("
  uart_init(UART_ID, 9600);

  gpio_set_function(UART_RX_PIN, GPIO_FUNC_UART);
  gpio_set_function(UART_TX_PIN, GPIO_FUNC_UART);

  uart_set_baudrate(UART_ID, 9600);

  
  bi_decl(bi_1pin_with_func(UART_TX_PIN, GPIO_FUNC_UART));
  bi_decl(bi_1pin_with_func(UART_RX_PIN, GPIO_FUNC_UART));


  uint8_t data;
  
  while (1) {
    uart_read_blocking(UART_ID, &data, 1);

    multicore_fifo_push_blocking((uint32_t) data);

    sleep_ms(50);
  }

" 0 12 (fontified t) 12 13 (face (rainbow-delimiters-depth-2-face) fontified t) 13 26 (fontified t) 26 27 (face (rainbow-delimiters-depth-2-face) fontified t) 27 49 (fontified t) 49 50 (face (rainbow-delimiters-depth-2-face) fontified t) 50 77 (fontified t) 77 78 (face (rainbow-delimiters-depth-2-face) fontified t) 78 99 (fontified t) 99 100 (face (rainbow-delimiters-depth-2-face) fontified t) 100 127 (fontified t) 127 128 (face (rainbow-delimiters-depth-2-face) fontified t) 128 150 (fontified t) 150 151 (face (rainbow-delimiters-depth-2-face) fontified t) 151 155 (fontified t) 155 159 (fontified t) 159 164 (fontified t) 164 165 (face (rainbow-delimiters-depth-2-face) fontified t) 165 167 (fontified t) 167 180 (fontified t) 180 181 (face (rainbow-delimiters-depth-2-face) fontified t) 181 198 (fontified t) 198 199 (face (rainbow-delimiters-depth-3-face) fontified t) 199 226 (fontified t) 226 227 (face (rainbow-delimiters-depth-3-face) fontified t) 227 228 (face (rainbow-delimiters-depth-2-face) fontified t) 228 232 (fontified t) 232 233 (fontified t) 233 239 (fontified t) 239 240 (face (rainbow-delimiters-depth-2-face) fontified t) 240 257 (fontified t) 257 258 (face (rainbow-delimiters-depth-3-face) fontified t) 258 285 (fontified t) 285 286 (face (rainbow-delimiters-depth-3-face) fontified t) 286 287 (face (rainbow-delimiters-depth-2-face) fontified t) 287 288 (fontified t) 288 289 (fontified t) 289 290 (fontified t) 290 291 (fontified t) 291 293 (fontified t) 293 299 (face font-lock-type-face fontified t) 299 300 (face font-lock-type-face c-type c-decl-id-start fontified t) 300 301 (fontified t) 301 305 (face font-lock-variable-name-face fontified t) 305 306 (fontified t) 306 307 (fontified t) 307 309 (fontified t) 309 310 (fontified t) 310 312 (fontified t) 312 317 (face font-lock-keyword-face fontified t) 317 318 (fontified t) 318 319 (face (rainbow-delimiters-depth-2-face) fontified t) 319 320 (fontified t) 320 321 (face (rainbow-delimiters-depth-2-face) fontified t) 321 322 (fontified t) 322 323 (face (rainbow-delimiters-depth-2-face) fontified t) 323 324 (fontified t) 324 328 (fontified t) 328 346 (fontified t) 346 347 (face (rainbow-delimiters-depth-3-face) fontified t) 347 364 (fontified t) 364 365 (face (rainbow-delimiters-depth-3-face) fontified t) 365 366 (fontified t) 366 367 (fontified t) 367 368 (fontified t) 368 400 (fontified t) 400 401 (face (rainbow-delimiters-depth-3-face) fontified t) 401 402 (face (rainbow-delimiters-depth-4-face) fontified t) 402 410 (face font-lock-type-face fontified t) 410 411 (face (rainbow-delimiters-depth-4-face) fontified t) 411 416 (fontified t) 416 417 (face (rainbow-delimiters-depth-3-face) fontified t) 417 419 (fontified t) 419 420 (fontified t) 420 432 (fontified t) 432 433 (face (rainbow-delimiters-depth-3-face) fontified t) 433 435 (fontified t) 435 436 (face (rainbow-delimiters-depth-3-face) fontified t) 436 438 (fontified t) 438 440 (fontified t) 440 441 (face (rainbow-delimiters-depth-2-face) fontified t) 441 442 (fontified t) 442 443 (fontified t)) . 540) (undo-tree-id4032 . -442) (undo-tree-id4033 . -442) (undo-tree-id4034 . -442) (undo-tree-id4035 . -249) (undo-tree-id4036 . -249) (undo-tree-id4037 . -249) (undo-tree-id4038 . -186) (undo-tree-id4039 . -324) (undo-tree-id4040 . -323) (undo-tree-id4041 . -306) (undo-tree-id4042 . -306) (undo-tree-id4043 . -323) (undo-tree-id4044 . -442) (undo-tree-id4045 . -442) (undo-tree-id4046 . -442) 982) nil (26030 49216 899625 107000) 0 nil])
([nil nil ((apply yas--snippet-revive 1628 1649 #s(yas--snippet nil nil nil 24 nil nil nil nil)) (113 . 140) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 24 nil nil nil nil)) (1601 . 1622) (#("tight_loop_contents()" 0 21 (fontified nil)) . 1601) (1601 . 1622) (#("ti" 0 2 (fontified nil)) . 1601) (1601 . 1603) (#("tight_loop_contents()" 0 21 (fontified nil)) . -1601) (1601 . 1622) (#("tigh" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -1601) (undo-tree-id3194 . -4) 1605 (1601 . 1605) (1597 . 1601) (#("   " 0 3 (fontified nil)) . -1597) (undo-tree-id3196 . -3) (#(" " 0 1 (fontified t)) . 1600)) ((1597 . 1601) (#("    " 0 4 (fontified nil)) . 1597) (undo-tree-id3856 . -4) (undo-tree-id3857 . -4) (undo-tree-id3858 . -4) (undo-tree-id3859 . -4) (undo-tree-id3860 . -4) (undo-tree-id3861 . -4) (undo-tree-id3862 . -4) (undo-tree-id3863 . -4) (undo-tree-id3864 . -4) (undo-tree-id3865 . -4) (undo-tree-id3866 . -4) (undo-tree-id3867 . -4) (undo-tree-id3868 . -4) (undo-tree-id3869 . -4) (undo-tree-id3870 . -4) (undo-tree-id3871 . -4) (undo-tree-id3872 . -4) (undo-tree-id3873 . -4) (undo-tree-id3874 . -4) (undo-tree-id3875 . -4) (undo-tree-id3876 . -4) (undo-tree-id3877 . -4) (undo-tree-id3878 . -4) (undo-tree-id3879 . -4) (undo-tree-id3880 . -4) (undo-tree-id3881 . -4) (undo-tree-id3882 . -4) (undo-tree-id3883 . -4) (undo-tree-id3884 . -4) (undo-tree-id3885 . -4) (#("tigh" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil)) . 1601) (1601 . 1605) (#("tight_loop_contents()" 0 21 (fontified nil)) . 1601) (1601 . 1622) (#("ti" 0 2 (fontified nil)) . 1601) (1601 . 1603) (#("tight_loop_contents()" 0 21 (fontified nil)) . 1601) (1601 . 1622) (#("tight_loop_contents()" 0 19 (fontified t) 19 20 (face (rainbow-delimiters-depth-3-face) fontified t) 20 21 (face (rainbow-delimiters-depth-3-face) fontified t)) . 1601) (undo-tree-id3886 . -20) (undo-tree-id3887 . -20) (undo-tree-id3888 . -20) (undo-tree-id3889 . -20) (undo-tree-id3890 . -20) (undo-tree-id3891 . -20) (undo-tree-id3892 . -20) (undo-tree-id3893 . -20) (undo-tree-id3894 . -20) (undo-tree-id3895 . -20) (undo-tree-id3896 . -20) (undo-tree-id3897 . -20) (undo-tree-id3898 . -20) (undo-tree-id3899 . -20) (undo-tree-id3900 . -20) (undo-tree-id3901 . -20) (undo-tree-id3902 . -20) (undo-tree-id3903 . -20) (undo-tree-id3904 . -20) (undo-tree-id3905 . -20) (undo-tree-id3906 . -20) (undo-tree-id3907 . -20) (undo-tree-id3908 . -20) (undo-tree-id3909 . -20) (undo-tree-id3910 . -20) (undo-tree-id3911 . -20) (undo-tree-id3912 . -20) (undo-tree-id3913 . -20) (undo-tree-id3914 . -20) (undo-tree-id3915 . -20) (#("#include \"pico/platform.h\"
" 0 1 (c-in-sws t c-is-sws t face font-lock-preprocessor-face fontified t) 1 8 (c-in-sws t face font-lock-preprocessor-face fontified t) 8 9 (c-in-sws t fontified t) 9 26 (c-in-sws t face font-lock-string-face fontified t) 26 27 (c-in-sws t fontified t)) . 113) (undo-tree-id3916 . 18) (undo-tree-id3917 . -26)) (26030 49129 196156 264000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -1140) (undo-tree-id4024 . -2) (undo-tree-id4025 . -2) 1142 (1140 . 1142) (#("  " 0 2 (fontified nil)) . 1139) (undo-tree-id4026 . -2) (undo-tree-id4027 . -2) (1139 . 1142) (#("  " 0 2 (fontified nil)) . 1138) (undo-tree-id4028 . -2) (undo-tree-id4029 . -2) (1138 . 1141) (#("  " 0 2 (fontified nil)) . 1137) (undo-tree-id4030 . -2) (undo-tree-id4031 . -2) (1136 . 1140)) nil (26030 49216 899591 683000) 0 nil])
([nil nil ((1649 . 1650)) ((#(";" 0 1 (fontified t)) . 1649)) (26030 49128 743221 200000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1582 . 1583) (nil fontified nil 1140 . 1583) (1140 . 1583)) nil (26030 49216 899573 537000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1623) (undo-tree-id3192 . -1)) ((1623 . 1624)) (26030 49128 668551 483000) 0 nil])
([nil nil ((#("  while (1) {

    sleep_ms(uint32_t ms)
    
  }
 " 0 2 (fontified t) 2 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 9 (face (rainbow-delimiters-depth-2-face) fontified t) 9 10 (fontified t) 10 11 (face (rainbow-delimiters-depth-2-face) fontified t) 11 12 (fontified t) 12 13 (face (rainbow-delimiters-depth-2-face) fontified t) 13 14 (fontified t) 14 15 (fontified t) 15 19 (fontified t) 19 27 (fontified t) 27 28 (face (rainbow-delimiters-depth-3-face) fontified t) 28 36 (face font-lock-type-face fontified t) 36 37 (fontified t) 37 39 (face font-lock-variable-name-face fontified t) 39 40 (face (rainbow-delimiters-depth-3-face) fontified t) 40 41 (fontified t) 41 44 (fontified t) 44 45 (fontified t) 45 46 (fontified t) 46 48 (fontified t) 48 49 (face (rainbow-delimiters-depth-2-face) fontified t) 49 51 (fontified t)) . 1586) (undo-tree-id4019 . -50) (undo-tree-id4020 . -50) (undo-tree-id4021 . -50) (undo-tree-id4022 . -50) (undo-tree-id4023 . -50) 1636) nil (26030 49216 899569 709000) 0 nil])
([nil nil ((1252 . 1253) (t 26028 46962 625087 583000)) ((#(";" 0 1 (fontified t)) . 1252) (undo-tree-id3849 . -1) (undo-tree-id3850 . -1) (undo-tree-id3851 . -1) (undo-tree-id3852 . -1) (undo-tree-id3853 . -1) (undo-tree-id3854 . -1) (undo-tree-id3855 . -1)) (26030 49128 638845 849000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1585) (undo-tree-id4015 . -1) (undo-tree-id4016 . -1) (undo-tree-id4017 . -1) (undo-tree-id4018 . -1)) nil (26030 49216 899558 619000) 0 nil])
([nil nil ((#("
  gpio_init(LED_PIN);
  gpio_set_dir(LED_PIN, GPIO_OUT);
  gpio_put(LED_PIN, state_led);
  " 0 12 (fontified t) 12 13 (face (rainbow-delimiters-depth-2-face) fontified t) 13 20 (fontified t) 20 21 (face (rainbow-delimiters-depth-2-face) fontified t) 21 37 (fontified t) 37 38 (face (rainbow-delimiters-depth-2-face) fontified t) 38 55 (fontified t) 55 56 (face (rainbow-delimiters-depth-2-face) fontified t) 56 68 (fontified t) 68 69 (face (rainbow-delimiters-depth-2-face) fontified t) 69 87 (fontified t) 87 88 (face (rainbow-delimiters-depth-2-face) fontified t) 88 90 (fontified t) 90 92 (fontified t)) . 1350) (undo-tree-id7 . -91) (undo-tree-id8 . -91) (undo-tree-id9 . -91) (undo-tree-id10 . -91) (undo-tree-id11 . -91) (t 26028 46975 645918 18000)) ((1350 . 1442)) (26030 49128 615959 41000) 0 nil])
([nil nil ((#(" 
" 0 1 (fontified t) 1 2 (fontified t)) . 1585) (undo-tree-id4013 . 2) (undo-tree-id4014 . -1)) nil (26030 49216 899549 479000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1387 . 1388) (nil fontified nil 1296 . 1388) (1296 . 1388)) ((#("
  gpio_init(LED_PIN);
  gpio_set_dir(LED_PIN, GPIO_OUT);
  gpio_put(LED_PIN, state_led);
  " 0 1 (fontified nil) 1 10 (fontified nil) 10 12 (fontified nil) 12 13 (face (rainbow-delimiters-depth-2-face) fontified nil) 13 20 (fontified nil) 20 21 (face (rainbow-delimiters-depth-2-face) fontified nil) 21 22 (fontified nil) 22 23 (fontified nil) 23 37 (fontified nil) 37 38 (face (rainbow-delimiters-depth-2-face) fontified nil) 38 52 (fontified nil) 52 55 (fontified nil) 55 56 (face (rainbow-delimiters-depth-2-face) fontified nil) 56 58 (fontified nil) 58 61 (fontified nil) 61 64 (fontified nil) 64 65 (fontified nil) 65 66 (fontified nil) 66 68 (fontified nil) 68 69 (face (rainbow-delimiters-depth-2-face) fontified nil) 69 72 (fontified nil) 72 76 (fontified nil) 76 77 (fontified nil) 77 80 (fontified nil) 80 81 (fontified nil) 81 82 (fontified nil) 82 83 (fontified nil) 83 86 (fontified nil) 86 87 (fontified nil) 87 88 (face (rainbow-delimiters-depth-2-face) fontified nil) 88 89 (fontified nil) 89 90 (fontified nil) 90 91 (fontified nil) 91 92 (fontified nil rear-nonsticky nil)) . 1296) (undo-tree-id3846 . -61) (undo-tree-id3847 . -61) (undo-tree-id3848 . -61) (nil fontified t 1386 . 1387) (nil fontified t 1385 . 1386) (nil fontified t 1384 . 1385) (nil fontified t 1383 . 1384) (nil fontified t 1382 . 1383) (nil fontified t 1379 . 1382) (nil fontified t 1378 . 1379) (nil fontified t 1377 . 1378) (nil fontified t 1376 . 1377) (nil fontified t 1373 . 1376) (nil fontified t 1372 . 1373) (nil fontified t 1368 . 1372) (nil fontified t 1365 . 1368) (nil fontified t 1364 . 1365) (nil fontified t 1362 . 1364) (nil fontified t 1361 . 1362) (nil fontified t 1360 . 1361) (nil fontified t 1357 . 1360) (nil fontified t 1354 . 1357) (nil fontified t 1352 . 1354) (nil fontified t 1351 . 1352) (nil fontified t 1348 . 1351) (nil fontified t 1334 . 1348) (nil fontified t 1333 . 1334) (nil fontified t 1319 . 1333) (nil fontified t 1318 . 1319) (nil fontified t 1317 . 1318) (nil fontified t 1316 . 1317) (nil fontified t 1309 . 1316) (nil fontified t 1308 . 1309) (nil fontified t 1306 . 1308) (nil fontified t 1297 . 1306) (nil fontified t 1296 . 1297) (nil rear-nonsticky t 1387 . 1388)) (26030 49128 559579 136000) 0 nil])
([nil nil ((#("  
" 0 2 (fontified t) 2 3 (fontified t)) . 1585) (undo-tree-id4011 . 3) (undo-tree-id4012 . -2)) nil (26030 49216 899544 43000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1459)) ((1459 . 1460)) (26030 49128 533904 803000) 0 nil])
([nil nil ((#("  uint8_t data;
" 0 2 (fontified t) 2 8 (face font-lock-type-face fontified t) 8 9 (face font-lock-type-face c-type c-decl-id-start fontified t) 9 10 (fontified t) 10 14 (face font-lock-variable-name-face fontified t) 14 16 (fontified t)) . 972) (undo-tree-id4010 . -15)) nil (26030 49216 899538 482000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1459)) ((1459 . 1460)) (26030 49128 470731 722000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 972)) nil (26030 49216 899534 525000) 0 nil])
([nil nil ((#("  uint8_t data;
" 0 2 (fontified t) 2 8 (face font-lock-type-face fontified t) 8 9 (face font-lock-type-face c-type c-decl-id-start fontified t) 9 10 (fontified t) 10 14 (face font-lock-variable-name-face fontified t) 14 16 (fontified t)) . 1443) (undo-tree-id6 . -15)) ((1443 . 1459)) (26030 49128 448423 890000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 972)) nil (26030 49216 899532 445000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1443)) ((1443 . 1444)) (26030 49128 441458 914000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 972)) nil (26030 49216 899530 244000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1443)) ((1443 . 1444)) (26030 49128 437993 205000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 972)) nil (26030 49216 899528 178000) 0 nil])
([nil nil ((#("  
" 0 3 (fontified t)) . 1473) (undo-tree-id5 . -2)) ((1473 . 1476)) (26030 49128 431573 505000) 0 nil])
([nil nil ((#("  multicore_fifo_clear_irq();
" 0 10 (fontified t) 10 18 (fontified t) 18 26 (fontified t) 26 27 (face (rainbow-delimiters-depth-2-face) fontified t) 27 28 (face (rainbow-delimiters-depth-2-face) fontified t) 28 29 (fontified t) 29 30 (fontified t)) . 972) (undo-tree-id4009 . -29)) nil (26030 49216 899525 998000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1473)) ((1473 . 1474)) (26030 49128 424601 85000) 0 nil])
([nil nil ((#("  
" 0 2 (fontified t) 2 3 (fontified t)) . 972) (undo-tree-id4008 . -2)) nil (26030 49216 899522 411000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1254) (undo-tree-id3 . -4) (undo-tree-id4 . -4) 1258 (1253 . 1258)) ((#("
    " 0 1 (fontified t) 1 5 (fontified nil)) . 1253) (undo-tree-id3835 . -1) (undo-tree-id3836 . -5) (undo-tree-id3837 . -5) (undo-tree-id3838 . -1) (undo-tree-id3839 . -1) (undo-tree-id3840 . -1) (undo-tree-id3841 . -1) (undo-tree-id3842 . -1) (undo-tree-id3843 . -1) (undo-tree-id3844 . -1) (undo-tree-id3845 . -1) (1254 . 1258)) (26030 49128 227145 505000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 972)) nil (26030 49216 899518 721000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1254) (undo-tree-id2 . 1)) ((1254 . 1255)) (26030 49128 209551 485000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 972)) nil (26030 49216 899516 626000) 0 nil])
([nil nil ((1514 . 1515) (#("1" 0 1 (fontified t)) . 1514)) ((1514 . 1515) (#("0" 0 1 (fontified t)) . 1514)) (26030 49128 148871 83000) 0 nil])
([nil nil ((#("  irq_set_exclusive_handler(SIO_IRQ_PROC1, core1_interrupt_handler);
" 0 1 (fontified t) 1 6 (fontified t) 6 12 (fontified t) 12 14 (fontified t) 14 16 (fontified t) 16 17 (fontified t) 17 19 (fontified t) 19 20 (fontified t) 20 23 (fontified t) 23 24 (fontified t) 24 25 (fontified t) 25 27 (fontified t) 27 28 (face (rainbow-delimiters-depth-2-face) fontified t) 28 40 (fontified t) 40 41 (fontified t) 41 42 (fontified t) 42 57 (fontified t) 57 60 (fontified t) 60 66 (fontified t) 66 67 (face (rainbow-delimiters-depth-2-face) fontified t) 67 68 (fontified t) 68 69 (fontified t)) . 972) (undo-tree-id4007 . -68)) nil (26030 49216 899514 232000) 0 nil])
([nil nil ((1574 . 1575) (#("1" 0 1 (fontified t)) . 1574)) ((1574 . 1575) (#("0" 0 1 (fontified t)) . 1574)) (26030 49128 126067 673000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 972)) nil (26030 49216 899510 693000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1256) (undo-tree-id33 . -4) (undo-tree-id34 . -4) 1260 (1256 . 1260) (#("    " 0 4 (fontified nil)) . 1255) (undo-tree-id35 . -4) (undo-tree-id36 . -4) (1255 . 1260) (#("    " 0 4 (fontified nil)) . 1254) (undo-tree-id37 . -4) (undo-tree-id38 . -4) (1253 . 1259) (t 26030 45969 544438 885000)) ((#("
    
" 0 1 (fontified t) 1 5 (fontified nil) 5 6 (fontified nil)) . 1253) (undo-tree-id3711 . -6) (undo-tree-id3712 . -6) (undo-tree-id3713 . -1) (undo-tree-id3714 . -1) (undo-tree-id3715 . -1) (undo-tree-id3716 . -1) (undo-tree-id3717 . -1) (undo-tree-id3718 . -1) (undo-tree-id3719 . -1) (undo-tree-id3720 . -1) (undo-tree-id3721 . -1) (undo-tree-id3722 . -1) (undo-tree-id3723 . -1) (undo-tree-id3724 . -1) (undo-tree-id3725 . -1) (undo-tree-id3726 . -1) (undo-tree-id3727 . -1) (undo-tree-id3728 . -1) (undo-tree-id3729 . -1) (undo-tree-id3730 . -1) (undo-tree-id3731 . -6) (undo-tree-id3732 . -6) (undo-tree-id3733 . -6) (undo-tree-id3734 . -6) (undo-tree-id3735 . -6) (undo-tree-id3736 . -6) (undo-tree-id3737 . -6) (undo-tree-id3738 . -6) (undo-tree-id3739 . -6) (undo-tree-id3740 . -6) (undo-tree-id3741 . -6) (undo-tree-id3742 . -6) (undo-tree-id3743 . -6) (undo-tree-id3744 . -6) (undo-tree-id3745 . -6) (undo-tree-id3746 . -6) (undo-tree-id3747 . -6) (undo-tree-id3748 . -6) (undo-tree-id3749 . -6) (undo-tree-id3750 . -6) (undo-tree-id3751 . -6) (undo-tree-id3752 . -6) (undo-tree-id3753 . -6) (undo-tree-id3754 . -6) (undo-tree-id3755 . -6) (undo-tree-id3756 . -6) (undo-tree-id3757 . -6) (undo-tree-id3758 . -6) (undo-tree-id3759 . -6) (undo-tree-id3760 . -6) (undo-tree-id3761 . -6) (undo-tree-id3762 . -6) (undo-tree-id3763 . -6) (undo-tree-id3764 . -6) (undo-tree-id3765 . -6) (undo-tree-id3766 . -6) (undo-tree-id3767 . -6) (undo-tree-id3768 . -6) (undo-tree-id3769 . -6) (undo-tree-id3770 . -6) (undo-tree-id3771 . -6) (undo-tree-id3772 . -6) (undo-tree-id3773 . -6) (undo-tree-id3774 . -6) (undo-tree-id3775 . -6) (undo-tree-id3776 . -6) (undo-tree-id3777 . -6) (undo-tree-id3778 . -6) (undo-tree-id3779 . -6) (undo-tree-id3780 . -6) (undo-tree-id3781 . -6) (undo-tree-id3782 . -6) (undo-tree-id3783 . -6) (undo-tree-id3784 . -6) (undo-tree-id3785 . -6) (undo-tree-id3786 . -6) (undo-tree-id3787 . -6) (undo-tree-id3788 . -6) (undo-tree-id3789 . -6) (undo-tree-id3790 . -6) (undo-tree-id3791 . -6) (undo-tree-id3792 . -6) (undo-tree-id3793 . -6) (undo-tree-id3794 . -6) (undo-tree-id3795 . -6) (undo-tree-id3796 . -6) (undo-tree-id3797 . -6) (undo-tree-id3798 . -6) (undo-tree-id3799 . -6) (undo-tree-id3800 . -6) (undo-tree-id3801 . -6) (undo-tree-id3802 . -6) (undo-tree-id3803 . -6) (undo-tree-id3804 . -6) (undo-tree-id3805 . -6) (undo-tree-id3806 . -6) (undo-tree-id3807 . -6) (undo-tree-id3808 . -6) (undo-tree-id3809 . -6) (undo-tree-id3810 . -6) (undo-tree-id3811 . -6) (1254 . 1258) (#("    
" 0 4 (fontified nil) 4 5 (fontified nil)) . 1255) (undo-tree-id3812 . -5) (undo-tree-id3813 . -5) (undo-tree-id3814 . -5) (undo-tree-id3815 . -5) (undo-tree-id3816 . -5) (undo-tree-id3817 . -5) (undo-tree-id3818 . -5) (undo-tree-id3819 . -5) (undo-tree-id3820 . -5) (undo-tree-id3821 . -5) (undo-tree-id3822 . -5) (undo-tree-id3823 . -5) (undo-tree-id3824 . -5) (undo-tree-id3825 . -5) (undo-tree-id3826 . -5) (undo-tree-id3827 . -5) (undo-tree-id3828 . -5) (undo-tree-id3829 . -5) (undo-tree-id3830 . -5) (undo-tree-id3831 . -5) (undo-tree-id3832 . -5) (1255 . 1259) (#("    " 0 4 (fontified nil)) . 1256) (undo-tree-id3833 . -4) (undo-tree-id3834 . -4) (1256 . 1260)) (26030 49128 66937 412000) 0 nil])
([nil nil ((#("  irq_set_enabled(SIO_IRQ_PROC1, true);
" 0 17 (fontified t) 17 18 (face (rainbow-delimiters-depth-2-face) fontified t) 18 30 (fontified t) 30 31 (fontified t) 31 32 (fontified t) 32 33 (fontified t) 33 37 (face font-lock-constant-face fontified t) 37 38 (face (rainbow-delimiters-depth-2-face) fontified t) 38 39 (fontified t) 39 40 (fontified t)) . 972) (undo-tree-id4005 . -39) (undo-tree-id4006 . -30)) nil (26030 49216 899508 235000) 0 nil])
([nil nil ((1256 . 1260)) ((#("    " 0 4 (fontified t)) . 1256)) (26030 49128 48282 551000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 972)) nil (26030 49216 899503 211000) 0 nil])
([nil nil ((1258 . 1262) (#("    " 0 4 (fontified nil)) . 1257) (undo-tree-id27 . -4) (undo-tree-id28 . -4) (1257 . 1262) (#("    " 0 4 (fontified nil)) . 1256) (undo-tree-id29 . -4) (undo-tree-id30 . -4) (1256 . 1261) (#("    " 0 4 (fontified nil)) . 1255) (undo-tree-id31 . -4) (undo-tree-id32 . -4) (1259 . 1260) (1255 . 1259)) ((#("    " 0 4 (fontified nil)) . 1255) (undo-tree-id3580 . -4) (undo-tree-id3581 . -4) (undo-tree-id3582 . -4) (undo-tree-id3583 . -4) (undo-tree-id3584 . -4) (undo-tree-id3585 . -4) (undo-tree-id3586 . -4) (undo-tree-id3587 . -4) (undo-tree-id3588 . -4) (undo-tree-id3589 . -4) (undo-tree-id3590 . -4) (undo-tree-id3591 . -4) (undo-tree-id3592 . -4) (undo-tree-id3593 . -4) (undo-tree-id3594 . -4) (undo-tree-id3595 . -4) (undo-tree-id3596 . -4) (undo-tree-id3597 . -4) (undo-tree-id3598 . -4) (undo-tree-id3599 . -4) (undo-tree-id3600 . -4) (undo-tree-id3601 . -4) (undo-tree-id3602 . -4) (undo-tree-id3603 . -4) (undo-tree-id3604 . -4) (undo-tree-id3605 . -4) (undo-tree-id3606 . -4) (undo-tree-id3607 . -4) (undo-tree-id3608 . -4) (undo-tree-id3609 . -4) (undo-tree-id3610 . -4) (undo-tree-id3611 . -4) (undo-tree-id3612 . -4) (undo-tree-id3613 . -4) (undo-tree-id3614 . -4) (undo-tree-id3615 . -4) (undo-tree-id3616 . -4) (undo-tree-id3617 . -4) (undo-tree-id3618 . -4) (undo-tree-id3619 . -4) (undo-tree-id3620 . -4) (undo-tree-id3621 . -4) (undo-tree-id3622 . -4) (undo-tree-id3623 . -4) (undo-tree-id3624 . -4) (undo-tree-id3625 . -4) (undo-tree-id3626 . -4) (undo-tree-id3627 . -4) (undo-tree-id3628 . -4) (#("
" 0 1 (fontified nil)) . 1259) (undo-tree-id3629 . -1) (undo-tree-id3630 . -1) (undo-tree-id3631 . -1) (undo-tree-id3632 . -1) (undo-tree-id3633 . -1) (undo-tree-id3634 . -1) (undo-tree-id3635 . -1) (undo-tree-id3636 . -1) (undo-tree-id3637 . -1) (undo-tree-id3638 . -1) (undo-tree-id3639 . -1) (undo-tree-id3640 . -1) (undo-tree-id3641 . -1) (undo-tree-id3642 . -1) (undo-tree-id3643 . -1) (undo-tree-id3644 . -1) (undo-tree-id3645 . -1) (undo-tree-id3646 . -1) (undo-tree-id3647 . -1) (undo-tree-id3648 . -1) (undo-tree-id3649 . -1) (undo-tree-id3650 . -1) (undo-tree-id3651 . -1) (undo-tree-id3652 . -1) (undo-tree-id3653 . -1) (undo-tree-id3654 . -1) (undo-tree-id3655 . -1) (undo-tree-id3656 . -1) (undo-tree-id3657 . -1) (undo-tree-id3658 . -1) (undo-tree-id3659 . -1) (undo-tree-id3660 . -1) (undo-tree-id3661 . -1) (undo-tree-id3662 . -1) (undo-tree-id3663 . -1) (undo-tree-id3664 . -1) (undo-tree-id3665 . -1) (undo-tree-id3666 . -1) (undo-tree-id3667 . -1) (undo-tree-id3668 . -1) (undo-tree-id3669 . -1) (undo-tree-id3670 . -1) (undo-tree-id3671 . -1) (undo-tree-id3672 . -1) (undo-tree-id3673 . -1) (undo-tree-id3674 . -1) (undo-tree-id3675 . -1) (undo-tree-id3676 . -1) (undo-tree-id3677 . -1) (1255 . 1259) (#("    
" 0 4 (fontified nil) 4 5 (fontified nil)) . 1256) (undo-tree-id3678 . -5) (undo-tree-id3679 . -5) (undo-tree-id3680 . -5) (undo-tree-id3681 . -5) (undo-tree-id3682 . -5) (undo-tree-id3683 . -5) (undo-tree-id3684 . -5) (undo-tree-id3685 . -5) (undo-tree-id3686 . -5) (undo-tree-id3687 . -5) (undo-tree-id3688 . -5) (undo-tree-id3689 . -5) (undo-tree-id3690 . -5) (undo-tree-id3691 . -5) (undo-tree-id3692 . -5) (undo-tree-id3693 . -5) (undo-tree-id3694 . -5) (undo-tree-id3695 . -5) (undo-tree-id3696 . -5) (undo-tree-id3697 . -5) (undo-tree-id3698 . -5) (undo-tree-id3699 . -5) (undo-tree-id3700 . -5) (undo-tree-id3701 . -5) (undo-tree-id3702 . -5) (undo-tree-id3703 . -5) (undo-tree-id3704 . -5) (undo-tree-id3705 . -5) (undo-tree-id3706 . -5) (undo-tree-id3707 . -5) (undo-tree-id3708 . -5) (1256 . 1260) (#("    
" 0 4 (fontified nil) 4 5 (fontified nil)) . 1257) (undo-tree-id3709 . -4) (undo-tree-id3710 . -4) (1257 . 1261) (#("    " 0 4 (fontified t)) . 1258)) (26030 49127 982260 197000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 972)) nil (26030 49216 899501 147000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1257)) ((1257 . 1258)) (26030 49127 960618 234000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 972)) nil (26030 49216 899499 341000) 0 nil])
([nil nil ((#("    
" 0 4 (fontified t) 4 5 (fontified t)) . 1257) (undo-tree-id25 . -4) (undo-tree-id26 . 1)) ((1257 . 1262)) (26030 49127 904556 989000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 972)) nil (26030 49216 899496 988000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1256)) ((1256 . 1257)) (26030 49127 882472 56000) 0 nil])
([nil nil ((972 . 974) (#("  " 0 2 (fontified nil)) . 971) (undo-tree-id4001 . -2) (undo-tree-id4002 . -2) (971 . 974) (#("  " 0 2 (fontified nil)) . 970) (undo-tree-id4003 . -2) (undo-tree-id4004 . -2) (970 . 973) (#("  " 0 2 (fontified nil)) . 970) (969 . 970)) nil (26030 49216 899493 404000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1255)) ((1255 . 1256)) (26030 49127 826411 343000) 0 nil])
([nil nil ((975 . 980) (973 . 975) (971 . 973)) nil (26030 49216 899483 142000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1254)) ((1254 . 1255)) (26030 49127 806142 445000) 0 nil])
([nil nil ((#("    multicore_fifo_push_blocking((uint32_t) data);
" 0 32 (fontified t) 32 33 (face (rainbow-delimiters-depth-3-face) fontified t) 33 34 (face (rainbow-delimiters-depth-4-face) fontified t) 34 42 (face font-lock-type-face fontified t) 42 43 (face (rainbow-delimiters-depth-4-face) fontified t) 43 48 (fontified t) 48 49 (face (rainbow-delimiters-depth-3-face) fontified t) 49 51 (fontified t)) . 1351) (undo-tree-id3998 . -50) (undo-tree-id3999 . -8) (undo-tree-id4000 . -8) 1359) nil (26030 49216 899480 161000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1255) (undo-tree-id21 . -4) (undo-tree-id22 . -4) 1259 (1255 . 1259) (#("    " 0 4 (fontified nil)) . 1254) (undo-tree-id23 . -4) (undo-tree-id24 . -4) (1253 . 1259)) ((#("
    
" 0 1 (fontified t) 1 5 (fontified nil) 5 6 (fontified nil)) . 1253) (undo-tree-id3556 . -6) (undo-tree-id3557 . -6) (undo-tree-id3558 . -6) (undo-tree-id3559 . -6) (undo-tree-id3560 . -6) (undo-tree-id3561 . -6) (undo-tree-id3562 . -6) (undo-tree-id3563 . -6) (undo-tree-id3564 . -6) (undo-tree-id3565 . -6) (undo-tree-id3566 . -6) (undo-tree-id3567 . -6) (undo-tree-id3568 . -6) (undo-tree-id3569 . -6) (undo-tree-id3570 . -6) (undo-tree-id3571 . -6) (undo-tree-id3572 . -6) (undo-tree-id3573 . -6) (undo-tree-id3574 . -6) (undo-tree-id3575 . -6) (undo-tree-id3576 . -6) (undo-tree-id3577 . -6) (1254 . 1258) (#("    " 0 4 (fontified nil)) . 1255) (undo-tree-id3578 . -4) (undo-tree-id3579 . -4) (1255 . 1259)) (26030 49127 746964 215000) 0 nil])
([nil nil ((#("    printf(\"%i\\n\", data)
" 0 4 (fontified t) 4 8 (fontified t) 8 10 (fontified t) 10 11 (face (rainbow-delimiters-depth-3-face) fontified t) 11 17 (face font-lock-string-face fontified t) 17 18 (fontified t) 18 23 (fontified t) 23 24 (face (rainbow-delimiters-depth-3-face) fontified t) 24 25 (fontified t)) . 758) (undo-tree-id3996 . -24) (undo-tree-id3997 . -24)) nil (26030 49216 899472 825000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1255) (undo-tree-id20 . 1)) ((1255 . 1256)) (26030 49127 744474 131000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1329 . 1330) (#("
" 0 1 (fontified nil)) . -1350) (1325 . 1351)) nil (26030 49216 899467 271000) 0 nil])
([nil nil ((#("    
" 0 4 (fontified t) 4 5 (fontified t)) . 1255) (undo-tree-id16 . -4) (undo-tree-id17 . 5) (undo-tree-id18 . -5)) ((1255 . 1260)) (26030 49127 741141 633000) 0 nil])
([nil nil ((#("    state_toggle();
" 0 9 (fontified t) 9 16 (fontified t) 16 17 (face (rainbow-delimiters-depth-3-face) fontified t) 17 18 (face (rainbow-delimiters-depth-3-face) fontified t) 18 19 (fontified t) 19 20 (fontified t)) . 701) (undo-tree-id3993 . -19) (undo-tree-id3994 . -4) (undo-tree-id3995 . -4) 705) nil (26030 49216 899463 972000) 0 nil])
([nil nil ((1229 . 1233) (#("    " 0 4 (fontified nil)) . 1228) (undo-tree-id12 . -4) (undo-tree-id13 . -4) (1228 . 1233) (#("    " 0 4 (fontified nil)) . 1227) (undo-tree-id14 . -4) (undo-tree-id15 . -4) (1231 . 1232) (1227 . 1231)) ((#("    " 0 4 (fontified nil)) . 1227) (undo-tree-id3552 . -4) (undo-tree-id3553 . -4) (#("
" 0 1 (fontified nil)) . 1231) (undo-tree-id3554 . -1) (undo-tree-id3555 . -1) (1227 . 1231) (#("    
" 0 4 (fontified nil) 4 5 (fontified nil)) . 1228) (1228 . 1232) (#("    " 0 3 (fontified t) 3 4 (fontified t)) . 1229)) (26030 49127 732928 266000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1309 . 1310) (#("
" 0 1 (fontified nil)) . -1325) (1305 . 1326)) nil (26030 49216 899455 680000) 0 nil])
([nil nil ((1228 . 1232)) ((#("    " 0 4 (fontified t)) . 1228)) (26030 49127 731782 38000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1327) (undo-tree-id3989 . -4) (undo-tree-id3990 . -4) 1331 (1327 . 1331) (#("    " 0 4 (fontified nil)) . 1326) (undo-tree-id3991 . -4) (undo-tree-id3992 . -4) (1325 . 1331)) nil (26030 49216 899450 854000) 0 nil])
([nil nil ((1002 . 1003)) ((#("0" 0 1 (fontified t)) . 1002)) (26030 49127 726776 601000) 0 nil])
([nil nil ((#("    gpio_put(LED_PIN, state_led);
" 0 12 (fontified t) 12 13 (face (rainbow-delimiters-depth-3-face) fontified t) 13 31 (fontified t) 31 32 (face (rainbow-delimiters-depth-3-face) fontified t) 32 34 (fontified t)) . 702) (undo-tree-id3980 . -33) (undo-tree-id3981 . -34) (undo-tree-id3982 . -34) (undo-tree-id3983 . -34) (undo-tree-id3984 . -34) (undo-tree-id3985 . -34) (undo-tree-id3986 . -34) (undo-tree-id3987 . -34) (undo-tree-id3988 . -34)) nil (26030 49216 899436 651000) 0 nil])
([nil nil ((318 . 326) (nil syntax-table nil 318 . 319) (nil syntax-table (1) 308 . 309) (#("t" 0 1 (fontified nil)) . 318) (nil syntax-table nil 319 . 320) (nil syntax-table (1) 308 . 309) (318 . 319) (nil syntax-table nil 318 . 319) (nil syntax-table (1) 308 . 309) (#("timer.h\"" 0 8 (fontified nil c-in-sws t)) . -318) (318 . 326) (nil syntax-table nil 318 . 319) (nil syntax-table (1) 308 . 309) (#("ti" 0 1 (face font-lock-string-face c-in-sws t fontified t) 1 2 (c-in-sws t face font-lock-string-face fontified t)) . -318) (undo-tree-id39 . -1) (undo-tree-id40 . -2) (undo-tree-id41 . -2) (nil syntax-table nil 320 . 321) (nil syntax-table (1) 308 . 309) (319 . 320) (nil syntax-table nil 319 . 320) (nil syntax-table (1) 308 . 309) (318 . 319) (nil syntax-table nil 318 . 319) (nil syntax-table (1) 308 . 309) (309 . 318) (nil syntax-table nil 309 . 310) (nil syntax-table (1) 308 . 309) (#("\"" 0 1 (c-in-sws t face font-lock-string-face fontified nil)) . 309) (#("hardware/" 0 9 (fontified nil c-in-sws t)) . -309) (309 . 318) (309 . 310) (nil syntax-table nil 309 . 310) (nil syntax-table (1) 308 . 309) (308 . 309) (#("\"" 0 1 (fontified nil)) . -308) (nil syntax-table nil 309 . 310) (nil syntax-table (1) 308 . 309) (308 . 309) (#(":" 0 1 (c-in-sws t fontified t)) . -308) (undo-tree-id42 . -1) (undo-tree-id43 . -1) 309 (308 . 309) (300 . 308) (299 . 300) (298 . 299) (t 26030 46311 845727 603000)) ((#("
" 0 1 (c-in-sws t fontified t)) . 298) (#("#" 0 1 (face font-lock-preprocessor-face c-in-sws t c-is-sws t fontified nil)) . 299) (#("include " 0 1 (face font-lock-preprocessor-face c-in-sws t fontified nil) 1 2 (face font-lock-preprocessor-face c-in-sws t fontified nil) 2 3 (face font-lock-preprocessor-face c-in-sws t fontified nil) 3 4 (face font-lock-preprocessor-face c-in-sws t fontified nil) 4 5 (face font-lock-preprocessor-face c-in-sws t fontified nil) 5 6 (face font-lock-preprocessor-face c-in-sws t fontified nil) 6 7 (face font-lock-preprocessor-face c-in-sws t fontified nil) 7 8 (c-in-sws t fontified nil)) . 300) (#(":" 0 1 (c-in-sws t fontified nil)) . 308) (308 . 309) (#("\"" 0 1 (fontified nil)) . 308) (nil syntax-table nil 309 . 310) (nil syntax-table (1) 308 . 309) (nil syntax-table (1) 308 . 309) (nil syntax-table nil 309 . 310) (308 . 309) (#("\"" 0 1 (c-in-sws t face font-lock-string-face fontified nil)) . 308) (undo-tree-id3548 . 1) (undo-tree-id3549 . -1) (nil syntax-table nil 309 . 310) (nil syntax-table (1) 308 . 309) (nil syntax-table (1) 308 . 309) (nil syntax-table nil 309 . 310) (#("\"" 0 1 (c-in-sws t face font-lock-string-face fontified nil)) . 309) (#("hardware/" 0 9 (c-in-sws t fontified nil)) . 309) (309 . 318) (309 . 310) (nil syntax-table nil 309 . 310) (nil syntax-table (1) 308 . 309) (nil syntax-table (1) 308 . 309) (nil syntax-table nil 309 . 310) (#("hardware/" 0 9 (face font-lock-string-face c-in-sws t fontified nil)) . 309) (undo-tree-id3550 . -9) (nil syntax-table nil 318 . 319) (nil syntax-table (1) 308 . 309) (nil syntax-table (1) 308 . 309) (nil syntax-table nil 318 . 319) (#("t" 0 1 (face font-lock-string-face fontified nil)) . 318) (nil syntax-table nil 319 . 320) (nil syntax-table (1) 308 . 309) (nil syntax-table (1) 308 . 309) (nil syntax-table nil 319 . 320) (#("i" 0 1 (face font-lock-string-face fontified nil)) . 319) (nil syntax-table nil 320 . 321) (nil syntax-table (1) 308 . 309) (nil syntax-table (1) 308 . 309) (nil syntax-table nil 320 . 321) (318 . 320) (nil syntax-table nil 318 . 319) (nil syntax-table (1) 308 . 309) (nil syntax-table (1) 308 . 309) (nil syntax-table nil 318 . 319) (#("timer.h\"" 0 8 (c-in-sws t fontified nil)) . 318) (318 . 326) (nil syntax-table nil 318 . 319) (nil syntax-table (1) 308 . 309) (nil syntax-table (1) 308 . 309) (nil syntax-table nil 318 . 319) (#("t" 0 1 (fontified nil)) . 318) (nil syntax-table nil 319 . 320) (nil syntax-table (1) 308 . 309) (nil syntax-table (1) 308 . 309) (nil syntax-table nil 319 . 320) (318 . 319) (nil syntax-table nil 318 . 319) (nil syntax-table (1) 308 . 309) (nil syntax-table (1) 308 . 309) (nil syntax-table nil 318 . 319) (#("timer.h\"" 0 8 (face font-lock-string-face fontified t c-in-sws t)) . 318) (undo-tree-id3551 . -8)) (26030 49127 693584 966000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1296 . 1297) (#("
" 0 1 (fontified nil)) . -1326) (1292 . 1327)) nil (26030 49216 899393 572000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -903) (undo-tree-id227 . -2) (undo-tree-id228 . -2) 905 (903 . 905) (#("  " 0 2 (fontified nil)) . 902) (undo-tree-id229 . -2) (undo-tree-id230 . -2) (901 . 905) (t 26030 46522 222431 469000)) ((#("
  
" 0 1 (fontified t) 1 3 (fontified nil) 3 4 (fontified nil)) . 901) (undo-tree-id3531 . -1) (undo-tree-id3532 . -1) (undo-tree-id3533 . -3) (undo-tree-id3534 . -3) (undo-tree-id3535 . -1) (undo-tree-id3536 . -1) (undo-tree-id3537 . -1) (undo-tree-id3538 . -1) (undo-tree-id3539 . -1) (undo-tree-id3540 . -1) (undo-tree-id3541 . -1) (undo-tree-id3542 . -1) (undo-tree-id3543 . -1) (undo-tree-id3544 . -1) (undo-tree-id3545 . -1) (undo-tree-id3546 . -1) (undo-tree-id3547 . -1) (902 . 904) (#("  " 0 2 (fontified nil)) . 903) (903 . 905)) (26030 49127 665474 598000) 0 nil])
([nil nil ((#("void core1_entry_uart_reader() {

}



void core1_interrupt_handler() {
  while (multicore_fifo_rvalid()) {
    uint32_t raw = multicore_fifo_pop_blocking();

    uint8_t data = (uint8_t) raw;




  }
}

" 0 3 (face font-lock-type-face fontified t) 3 4 (face font-lock-type-face c-type c-decl-id-start fontified t) 4 5 (fontified t) 5 28 (face font-lock-function-name-face fontified t) 28 29 (face (rainbow-delimiters-depth-1-face) fontified t) 29 30 (face (rainbow-delimiters-depth-1-face) fontified t) 30 31 (fontified t) 31 32 (face (rainbow-delimiters-depth-1-face) fontified t) 32 33 (fontified t) 33 34 (fontified t) 34 35 (face (rainbow-delimiters-depth-1-face) fontified t) 35 38 (fontified t) 38 39 (fontified t) 39 42 (face font-lock-type-face fontified t) 42 43 (face font-lock-type-face c-type c-decl-id-start fontified t) 43 44 (fontified t) 44 67 (face font-lock-function-name-face fontified t) 67 68 (face (rainbow-delimiters-depth-1-face) fontified t) 68 69 (face (rainbow-delimiters-depth-1-face) fontified t) 69 70 (fontified t) 70 71 (face (rainbow-delimiters-depth-1-face) fontified t) 71 72 (fontified t) 72 74 (fontified t) 74 79 (face font-lock-keyword-face fontified t) 79 80 (fontified t) 80 81 (face (rainbow-delimiters-depth-2-face) fontified t) 81 102 (fontified t) 102 103 (face (rainbow-delimiters-depth-3-face) fontified t) 103 104 (face (rainbow-delimiters-depth-3-face) fontified t) 104 105 (face (rainbow-delimiters-depth-2-face) fontified t) 105 106 (fontified t) 106 107 (face (rainbow-delimiters-depth-2-face) fontified t) 107 108 (fontified t) 108 112 (fontified t) 112 119 (face font-lock-type-face fontified t) 119 120 (face font-lock-type-face c-type c-decl-id-start fontified t) 120 121 (fontified t) 121 124 (face font-lock-variable-name-face fontified t) 124 154 (fontified t) 154 155 (face (rainbow-delimiters-depth-3-face) fontified t) 155 156 (face (rainbow-delimiters-depth-3-face) fontified t) 156 158 (fontified t) 158 159 (fontified t) 159 163 (fontified t) 163 169 (face font-lock-type-face fontified t) 169 170 (face font-lock-type-face c-type c-decl-id-start fontified t) 170 171 (fontified t) 171 175 (face font-lock-variable-name-face fontified t) 175 178 (fontified t) 178 179 (face (rainbow-delimiters-depth-3-face) fontified t) 179 186 (face font-lock-type-face fontified t) 186 187 (face (rainbow-delimiters-depth-3-face) fontified t) 187 193 (fontified t) 193 194 (fontified t) 194 195 (fontified t) 195 196 (fontified t) 196 197 (fontified t) 197 199 (fontified t) 199 200 (face (rainbow-delimiters-depth-2-face) fontified t) 200 201 (fontified t) 201 202 (face (rainbow-delimiters-depth-1-face) fontified t) 202 203 (fontified t) 203 204 (fontified t)) . 507) (undo-tree-id4047 . -203) (undo-tree-id4048 . -203) (undo-tree-id4049 . -203) (undo-tree-id4050 . -33) (undo-tree-id4051 . -195) (undo-tree-id4052 . -33) (undo-tree-id4053 . -33) (undo-tree-id4054 . -197) (undo-tree-id4055 . -33) (undo-tree-id4056 . -33) (undo-tree-id4057 . -33) (undo-tree-id4058 . -33) (undo-tree-id4059 . -33) (undo-tree-id4060 . -33) (undo-tree-id4061 . -195) (undo-tree-id4062 . -38) (undo-tree-id4063 . -195) (undo-tree-id4064 . -195) (undo-tree-id4065 . -195) (undo-tree-id4066 . -195) (undo-tree-id4067 . -195) (undo-tree-id4068 . -195) (undo-tree-id4069 . -33) (undo-tree-id4070 . -201) (undo-tree-id4071 . -204) (undo-tree-id4072 . -203) (undo-tree-id4073 . -33) (undo-tree-id4074 . -33) (undo-tree-id4075 . -33) (undo-tree-id4076 . -33) (undo-tree-id4077 . -33) (undo-tree-id4078 . -33) (undo-tree-id4079 . -33) (undo-tree-id4080 . -204) (t 26030 49216 938764 65000)) nil (26030 49228 811638 952000) 0 nil])
([nil nil ((953 . 954) (#(" " 0 1 (fontified t)) . -953) (undo-tree-id214 . -1) (undo-tree-id215 . -1) 954 (944 . 954) (327 . 351) (905 . 920) (#("a" 0 1 (fontified nil)) . 905) (905 . 906) (#("absolute_time_t" 0 15 (fontified nil)) . -905) (905 . 920) (#("absu" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -905) (undo-tree-id216 . -2) (undo-tree-id217 . -4) (undo-tree-id218 . -4) 909 (905 . 909) (#("p" 0 1 (fontified t)) . -905) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (#("r" 0 1 (fontified t)) . -906) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (#("i" 0 1 (fontified t)) . -907) (undo-tree-id223 . -1) (undo-tree-id224 . -1) 908 (905 . 908) (903 . 905) (#("  " 0 2 (fontified nil)) . 902) (undo-tree-id225 . -2) (undo-tree-id226 . -2) (904 . 905) (902 . 904)) ((#("  " 0 2 (fontified nil)) . 902) (undo-tree-id3483 . -2) (undo-tree-id3484 . -2) (undo-tree-id3485 . -2) (undo-tree-id3486 . -2) (undo-tree-id3487 . -2) (undo-tree-id3488 . -2) (undo-tree-id3489 . -2) (undo-tree-id3490 . -2) (undo-tree-id3491 . -2) (#("
" 0 1 (fontified nil)) . 904) (undo-tree-id3492 . -1) (undo-tree-id3493 . -1) (undo-tree-id3494 . -1) (undo-tree-id3495 . -1) (undo-tree-id3496 . -1) (undo-tree-id3497 . -1) (undo-tree-id3498 . -1) (undo-tree-id3499 . -1) (undo-tree-id3500 . -1) (902 . 904) (#("  " 0 2 (fontified nil)) . 903) (undo-tree-id3501 . -2) (undo-tree-id3502 . -2) (undo-tree-id3503 . -2) (undo-tree-id3504 . -2) (undo-tree-id3505 . -2) (undo-tree-id3506 . -2) (undo-tree-id3507 . -2) (#("pri" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 905) (undo-tree-id3508 . -3) (undo-tree-id3509 . -3) (905 . 908) (#("absu" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil)) . 905) (undo-tree-id3510 . -4) (undo-tree-id3511 . -4) (905 . 909) (#("absolute_time_t" 0 15 (fontified nil)) . 905) (905 . 920) (#("a" 0 1 (fontified nil)) . 905) (905 . 906) (#("absolute_time_t" 0 14 (face font-lock-type-face fontified nil) 14 15 (face font-lock-type-face c-type c-decl-id-start fontified nil)) . 905) (undo-tree-id3512 . -15) (undo-tree-id3513 . -15) (undo-tree-id3514 . -15) (undo-tree-id3515 . -15) (undo-tree-id3516 . -15) (undo-tree-id3517 . -15) (undo-tree-id3518 . -15) (#("#include \"pico/types.h\"
" 0 1 (face font-lock-preprocessor-face fontified t c-in-sws t c-is-sws t) 1 8 (face font-lock-preprocessor-face fontified t c-in-sws t) 8 9 (fontified t c-in-sws t) 9 23 (face font-lock-string-face fontified t c-in-sws t) 23 24 (fontified t c-in-sws t)) . 327) (undo-tree-id3519 . -23) (#(" prevtime " 0 1 (fontified nil) 1 2 (face font-lock-variable-name-face fontified nil) 2 3 (face font-lock-variable-name-face fontified nil) 3 4 (face font-lock-variable-name-face fontified nil) 4 5 (face font-lock-variable-name-face fontified nil) 5 6 (face font-lock-variable-name-face fontified nil) 6 7 (face font-lock-variable-name-face fontified nil) 7 8 (face font-lock-variable-name-face fontified nil) 8 9 (face font-lock-variable-name-face fontified nil) 9 10 (fontified nil)) . 944) (undo-tree-id3520 . -9) (undo-tree-id3521 . -9) (undo-tree-id3522 . -10) (undo-tree-id3523 . -10) (undo-tree-id3524 . -9) (undo-tree-id3525 . -9) (undo-tree-id3526 . -9) (953 . 954) (#(";" 0 1 (fontified t)) . 953) (undo-tree-id3527 . -1) (undo-tree-id3528 . -1) (undo-tree-id3529 . -1) (undo-tree-id3530 . -1)) (26030 49127 456498 427000) 0 nil])
([nil nil ((#("  multicore_launch_core1(core1_entry_uart_reader);
" 0 10 (fontified t) 10 24 (fontified t) 24 25 (face (rainbow-delimiters-depth-2-face) fontified t) 25 31 (fontified t) 31 48 (fontified t) 48 49 (face (rainbow-delimiters-depth-2-face) fontified t) 49 50 (fontified t) 50 51 (fontified t)) . 543) (undo-tree-id4081 . -50) (undo-tree-id4082 . -25) (undo-tree-id4083 . -48) (t 26030 49228 848826 447000)) nil (26030 49236 326425 167000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -956) (undo-tree-id210 . -2) (undo-tree-id211 . -2) 958 (956 . 958) (#("  " 0 2 (fontified nil)) . 955) (undo-tree-id212 . -2) (undo-tree-id213 . -2) (954 . 958)) ((#("
  
" 0 1 (fontified t) 1 3 (fontified nil) 3 4 (fontified nil)) . 954) (undo-tree-id3404 . -1) (undo-tree-id3405 . -1) (undo-tree-id3406 . -3) (undo-tree-id3407 . -3) (undo-tree-id3408 . -4) (undo-tree-id3409 . -4) (undo-tree-id3410 . -4) (undo-tree-id3411 . -4) (undo-tree-id3412 . -4) (undo-tree-id3413 . -4) (undo-tree-id3414 . -4) (undo-tree-id3415 . -4) (undo-tree-id3416 . -4) (undo-tree-id3417 . -4) (undo-tree-id3418 . -4) (undo-tree-id3419 . -4) (undo-tree-id3420 . -4) (undo-tree-id3421 . -4) (undo-tree-id3422 . -4) (undo-tree-id3423 . -4) (undo-tree-id3424 . -4) (undo-tree-id3425 . -4) (undo-tree-id3426 . -4) (undo-tree-id3427 . -4) (undo-tree-id3428 . -4) (undo-tree-id3429 . -4) (undo-tree-id3430 . -4) (undo-tree-id3431 . -4) (undo-tree-id3432 . -4) (undo-tree-id3433 . -4) (undo-tree-id3434 . -4) (undo-tree-id3435 . -4) (undo-tree-id3436 . -4) (undo-tree-id3437 . -4) (undo-tree-id3438 . -4) (undo-tree-id3439 . -4) (undo-tree-id3440 . -4) (undo-tree-id3441 . -4) (undo-tree-id3442 . -4) (undo-tree-id3443 . -4) (undo-tree-id3444 . -4) (undo-tree-id3445 . -4) (undo-tree-id3446 . -4) (undo-tree-id3447 . -4) (undo-tree-id3448 . -4) (undo-tree-id3449 . -4) (undo-tree-id3450 . -4) (undo-tree-id3451 . -4) (undo-tree-id3452 . -4) (undo-tree-id3453 . -4) (undo-tree-id3454 . -1) (undo-tree-id3455 . -1) (undo-tree-id3456 . -1) (undo-tree-id3457 . -1) (undo-tree-id3458 . -1) (undo-tree-id3459 . -1) (undo-tree-id3460 . -1) (undo-tree-id3461 . -1) (undo-tree-id3462 . -1) (undo-tree-id3463 . -1) (undo-tree-id3464 . -1) (undo-tree-id3465 . -1) (undo-tree-id3466 . -1) (undo-tree-id3467 . -1) (undo-tree-id3468 . -1) (undo-tree-id3469 . -1) (undo-tree-id3470 . -1) (undo-tree-id3471 . -1) (undo-tree-id3472 . -1) (undo-tree-id3473 . -1) (undo-tree-id3474 . -1) (undo-tree-id3475 . -1) (undo-tree-id3476 . -1) (undo-tree-id3477 . -1) (undo-tree-id3478 . -1) (undo-tree-id3479 . -1) (undo-tree-id3480 . -1) (undo-tree-id3481 . -1) (undo-tree-id3482 . -1) (955 . 957) (#("  " 0 2 (fontified nil)) . 956) (956 . 958)) (26030 49127 436455 580000) 0 nil])
([nil nil ((1097 . 1098) (t 26030 49236 394086 219000)) nil (26030 49405 394518 405000) 0 nil])
([nil nil ((988 . 989) (apply yas--snippet-revive 969 988 #s(yas--snippet nil nil nil 25 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 25 nil nil nil nil)) (969 . 988) (#("get_absolute_time()" 0 19 (fontified nil)) . 969) (969 . 988) (#("ge" 0 2 (fontified nil)) . 969) (969 . 971) (#("get_absolute_time()" 0 19 (fontified nil)) . -969) (969 . 988) (#("get" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -969) (undo-tree-id191 . -3) (undo-tree-id192 . -3) 972 (969 . 972) (966 . 969) (958 . 966) (#("pre" 0 3 (fontified nil)) . 958) (958 . 961) (#("prevtime" 0 8 (fontified nil)) . -958) (958 . 966) (#("pre" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -958) (undo-tree-id193 . -3) (undo-tree-id194 . -3) (undo-tree-id195 . -3) 961 (958 . 961) (#("o" 0 1 (fontified t)) . -958) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (#("p" 0 1 (fontified t)) . -959) (undo-tree-id198 . -1) (undo-tree-id199 . -1) 960 (958 . 960) (#("r" 0 1 (fontified t)) . -958) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (#("e" 0 1 (fontified t)) . -959) (undo-tree-id202 . -1) (undo-tree-id203 . -1) 960 (958 . 960) (#("p" 0 1 (fontified t)) . -958) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (#("r" 0 1 (fontified t)) . -959) (undo-tree-id206 . -1) (undo-tree-id207 . -1) 960 (958 . 960) (956 . 958) (#("  " 0 2 (fontified nil)) . 955) (undo-tree-id208 . -2) (undo-tree-id209 . -2) (957 . 958) (955 . 957)) ((#("  " 0 2 (fontified nil)) . 955) (undo-tree-id3249 . -2) (undo-tree-id3250 . -2) (undo-tree-id3251 . -2) (undo-tree-id3252 . -2) (undo-tree-id3253 . -2) (undo-tree-id3254 . -2) (undo-tree-id3255 . -2) (undo-tree-id3256 . -2) (undo-tree-id3257 . -2) (undo-tree-id3258 . -2) (undo-tree-id3259 . -2) (undo-tree-id3260 . -2) (undo-tree-id3261 . -2) (undo-tree-id3262 . -2) (undo-tree-id3263 . -2) (undo-tree-id3264 . -2) (undo-tree-id3265 . -2) (undo-tree-id3266 . -2) (undo-tree-id3267 . -2) (undo-tree-id3268 . -2) (undo-tree-id3269 . -2) (undo-tree-id3270 . -2) (undo-tree-id3271 . -2) (undo-tree-id3272 . -2) (undo-tree-id3273 . -2) (#("
" 0 1 (fontified nil)) . 957) (undo-tree-id3274 . -1) (undo-tree-id3275 . -1) (undo-tree-id3276 . -1) (undo-tree-id3277 . -1) (undo-tree-id3278 . -1) (undo-tree-id3279 . -1) (undo-tree-id3280 . -1) (undo-tree-id3281 . -1) (undo-tree-id3282 . -1) (undo-tree-id3283 . -1) (undo-tree-id3284 . -1) (undo-tree-id3285 . -1) (undo-tree-id3286 . -1) (undo-tree-id3287 . -1) (undo-tree-id3288 . -1) (undo-tree-id3289 . -1) (undo-tree-id3290 . -1) (undo-tree-id3291 . -1) (undo-tree-id3292 . -1) (undo-tree-id3293 . -1) (undo-tree-id3294 . -1) (undo-tree-id3295 . -1) (undo-tree-id3296 . -1) (undo-tree-id3297 . -1) (undo-tree-id3298 . -1) (955 . 957) (#("  " 0 2 (fontified nil)) . 956) (undo-tree-id3299 . -2) (undo-tree-id3300 . -2) (undo-tree-id3301 . -2) (undo-tree-id3302 . -2) (undo-tree-id3303 . -2) (undo-tree-id3304 . -2) (undo-tree-id3305 . -2) (undo-tree-id3306 . -2) (undo-tree-id3307 . -2) (undo-tree-id3308 . -2) (undo-tree-id3309 . -2) (undo-tree-id3310 . -2) (undo-tree-id3311 . -2) (undo-tree-id3312 . -2) (undo-tree-id3313 . -2) (undo-tree-id3314 . -2) (undo-tree-id3315 . -2) (undo-tree-id3316 . -2) (undo-tree-id3317 . -2) (undo-tree-id3318 . -2) (undo-tree-id3319 . -2) (undo-tree-id3320 . -2) (undo-tree-id3321 . -2) (#("pr" 0 1 (fontified nil) 1 2 (fontified nil)) . 958) (undo-tree-id3322 . -2) (undo-tree-id3323 . -2) (958 . 960) (#("re" 0 1 (fontified nil) 1 2 (fontified nil)) . 958) (undo-tree-id3324 . -2) (undo-tree-id3325 . -2) (958 . 960) (#("op" 0 1 (fontified nil) 1 2 (fontified nil)) . 958) (undo-tree-id3326 . -2) (undo-tree-id3327 . -2) (958 . 960) (#("pre" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 958) (undo-tree-id3328 . -3) (undo-tree-id3329 . -3) (958 . 961) (#("prevtime" 0 8 (fontified nil)) . 958) (958 . 966) (#("pre" 0 3 (fontified nil)) . 958) (958 . 961) (#("prevtime" 0 8 (fontified nil)) . 958) (undo-tree-id3330 . -8) (undo-tree-id3331 . -8) (undo-tree-id3332 . -8) (undo-tree-id3333 . -8) (undo-tree-id3334 . -8) (undo-tree-id3335 . -8) (undo-tree-id3336 . -8) (undo-tree-id3337 . -8) (undo-tree-id3338 . -8) (undo-tree-id3339 . -8) (undo-tree-id3340 . -8) (undo-tree-id3341 . -8) (undo-tree-id3342 . -8) (undo-tree-id3343 . -8) (undo-tree-id3344 . -8) (undo-tree-id3345 . -8) (undo-tree-id3346 . -8) (undo-tree-id3347 . -8) (undo-tree-id3348 . -8) (undo-tree-id3349 . -8) (undo-tree-id3350 . -8) (undo-tree-id3351 . -8) (undo-tree-id3352 . -8) (#(" = " 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 966) (undo-tree-id3353 . -3) (undo-tree-id3354 . -3) (undo-tree-id3355 . -3) (undo-tree-id3356 . -3) (undo-tree-id3357 . -3) (undo-tree-id3358 . -3) (undo-tree-id3359 . -3) (undo-tree-id3360 . -3) (undo-tree-id3361 . -3) (undo-tree-id3362 . -3) (undo-tree-id3363 . -3) (undo-tree-id3364 . -3) (undo-tree-id3365 . -3) (undo-tree-id3366 . -3) (undo-tree-id3367 . -3) (undo-tree-id3368 . -3) (undo-tree-id3369 . -3) (undo-tree-id3370 . -3) (undo-tree-id3371 . -3) (undo-tree-id3372 . -3) (undo-tree-id3373 . -3) (undo-tree-id3374 . -3) (undo-tree-id3375 . -3) (#("get" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 969) (undo-tree-id3376 . -3) (undo-tree-id3377 . -3) (969 . 972) (#("get_absolute_time()" 0 19 (fontified nil)) . 969) (969 . 988) (#("ge" 0 2 (fontified nil)) . 969) (969 . 971) (#("get_absolute_time()" 0 19 (fontified nil)) . 969) (969 . 988) (#("get_absolute_time()" 0 17 (fontified nil) 17 18 (face (rainbow-delimiters-depth-2-face) fontified nil) 18 19 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 969) (undo-tree-id3378 . -19) (undo-tree-id3379 . -19) (undo-tree-id3380 . -19) (undo-tree-id3381 . -19) (undo-tree-id3382 . -19) (undo-tree-id3383 . -19) (undo-tree-id3384 . -19) (undo-tree-id3385 . -19) (undo-tree-id3386 . -19) (undo-tree-id3387 . -19) (undo-tree-id3388 . -19) (undo-tree-id3389 . -19) (undo-tree-id3390 . -19) (undo-tree-id3391 . -19) (undo-tree-id3392 . -19) (undo-tree-id3393 . -19) (undo-tree-id3394 . -19) (undo-tree-id3395 . -19) (undo-tree-id3396 . -19) (undo-tree-id3397 . -19) (undo-tree-id3398 . -19) (undo-tree-id3399 . -19) (undo-tree-id3400 . -19) (#(";" 0 1 (fontified t)) . 988) (undo-tree-id3401 . -1) (undo-tree-id3402 . -1) (undo-tree-id3403 . -1)) (26030 49127 355300 394000) 0 nil])
([nil nil ((973 . 977) (973 . 975) (t 26030 49251 480505 794000)) nil (26030 49431 996618 771000) 0 nil] [nil nil ((#("    uart_read_blocking(UART_ID, &data, 1);
" 0 22 (fontified t) 22 23 (face (rainbow-delimiters-depth-3-face) fontified t) 23 40 (fontified t) 40 41 (face (rainbow-delimiters-depth-3-face) fontified t) 41 43 (fontified t)) . 973) (undo-tree-id4160 . -42) (undo-tree-id4161 . -24) (undo-tree-id4162 . -24) (undo-tree-id4163 . -43) 997 (t 26030 49251 480505 794000)) ((973 . 1016)) (26030 49404 980558 623000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -990) (undo-tree-id189 . -2) (undo-tree-id190 . -2) 992 (989 . 992)) ((#("
  " 0 1 (fontified t) 1 3 (fontified nil)) . 989) (undo-tree-id3247 . -1) (undo-tree-id3248 . -1) (990 . 992)) (26030 49127 295774 910000) 0 nil])
([nil nil ((1041 . 1043) (1027 . 1041) (1023 . 1027) (#("    " 0 1 (c-in-sws t c-is-sws t fontified nil) 1 4 (c-in-sws t c-is-sws t fontified nil)) . 1022) (undo-tree-id4248 . -4) (undo-tree-id4249 . -4) (1026 . 1027) (1021 . 1026)) nil (26030 49431 996612 231000) 0 nil])
([nil nil ((974 . 978) (#("    " 0 4 (fontified nil)) . 973) (undo-tree-id4122 . -4) (undo-tree-id4123 . -4) (undo-tree-id4124 . -4) (undo-tree-id4125 . -4) (undo-tree-id4126 . -4) (undo-tree-id4127 . -4) (undo-tree-id4128 . -4) (undo-tree-id4129 . -4) (undo-tree-id4130 . -4) (undo-tree-id4131 . -4) (undo-tree-id4132 . -4) (undo-tree-id4133 . -4) (undo-tree-id4134 . -4) (undo-tree-id4135 . -4) (undo-tree-id4136 . -4) (undo-tree-id4137 . -4) (undo-tree-id4138 . -4) (undo-tree-id4139 . -4) (undo-tree-id4140 . -4) (undo-tree-id4141 . -4) (undo-tree-id4142 . -4) (undo-tree-id4143 . -4) (undo-tree-id4144 . -4) (undo-tree-id4145 . -4) (undo-tree-id4146 . -4) (undo-tree-id4147 . -4) (undo-tree-id4148 . -4) (undo-tree-id4149 . -4) (undo-tree-id4150 . -4) (undo-tree-id4151 . -4) (undo-tree-id4152 . -4) (undo-tree-id4153 . -4) (undo-tree-id4154 . -4) (undo-tree-id4155 . -4) (undo-tree-id4156 . -4) (undo-tree-id4157 . -4) (undo-tree-id4158 . -4) (undo-tree-id4159 . -4) (977 . 978) (973 . 977)) ((#("    " 0 4 (fontified nil)) . 973) (undo-tree-id4210 . -4) (undo-tree-id4211 . -4) (undo-tree-id4212 . -4) (undo-tree-id4213 . -4) (undo-tree-id4214 . -4) (undo-tree-id4215 . -4) (undo-tree-id4216 . -4) (undo-tree-id4217 . -4) (undo-tree-id4218 . -4) (undo-tree-id4219 . -4) (undo-tree-id4220 . -4) (undo-tree-id4221 . -4) (undo-tree-id4222 . -4) (undo-tree-id4223 . -4) (undo-tree-id4224 . -4) (undo-tree-id4225 . -4) (undo-tree-id4226 . -4) (undo-tree-id4227 . -4) (undo-tree-id4228 . -4) (undo-tree-id4229 . -4) (undo-tree-id4230 . -4) (undo-tree-id4231 . -4) (undo-tree-id4232 . -4) (undo-tree-id4233 . -4) (undo-tree-id4234 . -4) (undo-tree-id4235 . -4) (undo-tree-id4236 . -4) (undo-tree-id4237 . -4) (undo-tree-id4238 . -4) (undo-tree-id4239 . -4) (undo-tree-id4240 . -4) (undo-tree-id4241 . -4) (undo-tree-id4242 . -4) (undo-tree-id4243 . -4) (undo-tree-id4244 . -4) (undo-tree-id4245 . -4) (undo-tree-id4246 . -4) (#("
" 0 1 (fontified nil)) . 977) (undo-tree-id4247 . 1) (973 . 977) (#("    " 0 4 (fontified t)) . 974)) (26030 49404 552770 740000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 991)) ((991 . 992)) (26030 49127 272096 660000) 0 nil])
([nil nil ((1043 . 1044)) nil (26030 49431 996582 846000) 0 nil])
([nil nil ((974 . 978) (#("    " 0 4 (fontified nil)) . 973) (undo-tree-id4084 . -4) (undo-tree-id4085 . -4) (undo-tree-id4086 . -4) (undo-tree-id4087 . -4) (undo-tree-id4088 . -4) (undo-tree-id4089 . -4) (undo-tree-id4090 . -4) (undo-tree-id4091 . -4) (undo-tree-id4092 . -4) (undo-tree-id4093 . -4) (undo-tree-id4094 . -4) (undo-tree-id4095 . -4) (undo-tree-id4096 . -4) (undo-tree-id4097 . -4) (undo-tree-id4098 . -4) (undo-tree-id4099 . -4) (undo-tree-id4100 . -4) (undo-tree-id4101 . -4) (undo-tree-id4102 . -4) (undo-tree-id4103 . -4) (undo-tree-id4104 . -4) (undo-tree-id4105 . -4) (undo-tree-id4106 . -4) (undo-tree-id4107 . -4) (undo-tree-id4108 . -4) (undo-tree-id4109 . -4) (undo-tree-id4110 . -4) (undo-tree-id4111 . -4) (undo-tree-id4112 . -4) (undo-tree-id4113 . -4) (undo-tree-id4114 . -4) (undo-tree-id4115 . -4) (undo-tree-id4116 . -4) (undo-tree-id4117 . -4) (undo-tree-id4118 . -4) (undo-tree-id4119 . -4) (undo-tree-id4120 . -4) (undo-tree-id4121 . -4) (977 . 978) (973 . 977)) ((#("    " 0 4 (fontified nil)) . 973) (undo-tree-id4164 . -4) (undo-tree-id4165 . -4) (undo-tree-id4166 . -4) (undo-tree-id4167 . -4) (undo-tree-id4168 . -4) (undo-tree-id4169 . -4) (undo-tree-id4170 . -4) (undo-tree-id4171 . -4) (undo-tree-id4172 . -4) (undo-tree-id4173 . -4) (undo-tree-id4174 . -4) (undo-tree-id4175 . -4) (undo-tree-id4176 . -4) (undo-tree-id4177 . -4) (undo-tree-id4178 . -4) (undo-tree-id4179 . -4) (undo-tree-id4180 . -4) (undo-tree-id4181 . -4) (undo-tree-id4182 . -4) (undo-tree-id4183 . -4) (undo-tree-id4184 . -4) (undo-tree-id4185 . -4) (undo-tree-id4186 . -4) (undo-tree-id4187 . -4) (undo-tree-id4188 . -4) (undo-tree-id4189 . -4) (undo-tree-id4190 . -4) (undo-tree-id4191 . -4) (undo-tree-id4192 . -4) (undo-tree-id4193 . -4) (undo-tree-id4194 . -4) (undo-tree-id4195 . -4) (undo-tree-id4196 . -4) (undo-tree-id4197 . -4) (undo-tree-id4198 . -4) (undo-tree-id4199 . -4) (undo-tree-id4200 . -4) (undo-tree-id4201 . -4) (undo-tree-id4202 . -4) (#("
" 0 1 (fontified nil)) . 977) (undo-tree-id4203 . -1) (undo-tree-id4204 . -1) (undo-tree-id4205 . -1) (undo-tree-id4206 . -1) (973 . 977) (#("    " 0 4 (fontified t)) . 974) (undo-tree-id4207 . -3) (undo-tree-id4208 . -3) (undo-tree-id4209 . -3)) (26030 49404 547368 895000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 991)) ((991 . 992)) (26030 49127 217498 449000) 0 nil])
([nil nil ((#("    data = getchar();
" 0 4 (c-in-sws t c-is-sws t fontified t) 4 5 (c-is-sws t fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t) 12 13 (fontified t) 13 14 (fontified t) 14 15 (fontified t) 15 16 (fontified t) 16 17 (fontified t) 17 18 (fontified t) 18 19 (face (rainbow-delimiters-depth-3-face) fontified t) 19 20 (face (rainbow-delimiters-depth-3-face) fontified t) 20 21 (fontified t) 21 22 (fontified t)) . 1023) (undo-tree-id4252 . -20) (undo-tree-id4253 . -21) (undo-tree-id4254 . -20) (undo-tree-id4255 . 1) (undo-tree-id4256 . 1) (undo-tree-id4257 . -19) (undo-tree-id4258 . -11) (undo-tree-id4259 . -18) (undo-tree-id4260 . -20) (undo-tree-id4261 . -20) (undo-tree-id4262 . -18) (undo-tree-id4263 . -18) (undo-tree-id4264 . -22) 1041 (t 26030 49432 63073 192000)) nil (26030 49477 362514 856000) 0 nil])
nil
([nil nil ((#("  
" 0 2 (fontified t) 2 3 (fontified t)) . 991) (undo-tree-id188 . -2)) ((991 . 994)) (26030 49127 199575 411000) 0 nil])
([nil nil ((#("//    " 0 1 (face font-lock-comment-delimiter-face c-in-sws t c-is-sws t fontified t) 1 2 (face font-lock-comment-delimiter-face c-in-sws t fontified t) 2 6 (face font-lock-comment-delimiter-face c-in-sws t fontified t)) . 977) (undo-tree-id4250 . -5) (undo-tree-id4251 . -6)) nil (26030 49477 362480 322000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1006) (undo-tree-id184 . -4) (undo-tree-id185 . -4) 1010 (1006 . 1010) (#("    " 0 4 (fontified nil)) . 1005) (undo-tree-id186 . -4) (undo-tree-id187 . -4) (1004 . 1010)) ((#("
    
" 0 1 (fontified t) 1 5 (fontified nil) 5 6 (fontified nil)) . 1004) (undo-tree-id3233 . -1) (undo-tree-id3234 . -1) (undo-tree-id3235 . -5) (undo-tree-id3236 . -5) (undo-tree-id3237 . -1) (undo-tree-id3238 . -1) (undo-tree-id3239 . -1) (undo-tree-id3240 . -1) (undo-tree-id3241 . -1) (undo-tree-id3242 . -1) (undo-tree-id3243 . -1) (undo-tree-id3244 . -1) (undo-tree-id3245 . -1) (undo-tree-id3246 . -1) (1005 . 1009) (#("    " 0 4 (fontified nil)) . 1006) (1006 . 1010)) (26030 49127 194055 760000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t c-in-sws t c-is-sws t)) . 1016) (undo-tree-id4265 . -1) (undo-tree-id4266 . -1) (undo-tree-id4267 . -1) (undo-tree-id4268 . -1) (undo-tree-id4269 . -1) (undo-tree-id4270 . -1) (t 26030 49477 406756 718000)) nil (26030 49479 858060 505000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -1014) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (#("u" 0 1 (fontified t)) . -1015) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (#("r" 0 1 (fontified t)) . -1016) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (#("r" 0 1 (fontified t)) . -1017) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (#("e" 0 1 (fontified t)) . -1018) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (#("n" 0 1 (fontified t)) . -1019) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (#("t" 0 1 (fontified t)) . -1020) (undo-tree-id180 . -1) (undo-tree-id181 . -1) 1021 (1014 . 1021) (1013 . 1015) (1010 . 1013) (1006 . 1010) (#("    " 0 4 (fontified nil)) . 1005) (undo-tree-id182 . -4) (undo-tree-id183 . -4) (1009 . 1010) (1005 . 1009)) ((#("    " 0 4 (fontified nil)) . 1005) (undo-tree-id3171 . -4) (undo-tree-id3172 . -4) (undo-tree-id3173 . -4) (undo-tree-id3174 . -4) (undo-tree-id3175 . -4) (undo-tree-id3176 . -4) (undo-tree-id3177 . -4) (undo-tree-id3178 . -4) (undo-tree-id3179 . -4) (undo-tree-id3180 . -4) (undo-tree-id3181 . -4) (undo-tree-id3182 . -4) (#("
" 0 1 (fontified nil)) . 1009) (undo-tree-id3183 . -1) (undo-tree-id3184 . -1) (undo-tree-id3185 . -1) (undo-tree-id3186 . -1) (undo-tree-id3187 . -1) (undo-tree-id3188 . -1) (undo-tree-id3189 . -1) (undo-tree-id3190 . -1) (undo-tree-id3191 . -1) (undo-tree-id3192 . -1) (undo-tree-id3193 . -1) (undo-tree-id3194 . -1) (1005 . 1009) (#("    " 0 4 (fontified nil)) . 1006) (undo-tree-id3195 . -4) (undo-tree-id3196 . -4) (undo-tree-id3197 . -4) (undo-tree-id3198 . -4) (undo-tree-id3199 . -4) (undo-tree-id3200 . -4) (undo-tree-id3201 . -4) (undo-tree-id3202 . -4) (undo-tree-id3203 . -4) (undo-tree-id3204 . -4) (undo-tree-id3205 . -4) (undo-tree-id3206 . -4) (#("if " 0 1 (face font-lock-keyword-face fontified nil) 1 2 (face font-lock-keyword-face fontified nil) 2 3 (fontified nil)) . 1010) (undo-tree-id3207 . -3) (undo-tree-id3208 . -3) (undo-tree-id3209 . -3) (undo-tree-id3210 . -3) (undo-tree-id3211 . -3) (undo-tree-id3212 . -3) (undo-tree-id3213 . -3) (undo-tree-id3214 . -3) (undo-tree-id3215 . -3) (undo-tree-id3216 . -3) (undo-tree-id3217 . -3) (undo-tree-id3218 . -3) (#("()" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-3-face) fontified nil)) . 1013) (undo-tree-id3219 . -2) (undo-tree-id3220 . -2) (undo-tree-id3221 . -1) (undo-tree-id3222 . -1) (undo-tree-id3223 . -1) (undo-tree-id3224 . -1) (undo-tree-id3225 . -1) (undo-tree-id3226 . -1) (undo-tree-id3227 . -1) (undo-tree-id3228 . -1) (undo-tree-id3229 . -1) (undo-tree-id3230 . -1) (#("current" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil) 6 7 (fontified nil)) . 1014) (undo-tree-id3231 . -7) (undo-tree-id3232 . -7) (1014 . 1021)) (26030 49127 179601 6000) 0 nil])
([nil nil ((#("50" 0 2 (fontified t)) . 1113) (undo-tree-id4271 . -1) (t 26030 49479 898093 210000)) nil (26030 49486 59731 699000) 0 nil])
([nil nil ((1007 . 1011) (#("    " 0 4 (fontified nil)) . 1006) (undo-tree-id164 . -4) (undo-tree-id165 . -4) (1006 . 1011) (#("    " 0 4 (fontified nil)) . 1005) (undo-tree-id166 . -4) (undo-tree-id167 . -4) (1009 . 1010) (1005 . 1009)) ((#("    " 0 4 (fontified nil)) . 1005) (#("
" 0 1 (fontified nil)) . 1009) (1005 . 1009) (#("    
" 0 4 (fontified nil) 4 5 (fontified nil)) . 1006) (1006 . 1010) (#("    " 0 4 (fontified t)) . 1007)) (26030 49127 171236 294000) 0 nil])
([nil nil ((1113 . 1115)) nil (26030 49486 59704 451000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -1010) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (#("n" 0 1 (fontified t)) . -1011) (undo-tree-id160 . -1) (undo-tree-id161 . -1) 1012 (1010 . 1012) (1006 . 1010) (#("    " 0 4 (fontified nil)) . 1005) (undo-tree-id162 . -4) (undo-tree-id163 . -4) (1009 . 1010) (1005 . 1009)) ((#("    " 0 4 (fontified nil)) . 1005) (#("
" 0 1 (fontified nil)) . 1009) (1005 . 1009) (#("    " 0 3 (fontified nil) 3 4 (fontified nil)) . 1006) (#("in" 0 1 (fontified nil) 1 2 (fontified nil)) . 1010) (1010 . 1012)) (26030 49127 159209 965000) 0 nil])
([nil nil ((384 . 388) (t 26030 49486 124499 327000)) nil (26030 49771 216815 105000) 0 nil])
([nil nil ((980 . 981) (976 . 980) (#("r" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -976) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (#("e" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -977) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (#("n" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -978) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (#("t" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -979) (undo-tree-id150 . -1) (undo-tree-id151 . -1) 980 (972 . 980) (957 . 972) (#("a" 0 1 (fontified nil)) . 957) (957 . 958) (#("absolute_time_t" 0 15 (fontified nil)) . -957) (957 . 972) (#("abso" 0 1 (face font-lock-type-face fontified t) 1 2 (face font-lock-type-face fontified t) 2 3 (face font-lock-type-face fontified t) 3 4 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -957) (undo-tree-id152 . -2) (undo-tree-id153 . -4) (undo-tree-id154 . -4) 961 (960 . 961) (#("u" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -960) (undo-tree-id155 . -1) (undo-tree-id156 . -1) 961 (957 . 961) (954 . 957)) ((#("
  " 0 1 (fontified t) 1 3 (fontified nil)) . 954) (#("absu" 0 1 (face font-lock-type-face fontified nil) 1 2 (face font-lock-type-face fontified nil) 2 3 (face font-lock-type-face fontified nil) 3 4 (face font-lock-type-face fontified nil)) . 957) (960 . 961) (#("o" 0 1 (face font-lock-type-face fontified nil)) . 960) (957 . 961) (#("absolute_time_t" 0 15 (fontified nil)) . 957) (957 . 972) (#("a" 0 1 (fontified nil)) . 957) (957 . 958) (#("absolute_time_t" 0 14 (face font-lock-type-face fontified nil) 14 15 (face font-lock-type-face c-type c-decl-id-start fontified nil)) . 957) (#(" current" 0 1 (fontified nil) 1 2 (face font-lock-variable-name-face fontified nil) 2 3 (face font-lock-variable-name-face fontified nil) 3 4 (face font-lock-variable-name-face fontified nil) 4 5 (face font-lock-type-face fontified nil) 5 6 (face font-lock-type-face fontified nil) 6 7 (face font-lock-type-face fontified nil) 7 8 (face font-lock-type-face fontified nil)) . 972) (976 . 980) (#("time" 0 1 (face font-lock-variable-name-face fontified nil) 1 2 (face font-lock-variable-name-face fontified nil) 2 3 (face font-lock-variable-name-face fontified nil) 3 4 (face font-lock-variable-name-face fontified nil)) . 976) (#(";" 0 1 (fontified t)) . 980)) (26030 49127 142203 52000) 0 nil])
([nil nil ((nil rear-nonsticky nil 562 . 563) (nil fontified nil 385 . 563) (385 . 563)) nil (26030 49771 216803 497000) 0 nil])
([nil nil ((1066 . 1067) (apply yas--snippet-revive 1047 1066 #s(yas--snippet nil nil nil 26 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 26 nil nil nil nil)) (1047 . 1066) (#("get_absolute_time()" 0 19 (fontified nil)) . 1047) (1047 . 1066) (#("ge" 0 2 (fontified nil)) . 1047) (1047 . 1049) (#("get_absolute_time()" 0 19 (fontified nil)) . -1047) (1047 . 1066) (#("ge" 0 1 (fontified t) 1 2 (fontified t)) . -1047) (undo-tree-id140 . -2) (undo-tree-id141 . -2) 1049 (1037 . 1049) (1033 . 1037) (#("   " 0 3 (fontified nil)) . -1033) (undo-tree-id142 . -3) (undo-tree-id143 . -3) (#(" " 0 1 (fontified t)) . 1036)) ((1033 . 1037) (#("    " 0 4 (fontified nil)) . 1033) (#("curtime = ge" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil) 6 7 (fontified nil) 7 8 (fontified nil) 8 9 (fontified nil) 9 10 (fontified nil) 10 11 (fontified nil) 11 12 (fontified nil)) . 1037) (1047 . 1049) (#("get_absolute_time()" 0 19 (fontified nil)) . 1047) (1047 . 1066) (#("ge" 0 2 (fontified nil)) . 1047) (1047 . 1049) (#("get_absolute_time()" 0 19 (fontified nil)) . 1047) (1047 . 1066) (#("get_absolute_time()" 0 17 (fontified nil) 17 18 (face (rainbow-delimiters-depth-3-face) fontified nil) 18 19 (face (rainbow-delimiters-depth-3-face) fontified nil)) . 1047) (#(";" 0 1 (fontified t)) . 1066)) (26030 49127 128999 380000) 0 nil])
([nil nil ((#("state" 0 5 (fontified t)) . 1242) (undo-tree-id4343 . -4) (t 26030 49771 282986 373000)) nil (26030 49793 321567 295000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1082) (undo-tree-id138 . -1) (undo-tree-id139 . -1) 1083 (1082 . 1083)) ((#(" " 0 1 (fontified nil)) . 1082) (undo-tree-id3169 . -1) (undo-tree-id3170 . -1) (1082 . 1083)) (26030 49127 105099 274000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 1242)) nil (26030 49793 321563 296000) 0 nil])
([nil nil ((1099 . 1107) (#("p" 0 1 (fontified nil)) . 1099) (1099 . 1100) (#("prevtime" 0 8 (fontified nil)) . -1099) (1099 . 1107) (#("p" 0 1 (fontified t)) . -1099) (undo-tree-id127 . -1) (undo-tree-id128 . -1) 1100 (#("absolute_time_t t" 0 15 (face font-lock-type-face fontified nil) 15 16 (fontified nil) 16 17 (face font-lock-variable-name-face fontified nil)) . 1100) (1099 . 1100) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1099 1099 nil nil nil t nil)) nil 27 nil #s(yas--field 1 1099 1099 nil nil nil t nil) nil nil)) (1082 . 1117) (#("to_ms_since_boot(${1:absolute_time_t t})" 0 40 (fontified nil)) . 1082) (1082 . 1122) (#("to" 0 2 (fontified nil)) . 1082) (1082 . 1084) (#("to_ms_since_boot(absolute_time_t t)" 0 35 (fontified nil)) . -1082) (1082 . 1117) (#("to_ms" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t)) . -1082) (undo-tree-id129 . -2) (undo-tree-id130 . -5) (undo-tree-id131 . -5) 1087 (1082 . 1087) (#("i" 0 1 (fontified t)) . -1082) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -1083) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (#(" " 0 1 (fontified t)) . -1084) (undo-tree-id136 . -1) (undo-tree-id137 . -1) 1085 (1082 . 1085)) ((#("if " 0 1 (fontified nil) 1 2 (face font-lock-keyword-face fontified nil) 2 3 (fontified nil)) . 1082) (undo-tree-id3159 . -3) (undo-tree-id3160 . -3) (1082 . 1085) (#("to_ms" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil)) . 1082) (undo-tree-id3161 . -5) (undo-tree-id3162 . -5) (1082 . 1087) (#("to_ms_since_boot(absolute_time_t t)" 0 35 (fontified nil)) . 1082) (1082 . 1117) (#("to" 0 2 (fontified nil)) . 1082) (1082 . 1084) (#("to_ms_since_boot(${1:absolute_time_t t})" 0 40 (fontified nil)) . 1082) (1082 . 1122) (#("to_ms_since_boot(absolute_time_t t)" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 16 (fontified nil) 16 17 (face (rainbow-delimiters-depth-4-face) fontified nil) 17 32 (face font-lock-type-face fontified nil) 32 33 (fontified nil) 33 34 (face font-lock-variable-name-face fontified nil) 34 35 (face (rainbow-delimiters-depth-4-face) fontified nil)) . 1082) (undo-tree-id3163 . -17) (undo-tree-id3164 . -17) (undo-tree-id3165 . -17) (apply yas--snippet-revive 1082 1117 #s(yas--snippet nil (#s(yas--field 1 1099 1099 nil nil nil t nil)) nil 27 nil #s(yas--field 1 1099 1099 nil nil nil t nil) nil nil)) (#("p" 0 1 (fontified nil)) . 1099) (undo-tree-id3166 . -1) (undo-tree-id3167 . -1) (1099 . 1117) (#("prevtime" 0 8 (fontified nil)) . 1099) (1099 . 1107) (#("p" 0 1 (fontified nil)) . 1099) (1099 . 1100) (#("prevtime" 0 8 (fontified t)) . 1099) (undo-tree-id3168 . -8)) (26030 49126 870559 654000) 0 nil])
([nil nil ((#("led" 0 3 (fontified t)) . 1242) (undo-tree-id4342 . -2)) nil (26030 49793 321561 204000) 0 nil])
([nil nil ((1128 . 1135) (#("cu" 0 2 (fontified nil)) . 1128) (1128 . 1130) (#("curtime" 0 7 (fontified nil)) . -1128) (1128 . 1135) (#("cu" 0 1 (fontified t) 1 2 (fontified t)) . -1128) (undo-tree-id123 . -2) (undo-tree-id124 . -2) 1130 (1129 . 1130) (#("absolute_time_t t" 0 15 (face font-lock-type-face fontified nil) 15 16 (fontified nil) 16 17 (face font-lock-variable-name-face fontified nil)) . 1129) (1128 . 1129) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1128 1128 nil nil nil t nil)) nil 28 nil #s(yas--field 1 1128 1128 nil nil nil t nil) nil nil)) (1111 . 1146) (#("to_ms_since_boot(${1:absolute_time_t t})" 0 40 (fontified nil)) . 1111) (1111 . 1151) (#("to" 0 2 (fontified nil)) . 1111) (1111 . 1113) (#("to_ms_since_boot(absolute_time_t t)" 0 35 (fontified nil)) . -1111) (1111 . 1146) (#("to" 0 1 (fontified t) 1 2 (fontified t)) . -1111) (undo-tree-id125 . -2) (undo-tree-id126 . -2) 1113 (1108 . 1113) (apply yas--snippet-revive 1082 1108 #s(yas--snippet nil (#s(yas--field 1 1099 1099 nil nil nil t nil)) nil 27 nil #s(yas--field 1 1099 1099 nil nil nil t nil) nil nil))) ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1099 1099 nil nil nil t nil)) nil 27 nil #s(yas--field 1 1099 1099 nil nil nil t nil) nil nil)) (#(" - to" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil)) . 1108) (undo-tree-id3048 . -5) (undo-tree-id3049 . -5) (undo-tree-id3050 . -3) (undo-tree-id3051 . -3) (undo-tree-id3052 . -3) (undo-tree-id3053 . -3) (undo-tree-id3054 . -3) (undo-tree-id3055 . -3) (undo-tree-id3056 . -3) (undo-tree-id3057 . -3) (undo-tree-id3058 . -3) (undo-tree-id3059 . -3) (undo-tree-id3060 . -3) (undo-tree-id3061 . -3) (undo-tree-id3062 . -3) (undo-tree-id3063 . -3) (undo-tree-id3064 . -3) (undo-tree-id3065 . -3) (undo-tree-id3066 . -3) (undo-tree-id3067 . -3) (undo-tree-id3068 . -3) (undo-tree-id3069 . -3) (undo-tree-id3070 . -3) (undo-tree-id3071 . -3) (undo-tree-id3072 . -3) (undo-tree-id3073 . -3) (undo-tree-id3074 . -3) (undo-tree-id3075 . -3) (undo-tree-id3076 . -3) (undo-tree-id3077 . -3) (undo-tree-id3078 . -3) (undo-tree-id3079 . -3) (undo-tree-id3080 . -3) (undo-tree-id3081 . -3) (undo-tree-id3082 . -3) (undo-tree-id3083 . -3) (undo-tree-id3084 . -3) (undo-tree-id3085 . -3) (undo-tree-id3086 . -3) (undo-tree-id3087 . -3) (undo-tree-id3088 . -3) (undo-tree-id3089 . -3) (undo-tree-id3090 . -3) (undo-tree-id3091 . -3) (undo-tree-id3092 . -3) (undo-tree-id3093 . -3) (undo-tree-id3094 . -3) (undo-tree-id3095 . -3) (undo-tree-id3096 . -3) (undo-tree-id3097 . -3) (undo-tree-id3098 . -3) (undo-tree-id3099 . -3) (undo-tree-id3100 . -3) (1111 . 1113) (#("to_ms_since_boot(absolute_time_t t)" 0 35 (fontified nil)) . 1111) (1111 . 1146) (#("to" 0 2 (fontified nil)) . 1111) (1111 . 1113) (#("to_ms_since_boot(${1:absolute_time_t t})" 0 40 (fontified nil)) . 1111) (1111 . 1151) (#("to_ms_since_boot(absolute_time_t t)" 0 16 (fontified nil) 16 17 (face (rainbow-delimiters-depth-4-face) fontified nil) 17 32 (face font-lock-type-face fontified nil) 32 33 (fontified nil) 33 34 (face font-lock-variable-name-face fontified nil) 34 35 (face (rainbow-delimiters-depth-4-face) fontified nil)) . 1111) (undo-tree-id3101 . -17) (undo-tree-id3102 . -17) (undo-tree-id3103 . -35) (undo-tree-id3104 . -35) (undo-tree-id3105 . -35) (undo-tree-id3106 . -35) (undo-tree-id3107 . -35) (undo-tree-id3108 . -35) (undo-tree-id3109 . -35) (undo-tree-id3110 . -35) (undo-tree-id3111 . -35) (undo-tree-id3112 . -35) (undo-tree-id3113 . -35) (undo-tree-id3114 . -35) (undo-tree-id3115 . -35) (undo-tree-id3116 . -35) (undo-tree-id3117 . -35) (undo-tree-id3118 . -35) (undo-tree-id3119 . -35) (undo-tree-id3120 . -35) (undo-tree-id3121 . -35) (undo-tree-id3122 . -35) (undo-tree-id3123 . -35) (undo-tree-id3124 . -35) (undo-tree-id3125 . -35) (undo-tree-id3126 . -35) (undo-tree-id3127 . -35) (undo-tree-id3128 . -17) (undo-tree-id3129 . -17) (undo-tree-id3130 . -17) (undo-tree-id3131 . -17) (undo-tree-id3132 . -17) (undo-tree-id3133 . -17) (undo-tree-id3134 . -17) (undo-tree-id3135 . -17) (undo-tree-id3136 . -17) (undo-tree-id3137 . -17) (undo-tree-id3138 . -17) (undo-tree-id3139 . -17) (undo-tree-id3140 . -17) (undo-tree-id3141 . -17) (undo-tree-id3142 . -17) (undo-tree-id3143 . -17) (undo-tree-id3144 . -17) (undo-tree-id3145 . -17) (undo-tree-id3146 . -17) (undo-tree-id3147 . -17) (undo-tree-id3148 . -17) (undo-tree-id3149 . -17) (undo-tree-id3150 . -17) (undo-tree-id3151 . -17) (undo-tree-id3152 . -17) (undo-tree-id3153 . -17) (apply yas--snippet-revive 1111 1146 #s(yas--snippet nil (#s(yas--field 1 1128 1128 nil nil nil t nil)) nil 28 nil #s(yas--field 1 1128 1128 nil nil nil t nil) nil nil)) (#("c" 0 1 (fontified nil)) . 1128) (undo-tree-id3154 . -1) (undo-tree-id3155 . -1) (1129 . 1146) (#("u" 0 1 (fontified nil)) . 1129) (undo-tree-id3156 . -1) (undo-tree-id3157 . -1) (1128 . 1130) (#("curtime" 0 7 (fontified nil)) . 1128) (1128 . 1135) (#("cu" 0 2 (fontified nil)) . 1128) (1128 . 1130) (#("curtime" 0 7 (fontified t)) . 1128) (undo-tree-id3158 . -7)) (26030 49126 815450 974000) 0 nil])
([nil nil ((1242 . 1243)) nil (26030 49793 321557 971000) 0 nil])
([nil nil ((apply yas--snippet-revive 1111 1136 #s(yas--snippet nil (#s(yas--field 1 1128 1128 nil nil nil t nil)) nil 28 nil #s(yas--field 1 1128 1128 nil nil nil t nil) nil nil))) ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1128 1128 nil nil nil t nil)) nil 28 nil #s(yas--field 1 1128 1128 nil nil nil t nil) nil nil))) (26030 49126 796173 207000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -1299) (1273 . 1300)) nil (26030 49793 321555 734000) 0 nil])
([nil nil ((#("prevtime" 0 8 (fontified t)) . 1099) (undo-tree-id122 . -7)) ((1099 . 1107)) (26030 49126 743851 770000) 0 nil])
([nil nil ((1296 . 1297) (#("0" 0 1 (fontified t)) . 1296) (undo-tree-id4341 . -1)) nil (26030 49793 321551 764000) 0 nil])
([nil nil ((1099 . 1106) (#("cur" 0 3 (fontified nil)) . 1099) (1099 . 1102) (#("curtime" 0 7 (fontified nil)) . -1099) (1099 . 1106) (#("cur" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -1099) (undo-tree-id120 . -3) (undo-tree-id121 . -3) 1102 (1099 . 1102)) ((#("cur" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 1099) (1099 . 1102) (#("curtime" 0 7 (fontified nil)) . 1099) (1099 . 1106) (#("cur" 0 3 (fontified nil)) . 1099) (1099 . 1102) (#("curtime" 0 7 (fontified t)) . 1099)) (26030 49126 719004 81000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1301) (undo-tree-id4272 . -4) (undo-tree-id4273 . -4) (undo-tree-id4274 . -4) (undo-tree-id4275 . -4) (undo-tree-id4276 . -4) (undo-tree-id4277 . -4) (undo-tree-id4278 . -4) (undo-tree-id4279 . -4) (undo-tree-id4280 . -4) (undo-tree-id4281 . -4) (undo-tree-id4282 . -4) (undo-tree-id4283 . -4) (undo-tree-id4284 . -4) (undo-tree-id4285 . -4) (undo-tree-id4286 . -4) (undo-tree-id4287 . -4) (undo-tree-id4288 . -4) (undo-tree-id4289 . -4) (undo-tree-id4290 . -4) (undo-tree-id4291 . -4) (undo-tree-id4292 . -4) (undo-tree-id4293 . -4) (undo-tree-id4294 . -4) (undo-tree-id4295 . -4) (undo-tree-id4296 . -4) (undo-tree-id4297 . -4) (undo-tree-id4298 . -4) (undo-tree-id4299 . -4) (undo-tree-id4300 . -4) (undo-tree-id4301 . -4) 1305 (1301 . 1305) (#("    " 0 4 (fontified nil)) . 1300) (undo-tree-id4302 . -4) (undo-tree-id4303 . -4) (undo-tree-id4304 . -4) (undo-tree-id4305 . -4) (undo-tree-id4306 . -4) (undo-tree-id4307 . -4) (undo-tree-id4308 . -4) (undo-tree-id4309 . -4) (undo-tree-id4310 . -4) (undo-tree-id4311 . -4) (undo-tree-id4312 . -4) (undo-tree-id4313 . -4) (undo-tree-id4314 . -4) (undo-tree-id4315 . -4) (undo-tree-id4316 . -4) (undo-tree-id4317 . -4) (undo-tree-id4318 . -4) (undo-tree-id4319 . -4) (undo-tree-id4320 . -4) (undo-tree-id4321 . -4) (undo-tree-id4322 . -4) (undo-tree-id4323 . -4) (undo-tree-id4324 . -4) (undo-tree-id4325 . -4) (undo-tree-id4326 . -4) (undo-tree-id4327 . -4) (undo-tree-id4328 . -4) (undo-tree-id4329 . -4) (undo-tree-id4330 . -4) (undo-tree-id4331 . -4) (undo-tree-id4332 . -4) (undo-tree-id4333 . -4) (undo-tree-id4334 . -4) (undo-tree-id4335 . -4) (undo-tree-id4336 . -4) (undo-tree-id4337 . -4) (undo-tree-id4338 . -4) (undo-tree-id4339 . -4) (undo-tree-id4340 . -4) (1299 . 1305)) nil (26030 49793 321533 58000) 0 nil])
([nil nil ((#("curtime" 0 7 (fontified t)) . 1127) (undo-tree-id119 . -6)) ((1127 . 1134)) (26030 49126 698880 781000) 0 nil])
([nil nil ((apply -48 566 738 undo--wrap-and-run-primitive-undo 566 738 ((732 . 735) (728 . 731) (724 . 727) (718 . 721) (714 . 717) (693 . 696) (689 . 692) (676 . 679) (672 . 675) (651 . 654) (647 . 650) (621 . 624) (617 . 620) (593 . 596) (588 . 591) (567 . 570) 690)) (t 26030 49793 363240 454000)) nil (26030 49810 143497 740000) 0 nil])
([nil nil ((1127 . 1135) (#("pr" 0 2 (fontified nil)) . 1127) (1127 . 1129) (#("prevtime" 0 8 (fontified nil)) . -1127) (1127 . 1135) (#("pre" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -1127) (undo-tree-id117 . -3) (undo-tree-id118 . -3) 1130 (1127 . 1130)) ((#("pre" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 1127) (1127 . 1130) (#("prevtime" 0 8 (fontified nil)) . 1127) (1127 . 1135) (#("pr" 0 2 (fontified nil)) . 1127) (1127 . 1129) (#("prevtime" 0 8 (fontified t)) . 1127)) (26030 49126 622382 871000) 0 nil])
([nil nil ((1247 . 1251) (1247 . 1249)) nil (26030 49810 143486 754000) 0 nil])
([nil nil ((1137 . 1142) (1136 . 1137)) ((#(" " 0 1 (fontified nil)) . 1136) (undo-tree-id3026 . -1) (undo-tree-id3027 . -1) (undo-tree-id3028 . -1) (undo-tree-id3029 . -1) (undo-tree-id3030 . -1) (undo-tree-id3031 . -1) (undo-tree-id3032 . -1) (undo-tree-id3033 . -1) (undo-tree-id3034 . -1) (undo-tree-id3035 . -1) (undo-tree-id3036 . -1) (#("> 500" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t)) . 1137) (undo-tree-id3037 . -5) (undo-tree-id3038 . -5) (undo-tree-id3039 . -5) (undo-tree-id3040 . -5) (undo-tree-id3041 . -5) (undo-tree-id3042 . -5) (undo-tree-id3043 . -5) (undo-tree-id3044 . -5) (undo-tree-id3045 . -5) (undo-tree-id3046 . -5) (undo-tree-id3047 . -5)) (26030 49126 598731 964000) 0 nil])
([nil nil ((736 . 740) (t 26030 49810 179501 491000)) nil (26030 49873 639099 546000) 0 nil])
([nil nil ((1148 . 1154) (#("      " 0 6 (fontified nil)) . 1147) (1147 . 1154) (#("      " 0 6 (fontified nil)) . 1146) (undo-tree-id115 . -6) (undo-tree-id116 . -6) (1146 . 1153) (1145 . 1151) (1144 . 1146) (1143 . 1144)) ((#(" " 0 1 (fontified nil)) . 1143) (undo-tree-id2905 . -1) (undo-tree-id2906 . -1) (undo-tree-id2907 . -1) (undo-tree-id2908 . -1) (undo-tree-id2909 . -1) (undo-tree-id2910 . -1) (undo-tree-id2911 . -1) (undo-tree-id2912 . -1) (undo-tree-id2913 . -1) (undo-tree-id2914 . -1) (undo-tree-id2915 . -1) (undo-tree-id2916 . -1) (undo-tree-id2917 . -1) (undo-tree-id2918 . -1) (undo-tree-id2919 . -1) (undo-tree-id2920 . -1) (undo-tree-id2921 . -1) (undo-tree-id2922 . -1) (undo-tree-id2923 . -1) (undo-tree-id2924 . -1) (undo-tree-id2925 . -1) (undo-tree-id2926 . -1) (undo-tree-id2927 . -1) (undo-tree-id2928 . -1) (undo-tree-id2929 . -1) (undo-tree-id2930 . -1) (undo-tree-id2931 . -1) (undo-tree-id2932 . -1) (undo-tree-id2933 . -1) (undo-tree-id2934 . -1) (undo-tree-id2935 . -1) (#("{}" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-3-face) fontified nil)) . 1144) (undo-tree-id2936 . -1) (undo-tree-id2937 . -1) (undo-tree-id2938 . -1) (undo-tree-id2939 . -2) (undo-tree-id2940 . -1) (undo-tree-id2941 . -1) (undo-tree-id2942 . -1) (undo-tree-id2943 . -1) (undo-tree-id2944 . -1) (undo-tree-id2945 . -1) (undo-tree-id2946 . -1) (undo-tree-id2947 . -1) (undo-tree-id2948 . -1) (undo-tree-id2949 . -1) (undo-tree-id2950 . -1) (undo-tree-id2951 . -1) (undo-tree-id2952 . -1) (undo-tree-id2953 . -1) (undo-tree-id2954 . -1) (undo-tree-id2955 . -1) (undo-tree-id2956 . -1) (undo-tree-id2957 . -1) (undo-tree-id2958 . -1) (undo-tree-id2959 . -1) (undo-tree-id2960 . -1) (undo-tree-id2961 . -1) (undo-tree-id2962 . -1) (undo-tree-id2963 . -1) (undo-tree-id2964 . -1) (undo-tree-id2965 . -1) (undo-tree-id2966 . -1) (#("

    " 0 1 (fontified t) 1 2 (fontified nil) 2 6 (fontified t)) . 1145) (undo-tree-id2967 . -1) (undo-tree-id2968 . -1) (undo-tree-id2969 . -2) (undo-tree-id2970 . -1) (undo-tree-id2971 . -1) (undo-tree-id2972 . -1) (undo-tree-id2973 . -1) (undo-tree-id2974 . -1) (undo-tree-id2975 . -1) (undo-tree-id2976 . -1) (undo-tree-id2977 . -1) (undo-tree-id2978 . -1) (undo-tree-id2979 . -1) (undo-tree-id2980 . -1) (undo-tree-id2981 . -1) (undo-tree-id2982 . -1) (undo-tree-id2983 . -1) (undo-tree-id2984 . -1) (undo-tree-id2985 . -1) (undo-tree-id2986 . -1) (undo-tree-id2987 . -1) (undo-tree-id2988 . -1) (undo-tree-id2989 . -1) (undo-tree-id2990 . -1) (undo-tree-id2991 . -1) (undo-tree-id2992 . -1) (undo-tree-id2993 . -1) (undo-tree-id2994 . -1) (undo-tree-id2995 . -1) (undo-tree-id2996 . -1) (#("      
" 0 6 (fontified nil) 6 7 (fontified nil)) . 1146) (undo-tree-id2997 . -7) (undo-tree-id2998 . -7) (undo-tree-id2999 . -7) (undo-tree-id3000 . -7) (undo-tree-id3001 . -7) (undo-tree-id3002 . -7) (undo-tree-id3003 . -7) (undo-tree-id3004 . -7) (undo-tree-id3005 . -7) (undo-tree-id3006 . -7) (undo-tree-id3007 . -7) (undo-tree-id3008 . -7) (undo-tree-id3009 . -7) (undo-tree-id3010 . -7) (undo-tree-id3011 . -7) (undo-tree-id3012 . -7) (undo-tree-id3013 . -7) (undo-tree-id3014 . -7) (undo-tree-id3015 . -7) (undo-tree-id3016 . -7) (undo-tree-id3017 . -7) (undo-tree-id3018 . -7) (undo-tree-id3019 . -7) (undo-tree-id3020 . -7) (undo-tree-id3021 . -7) (undo-tree-id3022 . -7) (undo-tree-id3023 . -7) (undo-tree-id3024 . -7) (undo-tree-id3025 . -7) (1146 . 1152) (#("      
" 0 6 (fontified nil) 6 7 (fontified nil)) . 1147) (1147 . 1153) (#("      " 0 6 (fontified t)) . 1148)) (26030 49126 567108 650000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1163 . 1164) (nil fontified nil 740 . 1164) (nil fontified nil 739 . 740) (nil fontified nil 738 . 739) (738 . 1164)) nil (26030 49873 639095 537000) 0 nil])
([nil nil ((#("    uart_read_blocking(UART_ID, &data, 1);

    multicore_fifo_push_blocking((uint32_t) data);

" 0 4 (fontified t) 4 22 (fontified t) 22 23 (face (rainbow-delimiters-depth-3-face) fontified t) 23 40 (fontified t) 40 41 (face (rainbow-delimiters-depth-3-face) fontified t) 41 42 (fontified t) 42 76 (fontified t) 76 77 (face (rainbow-delimiters-depth-3-face) fontified t) 77 78 (face (rainbow-delimiters-depth-4-face) fontified t) 78 86 (face font-lock-type-face fontified t) 86 87 (face (rainbow-delimiters-depth-4-face) fontified t) 87 92 (fontified t) 92 93 (face (rainbow-delimiters-depth-3-face) fontified t) 93 96 (fontified t)) . 1162) (undo-tree-id109 . -95) (undo-tree-id110 . -95) (undo-tree-id111 . -95) (undo-tree-id112 . 1) (undo-tree-id113 . -95) (undo-tree-id114 . -95)) ((1162 . 1258)) (26030 49126 502657 512000) 0 nil])
([nil nil ((nil rear-nonsticky nil 699 . 700) (nil fontified nil 564 . 700) (564 . 700)) nil (26030 49873 639081 46000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1242 . 1243) (nil fontified nil 1147 . 1243) (1147 . 1243)) ((#("    uart_read_blocking(UART_ID, &data, 1);

    multicore_fifo_push_blocking((uint32_t) data);

" 0 4 (fontified nil) 4 22 (fontified nil) 22 23 (face (rainbow-delimiters-depth-4-face) fontified nil) 23 40 (fontified nil) 40 41 (face (rainbow-delimiters-depth-4-face) fontified nil) 41 43 (fontified nil) 43 44 (fontified nil) 44 48 (fontified nil) 48 76 (fontified nil) 76 77 (face (rainbow-delimiters-depth-4-face) fontified nil) 77 78 (face (rainbow-delimiters-depth-5-face) fontified nil) 78 86 (face font-lock-type-face fontified nil) 86 87 (face (rainbow-delimiters-depth-5-face) fontified nil) 87 92 (fontified nil) 92 93 (face (rainbow-delimiters-depth-4-face) fontified nil) 93 95 (fontified nil) 95 96 (fontified nil rear-nonsticky nil)) . 1147) (undo-tree-id2904 . -96) (nil rear-nonsticky t 1242 . 1243)) (26030 49126 482070 658000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1924) (undo-tree-id4352 . -4) (undo-tree-id4353 . -4) 1928 (1924 . 1928) (#("    " 0 4 (fontified nil)) . 1923) (undo-tree-id4354 . -4) (undo-tree-id4355 . -4) (1923 . 1928) (#("    " 0 4 (fontified nil)) . 1922) (undo-tree-id4356 . -4) (undo-tree-id4357 . -4) (1922 . 1927) (#("    " 0 4 (fontified nil)) . 1921) (undo-tree-id4358 . -4) (undo-tree-id4359 . -4) (1920 . 1926) (t 26030 49873 704893 803000)) nil (26030 49945 52141 509000) 0 nil])
([nil nil ((1147 . 1153) (#("    " 0 4 (fontified t)) . 1147)) ((1147 . 1151) (#("      " 0 6 (fontified t)) . 1147)) (26030 49126 480098 678000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2341 . 2342) (nil fontified nil 1922 . 2342) (1922 . 2342)) nil (26030 49945 52067 912000) 0 nil])
([nil nil ((1193 . 1199) (#("    " 0 4 (fontified t)) . 1193) 1199) ((1193 . 1197) (#("      " 0 6 (fontified t)) . 1193)) (26030 49126 469912 376000) 0 nil])
([nil nil ((2001 . 2007) (#("     " 0 5 (fontified nil)) . -2001) (undo-tree-id4351 . -5) (#(" " 0 1 (fontified t)) . 2006)) nil (26030 49945 52064 554000) 0 nil])
([nil nil ((1271 . 1272) (1264 . 1271) (#("cu" 0 2 (fontified nil)) . 1264) (1264 . 1266) (#("curtime" 0 7 (fontified nil)) . -1264) (1264 . 1271) (#("cur" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -1264) (undo-tree-id105 . -3) (undo-tree-id106 . -3) 1267 (1261 . 1267) (1253 . 1261) (#("pre" 0 3 (fontified nil)) . 1253) (1253 . 1256) (#("prevtime" 0 8 (fontified nil)) . -1253) (1253 . 1261) (#("pre" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -1253) (undo-tree-id107 . -3) (undo-tree-id108 . -3) 1256 (1253 . 1256) (1247 . 1253)) ((#("      " 0 6 (fontified nil)) . 1247) (#("pre" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 1253) (1253 . 1256) (#("prevtime" 0 8 (fontified nil)) . 1253) (1253 . 1261) (#("pre" 0 3 (fontified nil)) . 1253) (1253 . 1256) (#("prevtime" 0 8 (fontified nil)) . 1253) (#(" = cur" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil)) . 1261) (1264 . 1267) (#("curtime" 0 7 (fontified nil)) . 1264) (1264 . 1271) (#("cu" 0 2 (fontified nil)) . 1264) (1264 . 1266) (#("curtime" 0 7 (fontified nil)) . 1264) (#(";" 0 1 (fontified t)) . 1271)) (26030 49126 453138 486000) 0 nil])
([nil nil ((2058 . 2064) (#("     " 0 5 (fontified nil)) . -2058) (undo-tree-id4350 . -5) (#(" " 0 1 (fontified t)) . 2063)) nil (26030 49945 52058 960000) 0 nil])
([nil nil ((#("    sleep_ms(500);
" 0 12 (fontified t) 12 13 (face (rainbow-delimiters-depth-3-face) fontified t) 13 15 (fontified t) 15 16 (fontified t) 16 17 (face (rainbow-delimiters-depth-3-face) fontified t) 17 19 (fontified t)) . 1287) (undo-tree-id44 . 19) (undo-tree-id45 . -18) (undo-tree-id46 . -17) (undo-tree-id47 . -17) (undo-tree-id49 . -17) (undo-tree-id51 . -17) (undo-tree-id53 . -17) (undo-tree-id55 . -17) (undo-tree-id57 . -17) (undo-tree-id59 . -17) (undo-tree-id61 . -17) (undo-tree-id63 . -17) (undo-tree-id65 . -17) (undo-tree-id67 . -17) (undo-tree-id69 . -17) (undo-tree-id71 . -17) (undo-tree-id73 . -4) (undo-tree-id75 . -17) (undo-tree-id77 . -17) (undo-tree-id79 . -17) (undo-tree-id81 . -17) (undo-tree-id83 . -17) (undo-tree-id85 . -17) (undo-tree-id87 . -17) (undo-tree-id89 . -17) (undo-tree-id91 . -17) (undo-tree-id93 . -17) (undo-tree-id95 . -17) (undo-tree-id97 . -17) (undo-tree-id99 . -17) (undo-tree-id101 . -17) (undo-tree-id103 . -17) 1304) ((1287 . 1306)) (26030 49126 446765 432000) 0 nil])
([nil nil ((2115 . 2121) (#("     " 0 5 (fontified nil)) . -2115) (undo-tree-id4348 . -5) (undo-tree-id4349 . -5) (#(" " 0 1 (fontified t)) . 2120)) nil (26030 49945 52054 177000) 0 nil])
([nil nil ((1301 . 1302) (#("uint32_t ms" 0 8 (face font-lock-type-face fontified nil) 8 9 (fontified nil) 9 11 (face font-lock-variable-name-face fontified nil)) . 1301) (1300 . 1301) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1300 1300 nil nil nil t nil)) nil 29 nil #s(yas--field 1 1300 1300 nil nil nil t nil) nil nil)) (1291 . 1312) (#("sleep_ms(${1:uint32_t ms})" 0 26 (fontified nil)) . 1291) (1291 . 1317) (#("sleep_" 0 6 (fontified nil)) . 1291) (1291 . 1297) (#("sleep_ms(uint32_t ms)" 0 21 (fontified nil)) . -1291) (1291 . 1312) (#("sleep_m" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t)) . -1291) (undo-tree-id232 . -5) (undo-tree-id233 . -7) (undo-tree-id234 . -7) 1298 (1296 . 1298) (#("(" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -1296) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . 1297) (#("1" 0 1 (fontified t)) . -1297) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (#("0" 0 1 (fontified t)) . -1298) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (#("9" 0 1 (fontified t)) . -1299) (undo-tree-id241 . -1) (undo-tree-id242 . -1) 1300 (1297 . 1300) (1296 . 1298) (#(" " 0 1 (fontified t)) . -1296) (undo-tree-id243 . -1) (undo-tree-id244 . -1) 1297 (1291 . 1297) (1287 . 1291) (#("    " 0 4 (fontified nil)) . 1286) (undo-tree-id245 . -4) (undo-tree-id246 . -4) (1285 . 1291) (t 26030 46682 558582 444000)) ((#("
    
" 0 1 (fontified t) 1 5 (fontified nil) 5 6 (fontified nil)) . 1285) (undo-tree-id2897 . -6) (undo-tree-id2898 . -6) (undo-tree-id2899 . -6) (1286 . 1290) (#("    " 0 4 (fontified nil)) . 1287) (undo-tree-id2900 . -4) (#("sleep " 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil)) . 1291) (1296 . 1297) (#("()" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-3-face) fontified nil)) . 1296) (#("109" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 1297) (1297 . 1300) (1296 . 1298) (#("_m" 0 1 (fontified nil) 1 2 (fontified nil)) . 1296) (1291 . 1298) (#("sleep_ms(uint32_t ms)" 0 21 (fontified nil)) . 1291) (1291 . 1312) (#("sleep_" 0 6 (fontified nil)) . 1291) (1291 . 1297) (#("sleep_ms(${1:uint32_t ms})" 0 26 (fontified nil)) . 1291) (1291 . 1317) (#("sleep_ms(uint32_t ms)" 0 8 (fontified nil) 8 9 (face (rainbow-delimiters-depth-3-face) fontified nil) 9 17 (face font-lock-type-face fontified nil) 17 18 (fontified nil) 18 20 (face font-lock-variable-name-face fontified nil) 20 21 (face (rainbow-delimiters-depth-3-face) fontified nil)) . 1291) (undo-tree-id2901 . -9) (apply yas--snippet-revive 1291 1312 #s(yas--snippet nil (#s(yas--field 1 1300 1300 nil nil nil t nil)) nil 29 nil #s(yas--field 1 1300 1300 nil nil nil t nil) nil nil)) (#("1" 0 1 (fontified nil)) . 1300) (undo-tree-id2902 . -1) (1301 . 1312) (#("0" 0 1 (fontified nil)) . 1301) (undo-tree-id2903 . -1)) (26030 49126 419155 259000) 0 nil])
([nil nil ((2172 . 2178) (#("     " 0 5 (fontified nil)) . -2172) (undo-tree-id4347 . -5) (#(" " 0 1 (fontified t)) . 2177)) nil (26030 49945 52046 668000) 0 nil])
([nil nil ((1303 . 1304) (apply yas--snippet-revive 1291 1303 #s(yas--snippet nil (#s(yas--field 1 1300 1300 nil nil nil t nil)) nil 29 nil #s(yas--field 1 1300 1300 nil nil nil t nil) nil nil))) ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1300 1300 nil nil nil t nil)) nil 29 nil #s(yas--field 1 1300 1300 nil nil nil t nil) nil nil)) (#(";" 0 1 (fontified t)) . 1303)) (26030 49126 248491 986000) 0 nil])
([nil nil ((2229 . 2235)) nil (26030 49945 52042 715000) 0 nil])
([nil nil ((#("    
" 0 4 (fontified t) 4 5 (fontified t)) . 1529) (undo-tree-id250 . -4) (undo-tree-id251 . -3) (undo-tree-id252 . -3) 1532 (t 26030 46702 406678 947000)) ((1529 . 1534)) (26030 49126 173128 24000) 0 nil])
([nil nil ((2284 . 2290)) nil (26030 49945 52040 889000) 0 nil])
([nil nil ((#("    
" 0 4 (fontified t) 4 5 (fontified t)) . 1529) (undo-tree-id247 . -4) (undo-tree-id248 . -3) (undo-tree-id249 . -3) 1532) ((1529 . 1534)) (26030 49126 149636 389000) 0 nil])
([nil nil ((2341 . 2347) (#("     " 0 5 (fontified nil)) . -2341) (undo-tree-id4346 . -5) (#(" " 0 1 (fontified t)) . 2346)) nil (26030 49945 52037 755000) 0 nil])
([nil nil ((585 . 587)) ((#("

" 0 1 (fontified t) 1 2 (fontified t)) . 585) (undo-tree-id2791 . -1) (undo-tree-id2792 . 1) (undo-tree-id2793 . -1) (undo-tree-id2794 . -1) (undo-tree-id2795 . -1) (undo-tree-id2796 . -1) (undo-tree-id2797 . -1) (undo-tree-id2798 . -1) (undo-tree-id2799 . -1) (undo-tree-id2800 . -1) (undo-tree-id2801 . -1) (undo-tree-id2802 . -1) (undo-tree-id2803 . -1) (undo-tree-id2804 . -1) (undo-tree-id2805 . -1) (undo-tree-id2806 . -1) (undo-tree-id2807 . -1) (undo-tree-id2808 . -1) (undo-tree-id2809 . -1) (undo-tree-id2810 . -1) (undo-tree-id2811 . -1) (undo-tree-id2812 . -1) (undo-tree-id2813 . -1) (undo-tree-id2814 . -1) (undo-tree-id2815 . -1) (undo-tree-id2816 . -1) (undo-tree-id2817 . -1) (undo-tree-id2818 . -1) (undo-tree-id2819 . -1) (undo-tree-id2820 . -1) (undo-tree-id2821 . -1) (undo-tree-id2822 . -1) (undo-tree-id2823 . -1) (undo-tree-id2824 . -1) (undo-tree-id2825 . -1) (undo-tree-id2826 . -1) (undo-tree-id2827 . -1) (undo-tree-id2828 . -1) (undo-tree-id2829 . -1) (undo-tree-id2830 . -1) (undo-tree-id2831 . -1) (undo-tree-id2832 . -1) (undo-tree-id2833 . -1) (undo-tree-id2834 . -1) (undo-tree-id2835 . -1) (undo-tree-id2836 . -1) (undo-tree-id2837 . -1) (undo-tree-id2838 . -1) (undo-tree-id2839 . -1) (undo-tree-id2840 . -1) (undo-tree-id2841 . -1) (undo-tree-id2842 . -1) (undo-tree-id2843 . -1) (undo-tree-id2844 . -1) (undo-tree-id2845 . -1) (undo-tree-id2846 . -1) (undo-tree-id2847 . -1) (undo-tree-id2848 . -1) (undo-tree-id2849 . -1) (undo-tree-id2850 . -1) (undo-tree-id2851 . -1) (undo-tree-id2852 . -1) (undo-tree-id2853 . -1) (undo-tree-id2854 . -1) (undo-tree-id2855 . -1) (undo-tree-id2856 . -1) (undo-tree-id2857 . -1) (undo-tree-id2858 . -1) (undo-tree-id2859 . -1) (undo-tree-id2860 . -1) (undo-tree-id2861 . -1) (undo-tree-id2862 . -1) (undo-tree-id2863 . -1) (undo-tree-id2864 . -1) (undo-tree-id2865 . -1) (undo-tree-id2866 . -1) (undo-tree-id2867 . -1) (undo-tree-id2868 . -1) (undo-tree-id2869 . -1) (undo-tree-id2870 . -1) (undo-tree-id2871 . -1) (undo-tree-id2872 . -1) (undo-tree-id2873 . -1) (undo-tree-id2874 . -1) (undo-tree-id2875 . -1) (undo-tree-id2876 . -1) (undo-tree-id2877 . -1) (undo-tree-id2878 . -1) (undo-tree-id2879 . -1) (undo-tree-id2880 . -1) (undo-tree-id2881 . -1) (undo-tree-id2882 . -1) (undo-tree-id2883 . -1) (undo-tree-id2884 . -1) (undo-tree-id2885 . -1) (undo-tree-id2886 . -1) (undo-tree-id2887 . -1) (undo-tree-id2888 . -1) (undo-tree-id2889 . -1) (undo-tree-id2890 . -1) (undo-tree-id2891 . -1) (undo-tree-id2892 . -1) (undo-tree-id2893 . -1) (undo-tree-id2894 . -1) (undo-tree-id2895 . -1) (undo-tree-id2896 . -1)) (26030 49126 127210 115000) 0 nil])
([nil nil ((2348 . 2352) (#("  " 0 2 (fontified t)) . -2348) (undo-tree-id4344 . -2) (undo-tree-id4345 . -2) 2350) nil (26030 49945 52031 677000) 0 nil])
([nil nil ((nil rear-nonsticky nil 766 . 767) (nil fontified nil 586 . 767) (586 . 767)) ((#("
float weight(uint8_t inp) {
  float retval = 0;

  for (int i = 0; i < 8; i++) {
    int thing = ((inp & (1 << i)) >> i);

    retval += thing * (3.5 - i);

  }

  return retval;
}" 0 1 (fontified nil) 1 5 (face font-lock-type-face fontified nil) 5 6 (face font-lock-type-face c-type c-decl-id-start fontified nil) 6 7 (fontified nil) 7 13 (face font-lock-function-name-face fontified nil) 13 14 (face (rainbow-delimiters-depth-1-face) c-type c-decl-arg-start fontified nil) 14 21 (face font-lock-type-face fontified nil) 21 22 (fontified nil) 22 25 (face font-lock-variable-name-face fontified nil) 25 26 (face (rainbow-delimiters-depth-1-face) fontified nil) 26 27 (fontified nil) 27 28 (face (rainbow-delimiters-depth-1-face) fontified nil) 28 31 (fontified nil) 31 35 (face font-lock-type-face fontified nil) 35 36 (face font-lock-type-face c-type c-decl-id-start fontified nil) 36 37 (fontified nil) 37 43 (face font-lock-variable-name-face fontified nil) 43 52 (fontified nil) 52 55 (face font-lock-keyword-face fontified nil) 55 56 (fontified nil) 56 57 (face (rainbow-delimiters-depth-2-face) fontified nil) 57 59 (face font-lock-type-face fontified nil) 59 60 (face font-lock-type-face c-type c-decl-id-start fontified nil) 60 61 (fontified nil) 61 62 (face font-lock-variable-name-face fontified nil) 62 78 (fontified nil) 78 79 (face (rainbow-delimiters-depth-2-face) fontified nil) 79 80 (fontified nil) 80 81 (face (rainbow-delimiters-depth-2-face) fontified nil) 81 86 (fontified nil) 86 88 (face font-lock-type-face fontified nil) 88 89 (face font-lock-type-face c-type c-decl-id-start fontified nil) 89 90 (fontified nil) 90 95 (face font-lock-variable-name-face fontified nil) 95 98 (fontified nil) 98 99 (face (rainbow-delimiters-depth-3-face) fontified nil) 99 100 (face (rainbow-delimiters-depth-4-face) fontified nil) 100 106 (fontified nil) 106 107 (face (rainbow-delimiters-depth-5-face) fontified nil) 107 113 (fontified nil) 113 114 (face (rainbow-delimiters-depth-5-face) fontified nil) 114 115 (face (rainbow-delimiters-depth-4-face) fontified nil) 115 120 (fontified nil) 120 121 (face (rainbow-delimiters-depth-3-face) fontified nil) 121 146 (fontified nil) 146 147 (face (rainbow-delimiters-depth-3-face) fontified nil) 147 154 (fontified nil) 154 155 (face (rainbow-delimiters-depth-3-face) fontified nil) 155 160 (fontified nil) 160 161 (face (rainbow-delimiters-depth-2-face) fontified nil) 161 165 (fontified nil) 165 171 (face font-lock-keyword-face fontified nil) 171 180 (fontified nil) 180 181 (face (rainbow-delimiters-depth-1-face) fontified nil rear-nonsticky nil)) . 586) (undo-tree-id2724 . -181) (undo-tree-id2725 . -181) (undo-tree-id2726 . -181) (undo-tree-id2727 . -181) (undo-tree-id2728 . -181) (undo-tree-id2729 . -181) (undo-tree-id2730 . -181) (undo-tree-id2731 . -181) (undo-tree-id2732 . -180) (undo-tree-id2733 . -180) (undo-tree-id2734 . -181) (undo-tree-id2735 . -181) (undo-tree-id2736 . -181) (undo-tree-id2737 . -181) (undo-tree-id2738 . -181) (undo-tree-id2739 . -181) (undo-tree-id2740 . -181) (undo-tree-id2741 . -181) (undo-tree-id2742 . -181) (undo-tree-id2743 . -181) (undo-tree-id2744 . -181) (undo-tree-id2745 . -181) (undo-tree-id2746 . -181) (undo-tree-id2747 . -181) (undo-tree-id2748 . -181) (undo-tree-id2749 . -181) (undo-tree-id2750 . -181) (undo-tree-id2751 . -181) (undo-tree-id2752 . -181) (undo-tree-id2753 . -181) (undo-tree-id2754 . -181) (undo-tree-id2755 . -181) (undo-tree-id2756 . -181) (undo-tree-id2757 . -181) (undo-tree-id2758 . -181) (undo-tree-id2759 . -181) (undo-tree-id2760 . -181) (undo-tree-id2761 . -181) (undo-tree-id2762 . -181) (undo-tree-id2763 . -181) (undo-tree-id2764 . -181) (undo-tree-id2765 . -181) (undo-tree-id2766 . -181) (undo-tree-id2767 . -181) (undo-tree-id2768 . -181) (undo-tree-id2769 . -181) (undo-tree-id2770 . -180) (undo-tree-id2771 . -181) (undo-tree-id2772 . -180) (undo-tree-id2773 . -180) (undo-tree-id2774 . -180) (undo-tree-id2775 . -180) (undo-tree-id2776 . -180) (undo-tree-id2777 . -180) (undo-tree-id2778 . -180) (undo-tree-id2779 . -180) (undo-tree-id2780 . -180) (undo-tree-id2781 . -180) (undo-tree-id2782 . -180) (undo-tree-id2783 . -180) (undo-tree-id2784 . -180) (undo-tree-id2785 . -180) (undo-tree-id2786 . -180) (undo-tree-id2787 . -180) (undo-tree-id2788 . -180) (undo-tree-id2789 . -180) (undo-tree-id2790 . -180) (nil fontified t 757 . 766) (nil fontified t 751 . 757) (nil fontified t 747 . 751) (nil fontified t 746 . 747) (nil fontified t 741 . 746) (nil fontified t 740 . 741) (nil fontified t 733 . 740) (nil fontified t 732 . 733) (nil fontified t 707 . 732) (nil fontified t 706 . 707) (nil fontified t 701 . 706) (nil fontified t 700 . 701) (nil fontified t 699 . 700) (nil fontified t 693 . 699) (nil fontified t 692 . 693) (nil fontified t 686 . 692) (nil fontified t 685 . 686) (nil fontified t 684 . 685) (nil fontified t 681 . 684) (nil fontified t 676 . 681) (nil fontified t 675 . 676) (nil fontified t 674 . 675) (nil fontified t 672 . 674) (nil fontified t 667 . 672) (nil fontified t 666 . 667) (nil fontified t 665 . 666) (nil fontified t 664 . 665) (nil fontified t 648 . 664) (nil fontified t 647 . 648) (nil fontified t 646 . 647) (nil fontified t 645 . 646) (nil fontified t 643 . 645) (nil fontified t 642 . 643) (nil fontified t 641 . 642) (nil fontified t 638 . 641) (nil fontified t 629 . 638) (nil fontified t 623 . 629) (nil fontified t 622 . 623) (nil fontified t 621 . 622) (nil fontified t 617 . 621) (nil fontified t 614 . 617) (nil fontified t 613 . 614) (nil fontified t 612 . 613) (nil fontified t 611 . 612) (nil fontified t 608 . 611) (nil fontified t 607 . 608) (nil fontified t 600 . 607) (nil fontified t 599 . 600) (nil fontified t 593 . 599) (nil fontified t 592 . 593) (nil fontified t 591 . 592) (nil fontified t 587 . 591) (nil fontified t 586 . 587) (nil rear-nonsticky t 766 . 767)) (26030 49126 56917 511000) 0 nil])
([nil nil ((2354 . 2358)) nil (26030 49945 52010 202000) 0 nil])
([nil nil ((767 . 770)) ((#("


" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . 767) (undo-tree-id2680 . -3) (undo-tree-id2681 . -3) (undo-tree-id2682 . -3) (undo-tree-id2683 . -3) (undo-tree-id2684 . -3) (undo-tree-id2685 . -3) (undo-tree-id2686 . -3) (undo-tree-id2687 . -3) (undo-tree-id2688 . -3) (undo-tree-id2689 . -3) (undo-tree-id2690 . -3) (undo-tree-id2691 . -3) (undo-tree-id2692 . -3) (undo-tree-id2693 . -3) (undo-tree-id2694 . -3) (undo-tree-id2695 . -3) (undo-tree-id2696 . -3) (undo-tree-id2697 . -3) (undo-tree-id2698 . -3) (undo-tree-id2699 . -3) (undo-tree-id2700 . -3) (undo-tree-id2701 . -3) (undo-tree-id2702 . -3) (undo-tree-id2703 . -3) (undo-tree-id2704 . -3) (undo-tree-id2705 . -3) (undo-tree-id2706 . -3) (undo-tree-id2707 . -3) (undo-tree-id2708 . -3) (undo-tree-id2709 . -3) (undo-tree-id2710 . -3) (undo-tree-id2711 . -3) (undo-tree-id2712 . -3) (undo-tree-id2713 . -3) (undo-tree-id2714 . -3) (undo-tree-id2715 . -3) (undo-tree-id2716 . -3) (undo-tree-id2717 . -3) (undo-tree-id2718 . -3) (undo-tree-id2719 . -3) (undo-tree-id2720 . -3) (undo-tree-id2721 . -3) (undo-tree-id2722 . -3) (undo-tree-id2723 . -3)) (26030 49126 35252 550000) 0 nil])
([nil nil ((2359 . 2363)) nil (26030 49945 52008 264000) 0 nil])
([nil nil ((463 . 465) (t 26030 46795 624634 63000)) ((#("

" 0 1 (fontified t) 1 2 (fontified t)) . 463)) (26030 49126 1969 524000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . 1944)) nil (26030 49945 52003 518000) 0 nil])
([nil nil ((nil rear-nonsticky nil 640 . 641) (nil fontified nil 463 . 641) (463 . 641)) ((#("uint8_t class[7] =  {
  0b00011000,
  0b11111111,
  0b00011111,
  0b11111000,
  0b00000000,
  0b01100110,
};





enum cla {
  MID,
  FULL,
  RIG,
  LFT,
  NUL,
  TT,
  JPT,
};

" 0 6 (face font-lock-type-face fontified nil) 6 7 (face font-lock-type-face c-type c-decl-id-start fontified nil) 7 8 (fontified nil) 8 13 (face font-lock-variable-name-face fontified nil) 13 14 (face (rainbow-delimiters-depth-1-face) fontified nil) 14 15 (fontified nil) 15 16 (face (rainbow-delimiters-depth-1-face) fontified nil) 16 20 (fontified nil) 20 21 (face (rainbow-delimiters-depth-1-face) fontified nil) 21 106 (fontified nil) 106 107 (face (rainbow-delimiters-depth-1-face) fontified nil) 107 114 (fontified nil) 114 117 (face font-lock-keyword-face fontified nil) 117 118 (c-type c-decl-type-start face font-lock-keyword-face fontified nil) 118 119 (fontified nil) 119 122 (face font-lock-type-face fontified nil) 122 123 (fontified nil) 123 124 (face (rainbow-delimiters-depth-1-face) c-type c-not-decl fontified nil) 124 127 (fontified nil) 127 130 (face font-lock-variable-name-face fontified nil) 130 131 (c-type c-decl-id-start fontified nil) 131 134 (fontified nil) 134 138 (face font-lock-variable-name-face fontified nil) 138 139 (c-type c-decl-id-start fontified nil) 139 142 (fontified nil) 142 145 (face font-lock-variable-name-face fontified nil) 145 146 (c-type c-decl-id-start fontified nil) 146 149 (fontified nil) 149 152 (face font-lock-variable-name-face fontified nil) 152 153 (c-type c-decl-id-start fontified nil) 153 156 (fontified nil) 156 159 (face font-lock-variable-name-face fontified nil) 159 160 (c-type c-decl-id-start fontified nil) 160 163 (fontified nil) 163 165 (face font-lock-variable-name-face fontified nil) 165 166 (c-type c-decl-id-start fontified nil) 166 169 (fontified nil) 169 172 (face font-lock-variable-name-face fontified nil) 172 173 (c-type c-decl-id-start fontified nil) 173 174 (fontified nil) 174 175 (face (rainbow-delimiters-depth-1-face) fontified nil) 175 177 (fontified nil) 177 178 (fontified nil rear-nonsticky nil)) . 463) (nil fontified t 638 . 640) (nil fontified t 637 . 638) (nil fontified t 636 . 637) (nil fontified t 635 . 636) (nil fontified t 632 . 635) (nil fontified t 629 . 632) (nil fontified t 628 . 629) (nil fontified t 626 . 628) (nil fontified t 623 . 626) (nil fontified t 622 . 623) (nil fontified t 619 . 622) (nil fontified t 616 . 619) (nil fontified t 615 . 616) (nil fontified t 612 . 615) (nil fontified t 609 . 612) (nil fontified t 608 . 609) (nil fontified t 605 . 608) (nil fontified t 602 . 605) (nil fontified t 601 . 602) (nil fontified t 597 . 601) (nil fontified t 594 . 597) (nil fontified t 593 . 594) (nil fontified t 590 . 593) (nil fontified t 587 . 590) (nil fontified t 586 . 587) (nil fontified t 585 . 586) (nil fontified t 582 . 585) (nil fontified t 581 . 582) (nil fontified t 580 . 581) (nil fontified t 577 . 580) (nil fontified t 570 . 577) (nil fontified t 569 . 570) (nil fontified t 484 . 569) (nil fontified t 483 . 484) (nil fontified t 479 . 483) (nil fontified t 478 . 479) (nil fontified t 477 . 478) (nil fontified t 476 . 477) (nil fontified t 471 . 476) (nil fontified t 470 . 471) (nil fontified t 469 . 470) (nil fontified t 463 . 469) (nil rear-nonsticky t 640 . 641)) (26030 49125 939101 707000) 0 nil])
([nil nil ((1944 . 1948)) nil (26030 49945 51992 580000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1309 . 1310) (nil fontified nil 950 . 1310) (950 . 1310) (t 26030 46827 413913 760000)) ((#("enum cla get_class(uint8_t inp) {

  if (cntbits(inp) > 6) {
    return FULL;
  } else if (cntbits(inp) == 0) {
    return NUL;
  }

  
  float wei = weight(inp) ;

  
  if (wei*wei < 2) {

    if (!((inp & (1 << 3)) && (inp & (1 << 4)))) {
	return TT;
    }

    return MID;
  }

  if (weight(inp) < 0) {
    return RIG;
  } else {
    return LFT;
  }

  
}

" 0 4 (face font-lock-keyword-face fontified nil) 4 5 (fontified nil) 5 7 (face font-lock-type-face fontified nil) 7 8 (face font-lock-type-face c-type c-decl-id-start fontified nil) 8 9 (fontified nil) 9 18 (face font-lock-function-name-face fontified nil) 18 19 (face (rainbow-delimiters-depth-1-face) c-type c-decl-arg-start fontified nil) 19 26 (face font-lock-type-face fontified nil) 26 27 (fontified nil) 27 30 (face font-lock-variable-name-face fontified nil) 30 31 (face (rainbow-delimiters-depth-1-face) fontified nil) 31 32 (fontified nil) 32 33 (face (rainbow-delimiters-depth-1-face) fontified nil) 33 37 (fontified nil) 37 39 (face font-lock-keyword-face fontified nil) 39 40 (fontified nil) 40 41 (face (rainbow-delimiters-depth-2-face) fontified nil) 41 48 (fontified nil) 48 49 (face (rainbow-delimiters-depth-3-face) fontified nil) 49 52 (fontified nil) 52 53 (face (rainbow-delimiters-depth-3-face) fontified nil) 53 57 (fontified nil) 57 58 (face (rainbow-delimiters-depth-2-face) fontified nil) 58 59 (fontified nil) 59 60 (face (rainbow-delimiters-depth-2-face) fontified nil) 60 65 (fontified nil) 65 71 (face font-lock-keyword-face fontified nil) 71 80 (fontified nil) 80 81 (face (rainbow-delimiters-depth-2-face) fontified nil) 81 82 (fontified nil) 82 86 (face font-lock-keyword-face fontified nil) 86 87 (fontified nil) 87 89 (face font-lock-keyword-face fontified nil) 89 90 (fontified nil) 90 91 (face (rainbow-delimiters-depth-2-face) fontified nil) 91 98 (fontified nil) 98 99 (face (rainbow-delimiters-depth-3-face) fontified nil) 99 102 (fontified nil) 102 103 (face (rainbow-delimiters-depth-3-face) fontified nil) 103 108 (fontified nil) 108 109 (face (rainbow-delimiters-depth-2-face) fontified nil) 109 110 (fontified nil) 110 111 (face (rainbow-delimiters-depth-2-face) fontified nil) 111 116 (fontified nil) 116 122 (face font-lock-keyword-face fontified nil) 122 130 (fontified nil) 130 131 (face (rainbow-delimiters-depth-2-face) fontified nil) 131 138 (fontified nil) 138 142 (face font-lock-type-face fontified nil) 142 143 (face font-lock-type-face c-type c-decl-id-start fontified nil) 143 144 (fontified nil) 144 147 (face font-lock-variable-name-face fontified nil) 147 156 (fontified nil) 156 157 (face (rainbow-delimiters-depth-2-face) fontified nil) 157 160 (fontified nil) 160 161 (face (rainbow-delimiters-depth-2-face) fontified nil) 161 170 (fontified nil) 170 172 (face font-lock-keyword-face fontified nil) 172 173 (fontified nil) 173 174 (face (rainbow-delimiters-depth-2-face) fontified nil) 174 185 (fontified nil) 185 186 (face (rainbow-delimiters-depth-2-face) fontified nil) 186 187 (fontified nil) 187 188 (face (rainbow-delimiters-depth-2-face) fontified nil) 188 194 (fontified nil) 194 196 (face font-lock-keyword-face fontified nil) 196 197 (fontified nil) 197 198 (face (rainbow-delimiters-depth-3-face) fontified nil) 198 199 (face font-lock-negation-char-face fontified nil) 199 200 (face (rainbow-delimiters-depth-4-face) fontified nil) 200 201 (face (rainbow-delimiters-depth-5-face) fontified nil) 201 207 (fontified nil) 207 208 (face (rainbow-delimiters-depth-6-face) fontified nil) 208 214 (fontified nil) 214 215 (face (rainbow-delimiters-depth-6-face) fontified nil) 215 216 (face (rainbow-delimiters-depth-5-face) fontified nil) 216 220 (fontified nil) 220 221 (face (rainbow-delimiters-depth-5-face) fontified nil) 221 227 (fontified nil) 227 228 (face (rainbow-delimiters-depth-6-face) fontified nil) 228 234 (fontified nil) 234 235 (face (rainbow-delimiters-depth-6-face) fontified nil) 235 236 (face (rainbow-delimiters-depth-5-face) fontified nil) 236 237 (face (rainbow-delimiters-depth-4-face) fontified nil) 237 238 (face (rainbow-delimiters-depth-3-face) fontified nil) 238 239 (fontified nil) 239 240 (face (rainbow-delimiters-depth-3-face) fontified nil) 240 242 (fontified nil) 242 248 (face font-lock-keyword-face fontified nil) 248 257 (fontified nil) 257 258 (face (rainbow-delimiters-depth-3-face) fontified nil) 258 264 (fontified nil) 264 270 (face font-lock-keyword-face fontified nil) 270 278 (fontified nil) 278 279 (face (rainbow-delimiters-depth-2-face) fontified nil) 279 283 (fontified nil) 283 285 (face font-lock-keyword-face fontified nil) 285 286 (fontified nil) 286 287 (face (rainbow-delimiters-depth-2-face) fontified nil) 287 293 (fontified nil) 293 294 (face (rainbow-delimiters-depth-3-face) fontified nil) 294 297 (fontified nil) 297 298 (face (rainbow-delimiters-depth-3-face) fontified nil) 298 302 (fontified nil) 302 303 (face (rainbow-delimiters-depth-2-face) fontified nil) 303 304 (fontified nil) 304 305 (face (rainbow-delimiters-depth-2-face) fontified nil) 305 310 (fontified nil) 310 316 (face font-lock-keyword-face fontified nil) 316 324 (fontified nil) 324 325 (face (rainbow-delimiters-depth-2-face) fontified nil) 325 326 (fontified nil) 326 330 (face font-lock-keyword-face fontified nil) 330 331 (fontified nil) 331 332 (face (rainbow-delimiters-depth-2-face) fontified nil) 332 337 (fontified nil) 337 343 (face font-lock-keyword-face fontified nil) 343 351 (fontified nil) 351 352 (face (rainbow-delimiters-depth-2-face) fontified nil) 352 357 (fontified nil) 357 358 (face (rainbow-delimiters-depth-1-face) fontified nil) 358 359 (fontified nil) 359 360 (fontified nil rear-nonsticky nil)) . 950) (undo-tree-id2678 . 2) (undo-tree-id2679 . -357) (nil rear-nonsticky t 1309 . 1310)) (26030 49125 909975 329000) 0 nil])
([nil nil ((#("state" 0 5 (fontified t)) . 1419) (undo-tree-id4364 . -4) (t 26030 49945 118982 97000)) nil (26030 49959 385427 177000) 0 nil])
([nil nil ((#("enum cla get_class(uint8_t inp) {

  if (cntbits(inp) > 6) {
    return FULL;
  } else if (cntbits(inp) == 0) {
    return NUL;
  }

  
  float wei = weight(inp) ;

  
  if (wei*wei < 2) {

    if (!((inp & (1 << 3)) && (inp & (1 << 4)))) {
	return TT;
    }

    return MID;
  }

  if (weight(inp) < 0) {
    return RIG;
  } else {
    return LFT;
  }

  
}" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 7 (face font-lock-type-face fontified t) 7 8 (face font-lock-type-face c-type c-decl-id-start fontified t) 8 9 (fontified t) 9 18 (face font-lock-function-name-face fontified t) 18 19 (face (rainbow-delimiters-depth-1-face) c-type c-decl-arg-start fontified t) 19 26 (face font-lock-type-face fontified t) 26 27 (fontified t) 27 30 (face font-lock-variable-name-face fontified t) 30 31 (face (rainbow-delimiters-depth-1-face) fontified t) 31 32 (fontified t) 32 33 (face (rainbow-delimiters-depth-1-face) fontified t) 33 37 (fontified t) 37 39 (face font-lock-keyword-face fontified t) 39 40 (fontified t) 40 41 (face (rainbow-delimiters-depth-2-face) fontified t) 41 48 (fontified t) 48 49 (face (rainbow-delimiters-depth-3-face) fontified t) 49 52 (fontified t) 52 53 (face (rainbow-delimiters-depth-3-face) fontified t) 53 57 (fontified t) 57 58 (face (rainbow-delimiters-depth-2-face) fontified t) 58 59 (fontified t) 59 60 (face (rainbow-delimiters-depth-2-face) fontified t) 60 65 (fontified t) 65 71 (face font-lock-keyword-face fontified t) 71 80 (fontified t) 80 81 (face (rainbow-delimiters-depth-2-face) fontified t) 81 82 (fontified t) 82 86 (face font-lock-keyword-face fontified t) 86 87 (fontified t) 87 89 (face font-lock-keyword-face fontified t) 89 90 (fontified t) 90 91 (face (rainbow-delimiters-depth-2-face) fontified t) 91 98 (fontified t) 98 99 (face (rainbow-delimiters-depth-3-face) fontified t) 99 102 (fontified t) 102 103 (face (rainbow-delimiters-depth-3-face) fontified t) 103 108 (fontified t) 108 109 (face (rainbow-delimiters-depth-2-face) fontified t) 109 110 (fontified t) 110 111 (face (rainbow-delimiters-depth-2-face) fontified t) 111 116 (fontified t) 116 122 (face font-lock-keyword-face fontified t) 122 130 (fontified t) 130 131 (face (rainbow-delimiters-depth-2-face) fontified t) 131 138 (fontified t) 138 142 (face font-lock-type-face fontified t) 142 143 (face font-lock-type-face c-type c-decl-id-start fontified t) 143 144 (fontified t) 144 147 (face font-lock-variable-name-face fontified t) 147 156 (fontified t) 156 157 (face (rainbow-delimiters-depth-2-face) fontified t) 157 160 (fontified t) 160 161 (face (rainbow-delimiters-depth-2-face) fontified t) 161 170 (fontified t) 170 172 (face font-lock-keyword-face fontified t) 172 173 (fontified t) 173 174 (face (rainbow-delimiters-depth-2-face) fontified t) 174 185 (fontified t) 185 186 (face (rainbow-delimiters-depth-2-face) fontified t) 186 187 (fontified t) 187 188 (face (rainbow-delimiters-depth-2-face) fontified t) 188 194 (fontified t) 194 196 (face font-lock-keyword-face fontified t) 196 197 (fontified t) 197 198 (face (rainbow-delimiters-depth-3-face) fontified t) 198 199 (face font-lock-negation-char-face fontified t) 199 200 (face (rainbow-delimiters-depth-4-face) fontified t) 200 201 (face (rainbow-delimiters-depth-5-face) fontified t) 201 207 (fontified t) 207 208 (face (rainbow-delimiters-depth-6-face) fontified t) 208 214 (fontified t) 214 215 (face (rainbow-delimiters-depth-6-face) fontified t) 215 216 (face (rainbow-delimiters-depth-5-face) fontified t) 216 220 (fontified t) 220 221 (face (rainbow-delimiters-depth-5-face) fontified t) 221 227 (fontified t) 227 228 (face (rainbow-delimiters-depth-6-face) fontified t) 228 234 (fontified t) 234 235 (face (rainbow-delimiters-depth-6-face) fontified t) 235 236 (face (rainbow-delimiters-depth-5-face) fontified t) 236 237 (face (rainbow-delimiters-depth-4-face) fontified t) 237 238 (face (rainbow-delimiters-depth-3-face) fontified t) 238 239 (fontified t) 239 240 (face (rainbow-delimiters-depth-3-face) fontified t) 240 242 (fontified t) 242 248 (face font-lock-keyword-face fontified t) 248 257 (fontified t) 257 258 (face (rainbow-delimiters-depth-3-face) fontified t) 258 264 (fontified t) 264 270 (face font-lock-keyword-face fontified t) 270 278 (fontified t) 278 279 (face (rainbow-delimiters-depth-2-face) fontified t) 279 283 (fontified t) 283 285 (face font-lock-keyword-face fontified t) 285 286 (fontified t) 286 287 (face (rainbow-delimiters-depth-2-face) fontified t) 287 293 (fontified t) 293 294 (face (rainbow-delimiters-depth-3-face) fontified t) 294 297 (fontified t) 297 298 (face (rainbow-delimiters-depth-3-face) fontified t) 298 302 (fontified t) 302 303 (face (rainbow-delimiters-depth-2-face) fontified t) 303 304 (fontified t) 304 305 (face (rainbow-delimiters-depth-2-face) fontified t) 305 310 (fontified t) 310 316 (face font-lock-keyword-face fontified t) 316 324 (fontified t) 324 325 (face (rainbow-delimiters-depth-2-face) fontified t) 325 326 (fontified t) 326 330 (face font-lock-keyword-face fontified t) 330 331 (fontified t) 331 332 (face (rainbow-delimiters-depth-2-face) fontified t) 332 337 (fontified t) 337 343 (face font-lock-keyword-face fontified t) 343 351 (fontified t) 351 352 (face (rainbow-delimiters-depth-2-face) fontified t) 352 357 (fontified t) 357 358 (face (rainbow-delimiters-depth-1-face) fontified t)) . 950) (undo-tree-id253 . -357) (undo-tree-id254 . -357) (undo-tree-id255 . -357) (undo-tree-id256 . -253) (undo-tree-id257 . -357) (t 26030 46861 59806 85000)) ((950 . 1308)) (26030 49125 878999 453000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 1419) (undo-tree-id4363 . -1)) nil (26030 49959 385421 907000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1374 . 1375) (nil fontified nil 950 . 1375) (950 . 1375)) ((#("
enum cla get_thing(uint8_t inp) {


  if(cntbits(inp ^ class[NUL]) <= 1) {
    return NUL;
  }

  if(cntbits(inp ^ class[FULL]) <= 1) {
    return FULL;
  }




  if(cntbits(inp ^ class[RIG]) <= 2) {
    return RIG;
  }

  if(cntbits(inp ^ class[LFT]) <= 2) {
    return LFT;
  }



  if(cntbits(inp ^ class[MID]) <= 1) {
    return MID;
  }



  if(cntbits(inp ^ class[TT]) <= 1) {
    return TT;
  }

  return JPT;

  
}

" 0 1 (fontified nil) 1 5 (face font-lock-keyword-face fontified nil) 5 6 (fontified nil) 6 8 (face font-lock-type-face fontified nil) 8 9 (face font-lock-type-face c-type c-decl-id-start fontified nil) 9 10 (fontified nil) 10 19 (face font-lock-function-name-face fontified nil) 19 20 (face (rainbow-delimiters-depth-1-face) c-type c-decl-arg-start fontified nil) 20 27 (face font-lock-type-face fontified nil) 27 28 (fontified nil) 28 31 (face font-lock-variable-name-face fontified nil) 31 32 (face (rainbow-delimiters-depth-1-face) fontified nil) 32 33 (fontified nil) 33 34 (face (rainbow-delimiters-depth-1-face) fontified nil) 34 39 (fontified nil) 39 41 (face font-lock-keyword-face fontified nil) 41 42 (face (rainbow-delimiters-depth-2-face) fontified nil) 42 49 (fontified nil) 49 50 (face (rainbow-delimiters-depth-3-face) fontified nil) 50 61 (fontified nil) 61 62 (face (rainbow-delimiters-depth-4-face) fontified nil) 62 65 (fontified nil) 65 66 (face (rainbow-delimiters-depth-4-face) fontified nil) 66 67 (face (rainbow-delimiters-depth-3-face) fontified nil) 67 72 (fontified nil) 72 73 (face (rainbow-delimiters-depth-2-face) fontified nil) 73 74 (fontified nil) 74 75 (face (rainbow-delimiters-depth-2-face) fontified nil) 75 80 (fontified nil) 80 86 (face font-lock-keyword-face fontified nil) 86 94 (fontified nil) 94 95 (face (rainbow-delimiters-depth-2-face) fontified nil) 95 99 (fontified nil) 99 101 (face font-lock-keyword-face fontified nil) 101 102 (face (rainbow-delimiters-depth-2-face) fontified nil) 102 109 (fontified nil) 109 110 (face (rainbow-delimiters-depth-3-face) fontified nil) 110 121 (fontified nil) 121 122 (face (rainbow-delimiters-depth-4-face) fontified nil) 122 126 (fontified nil) 126 127 (face (rainbow-delimiters-depth-4-face) fontified nil) 127 128 (face (rainbow-delimiters-depth-3-face) fontified nil) 128 133 (fontified nil) 133 134 (face (rainbow-delimiters-depth-2-face) fontified nil) 134 135 (fontified nil) 135 136 (face (rainbow-delimiters-depth-2-face) fontified nil) 136 141 (fontified nil) 141 147 (face font-lock-keyword-face fontified nil) 147 156 (fontified nil) 156 157 (face (rainbow-delimiters-depth-2-face) fontified nil) 157 164 (fontified nil) 164 166 (face font-lock-keyword-face fontified nil) 166 167 (face (rainbow-delimiters-depth-2-face) fontified nil) 167 174 (fontified nil) 174 175 (face (rainbow-delimiters-depth-3-face) fontified nil) 175 186 (fontified nil) 186 187 (face (rainbow-delimiters-depth-4-face) fontified nil) 187 190 (fontified nil) 190 191 (face (rainbow-delimiters-depth-4-face) fontified nil) 191 192 (face (rainbow-delimiters-depth-3-face) fontified nil) 192 197 (fontified nil) 197 198 (face (rainbow-delimiters-depth-2-face) fontified nil) 198 199 (fontified nil) 199 200 (face (rainbow-delimiters-depth-2-face) fontified nil) 200 205 (fontified nil) 205 211 (face font-lock-keyword-face fontified nil) 211 219 (fontified nil) 219 220 (face (rainbow-delimiters-depth-2-face) fontified nil) 220 224 (fontified nil) 224 226 (face font-lock-keyword-face fontified nil) 226 227 (face (rainbow-delimiters-depth-2-face) fontified nil) 227 234 (fontified nil) 234 235 (face (rainbow-delimiters-depth-3-face) fontified nil) 235 246 (fontified nil) 246 247 (face (rainbow-delimiters-depth-4-face) fontified nil) 247 250 (fontified nil) 250 251 (face (rainbow-delimiters-depth-4-face) fontified nil) 251 252 (face (rainbow-delimiters-depth-3-face) fontified nil) 252 257 (fontified nil) 257 258 (face (rainbow-delimiters-depth-2-face) fontified nil) 258 259 (fontified nil) 259 260 (face (rainbow-delimiters-depth-2-face) fontified nil) 260 265 (fontified nil) 265 271 (face font-lock-keyword-face fontified nil) 271 279 (fontified nil) 279 280 (face (rainbow-delimiters-depth-2-face) fontified nil) 280 286 (fontified nil) 286 288 (face font-lock-keyword-face fontified nil) 288 289 (face (rainbow-delimiters-depth-2-face) fontified nil) 289 296 (fontified nil) 296 297 (face (rainbow-delimiters-depth-3-face) fontified nil) 297 308 (fontified nil) 308 309 (face (rainbow-delimiters-depth-4-face) fontified nil) 309 312 (fontified nil) 312 313 (face (rainbow-delimiters-depth-4-face) fontified nil) 313 314 (face (rainbow-delimiters-depth-3-face) fontified nil) 314 317 (fontified nil) 317 319 (fontified nil) 319 320 (fontified nil face (rainbow-delimiters-depth-2-face)) 320 321 (fontified nil) 321 322 (fontified nil face (rainbow-delimiters-depth-2-face)) 322 323 (fontified nil) 323 327 (fontified nil) 327 333 (face font-lock-keyword-face fontified nil) 333 341 (fontified nil) 341 342 (face (rainbow-delimiters-depth-2-face) fontified nil) 342 348 (fontified nil) 348 350 (face font-lock-keyword-face fontified nil) 350 351 (face (rainbow-delimiters-depth-2-face) fontified nil) 351 358 (fontified nil) 358 359 (face (rainbow-delimiters-depth-3-face) fontified nil) 359 370 (fontified nil) 370 371 (face (rainbow-delimiters-depth-4-face) fontified nil) 371 373 (fontified nil) 373 374 (face (rainbow-delimiters-depth-4-face) fontified nil) 374 375 (face (rainbow-delimiters-depth-3-face) fontified nil) 375 380 (fontified nil) 380 381 (face (rainbow-delimiters-depth-2-face) fontified nil) 381 382 (fontified nil) 382 383 (face (rainbow-delimiters-depth-2-face) fontified nil) 383 388 (fontified nil) 388 394 (face font-lock-keyword-face fontified nil) 394 401 (fontified nil) 401 402 (face (rainbow-delimiters-depth-2-face) fontified nil) 402 406 (fontified nil) 406 412 (face font-lock-keyword-face fontified nil) 412 422 (fontified nil) 422 423 (face (rainbow-delimiters-depth-1-face) fontified nil) 423 424 (fontified nil) 424 425 (fontified nil rear-nonsticky nil)) . 950) (nil rear-nonsticky t 1374 . 1375)) (26030 49125 816277 684000) 0 nil])
([nil nil ((#("led" 0 3 (fontified t)) . 1419) (undo-tree-id4360 . -2) (undo-tree-id4361 . -3) (undo-tree-id4362 . -3)) nil (26030 49959 385414 125000) 0 nil])
([nil nil ((nil rear-nonsticky nil 898 . 899) (nil fontified nil 766 . 899) (766 . 899) (t 26030 46879 831479 496000)) ((#("int cntbits(int n) {
    int count = 0;
    
    while (n) {
        n = n & (n - 1);
        count++;
    }
    
    return count;
}" 0 2 (face font-lock-type-face fontified nil) 2 3 (face font-lock-type-face c-type c-decl-id-start fontified nil) 3 4 (fontified nil) 4 11 (face font-lock-function-name-face fontified nil) 11 12 (face (rainbow-delimiters-depth-1-face) c-type c-decl-arg-start fontified nil) 12 15 (face font-lock-type-face fontified nil) 15 16 (fontified nil) 16 17 (face font-lock-variable-name-face fontified nil) 17 18 (face (rainbow-delimiters-depth-1-face) fontified nil) 18 19 (fontified nil) 19 20 (face (rainbow-delimiters-depth-1-face) fontified nil) 20 25 (fontified nil) 25 27 (face font-lock-type-face fontified nil) 27 28 (face font-lock-type-face c-type c-decl-id-start fontified nil) 28 29 (fontified nil) 29 34 (face font-lock-variable-name-face fontified nil) 34 49 (fontified nil) 49 54 (face font-lock-keyword-face fontified nil) 54 55 (fontified nil) 55 56 (face (rainbow-delimiters-depth-2-face) fontified nil) 56 57 (fontified nil) 57 58 (face (rainbow-delimiters-depth-2-face) fontified nil) 58 59 (fontified nil) 59 60 (face (rainbow-delimiters-depth-2-face) fontified nil) 60 77 (fontified nil) 77 78 (face (rainbow-delimiters-depth-3-face) fontified nil) 78 83 (fontified nil) 83 84 (face (rainbow-delimiters-depth-3-face) fontified nil) 84 107 (fontified nil) 107 108 (face (rainbow-delimiters-depth-2-face) fontified nil) 108 118 (fontified nil) 118 124 (face font-lock-keyword-face fontified nil) 124 132 (fontified nil) 132 133 (face (rainbow-delimiters-depth-1-face) rear-nonsticky nil fontified nil)) . 766) (undo-tree-id2664 . -132) (undo-tree-id2665 . -132) (undo-tree-id2666 . -132) (undo-tree-id2667 . -133) (undo-tree-id2668 . -132) (undo-tree-id2669 . -132) (undo-tree-id2670 . -132) (undo-tree-id2671 . -132) (undo-tree-id2672 . -132) (undo-tree-id2673 . -132) (undo-tree-id2674 . -132) (undo-tree-id2675 . -132) (undo-tree-id2676 . -132) (undo-tree-id2677 . -132) (nil fontified t 890 . 898) (nil fontified t 884 . 890) (nil fontified t 874 . 884) (nil fontified t 873 . 874) (nil fontified t 850 . 873) (nil fontified t 849 . 850) (nil fontified t 844 . 849) (nil fontified t 843 . 844) (nil fontified t 826 . 843) (nil fontified t 825 . 826) (nil fontified t 824 . 825) (nil fontified t 823 . 824) (nil fontified t 822 . 823) (nil fontified t 821 . 822) (nil fontified t 820 . 821) (nil fontified t 815 . 820) (nil fontified t 800 . 815) (nil fontified t 795 . 800) (nil fontified t 794 . 795) (nil fontified t 793 . 794) (nil fontified t 791 . 793) (nil fontified t 786 . 791) (nil fontified t 785 . 786) (nil fontified t 784 . 785) (nil fontified t 783 . 784) (nil fontified t 782 . 783) (nil fontified t 781 . 782) (nil fontified t 778 . 781) (nil fontified t 777 . 778) (nil fontified t 770 . 777) (nil fontified t 769 . 770) (nil fontified t 768 . 769) (nil fontified t 766 . 768) (nil rear-nonsticky t 898 . 899)) (26030 49125 791894 636000) 0 nil])
([nil nil ((1419 . 1420)) nil (26030 49959 385383 833000) 0 nil])
([nil nil ((899 . 901)) ((#("

" 0 1 (fontified t) 1 2 (fontified t)) . 899)) (26030 49125 729167 602000) 0 nil])
([nil nil ((apply -156 1831 2518 undo--wrap-and-run-primitive-undo 1831 2518 ((2501 . 2504) (2497 . 2500) (2482 . 2485) (2471 . 2474) (2463 . 2466) (2442 . 2445) (2434 . 2437) (2422 . 2425) (2407 . 2410) (2396 . 2399) (2388 . 2391) (2368 . 2371) (2360 . 2363) (2349 . 2352) (2334 . 2337) (2323 . 2326) (2315 . 2318) (2294 . 2297) (2286 . 2289) (2274 . 2277) (2259 . 2262) (2248 . 2251) (2240 . 2243) (2219 . 2222) (2211 . 2214) (2199 . 2202) (2184 . 2187) (2173 . 2176) (2165 . 2168) (2144 . 2147) (2136 . 2139) (2124 . 2127) (2109 . 2112) (2098 . 2101) (2090 . 2093) (2069 . 2072) (2061 . 2064) (2049 . 2052) (2034 . 2037) (2023 . 2026) (2015 . 2018) (1993 . 1996) (1985 . 1988) (1972 . 1975) (1964 . 1967) (1936 . 1939) (1926 . 1929) (1902 . 1905) (1893 . 1896) (1869 . 1872) (1860 . 1863) (1836 . 1839) 2362)) (t 26030 49959 447497 834000)) nil (26033 1254 560632 157000) 0 nil])
([nil nil ((#("k" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -2460) (undo-tree-id523 . -1) (undo-tree-id524 . -1) 2461 (2460 . 2461) (2456 . 2460) (t 26030 46902 65279 462000)) ((#("    " 0 4 (fontified nil)) . 2456) (#("k" 0 1 (face font-lock-type-face fontified nil)) . 2460) (2460 . 2461)) (26030 49125 320440 737000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1807) (undo-tree-id0 . -4) (undo-tree-id1 . -4) 1811 (1807 . 1811) (#("    " 0 4 (fontified nil)) . 1806) (undo-tree-id2 . -4) (undo-tree-id3 . -4) (1806 . 1811) (#("    " 0 4 (fontified nil)) . 1805) (undo-tree-id4 . -4) (undo-tree-id5 . -4) (1804 . 1810)) nil (26033 1254 560627 292000) 0 nil])
([nil nil ((2457 . 2461) (#("    " 0 4 (fontified nil)) . 2456) (undo-tree-id519 . -4) (undo-tree-id520 . -4) (2456 . 2461) (#("    " 0 4 (fontified nil)) . 2455) (undo-tree-id521 . -4) (undo-tree-id522 . -4) (2459 . 2460) (2455 . 2459)) ((#("    " 0 4 (fontified nil)) . 2455) (undo-tree-id2652 . -4) (undo-tree-id2653 . -4) (undo-tree-id2654 . -4) (undo-tree-id2655 . -4) (#("
" 0 1 (fontified nil)) . 2459) (undo-tree-id2656 . 1) (undo-tree-id2657 . 1) (undo-tree-id2658 . -1) (undo-tree-id2659 . -1) (undo-tree-id2660 . -1) (undo-tree-id2661 . -1) (2455 . 2459) (#("    
" 0 4 (fontified nil) 4 5 (fontified nil)) . 2456) (undo-tree-id2662 . -4) (undo-tree-id2663 . -4) (2456 . 2460) (#("    " 0 4 (fontified t)) . 2457)) (26030 49124 981484 320000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2161 . 2162) (nil fontified nil 1806 . 2162) (nil fontified nil 1805 . 1806) (1805 . 2162)) nil (26033 1254 560571 19000) 0 nil])
([nil nil ((2456 . 2460)) ((#("    " 0 3 (fontified t) 3 4 (fontified t)) . 2456) (undo-tree-id2642 . -3) (undo-tree-id2643 . -3) (undo-tree-id2644 . -3) (undo-tree-id2645 . -3) (undo-tree-id2646 . -3) (undo-tree-id2647 . -3) (undo-tree-id2648 . -3) (undo-tree-id2649 . -3) (undo-tree-id2650 . -3) (undo-tree-id2651 . -3)) (26030 49124 963692 940000) 0 nil])
([nil nil ((apply 66 1805 2096 undo--wrap-and-run-primitive-undo 1805 2096 ((#(" */" 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 2094) (#("/* " 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . -2048) (#(" */" 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 2040) (#("/* " 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . -2015) (#("\\" 0 1 (c-in-sws t fontified t face font-lock-comment-face)) . 2012) (#("\\" 0 1 (c-in-sws t fontified t face font-lock-comment-face)) . 2007) (#(" */" 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 2015) (#("/* " 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . -2002) (#("\\" 0 1 (c-in-sws t fontified t face font-lock-comment-face)) . 2000) (#("\\" 0 1 (c-in-sws t fontified t face font-lock-comment-face)) . 1985) (#(" */" 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 2003) (#("/* " 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . -1980) (#("\\" 0 1 (c-in-sws t fontified t face font-lock-comment-face)) . 1978) (#("\\" 0 1 (c-in-sws t fontified t face font-lock-comment-face)) . 1940) (#(" */" 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 1981) (#("/* " 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . -1935) (#(" */" 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 1933) (#("/* " 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . -1928) (#(" */" 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 1927) (#("/* " 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . -1912) (#(" */" 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 1911) (#("/* " 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . -1886) (#(" */" 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 1884) (#("/* " 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . -1843) (#(" */" 0 2 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 2 3 (fontified t face font-lock-comment-delimiter-face c-in-sws t)) . 1841) (#("/* " 0 1 (c-is-sws t c-in-sws t fontified t face font-lock-comment-delimiter-face) 1 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . -1805) 2162))) nil (26033 1254 560560 588000) 0 nil])
([nil nil ((2456 . 2460) (#("   " 0 3 (fontified nil)) . -2456) (undo-tree-id517 . -3) (undo-tree-id518 . -3) (#(" " 0 1 (fontified t)) . 2459)) ((2456 . 2460) (#("    " 0 4 (fontified t)) . 2456) (undo-tree-id2621 . -3) (undo-tree-id2622 . -3) (undo-tree-id2623 . -3) (undo-tree-id2624 . -3) (undo-tree-id2625 . -3) (undo-tree-id2626 . -3) (undo-tree-id2627 . -3) (undo-tree-id2628 . -3) (undo-tree-id2629 . -3) (undo-tree-id2630 . -3) (undo-tree-id2631 . -3) (undo-tree-id2632 . -3) (undo-tree-id2633 . -3) (undo-tree-id2634 . -3) (undo-tree-id2635 . -3) (undo-tree-id2636 . -3) (undo-tree-id2637 . -3) (undo-tree-id2638 . -3) (undo-tree-id2639 . -3) (undo-tree-id2640 . -3) (undo-tree-id2641 . -3)) (26030 49124 900065 876000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -2051) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (#("e" 0 1 (fontified t)) . -2052) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) 2053 (2051 . 2053) (#("c" 0 1 (fontified t)) . -2051) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (#("l" 0 1 (fontified t)) . -2052) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (#("a" 0 1 (fontified t)) . -2053) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) 2054 (2051 . 2054) (2050 . 2052) (2047 . 2050) (2043 . 2047) (#("    " 0 4 (fontified t)) . 2043) (t 26033 1254 598658 40000)) nil (26033 1299 462393 574000) 0 nil])
([nil nil ((#("    
" 0 4 (fontified t) 4 5 (fontified t)) . 2456) (undo-tree-id513 . -4) (undo-tree-id514 . 1) (undo-tree-id515 . -3) (undo-tree-id516 . -3) 2459) ((2456 . 2461)) (26030 49124 878948 133000) 0 nil])
([nil nil ((2071 . 2073) (2056 . 2071) (2046 . 2056) (2042 . 2046)) nil (26033 1299 462107 260000) 0 nil])
([nil nil ((#("    
" 0 4 (fontified t) 4 5 (fontified t)) . 2456) (undo-tree-id509 . -4) (undo-tree-id510 . 5) (undo-tree-id511 . -3) (undo-tree-id512 . -3) 2459) ((2456 . 2461)) (26030 49124 857018 886000) 0 nil])
([nil nil ((2073 . 2074)) nil (26033 1299 462104 277000) 0 nil])
([nil nil ((2458 . 2462) (#("    " 0 4 (fontified nil)) . 2457) (undo-tree-id503 . -4) (undo-tree-id504 . -4) (2457 . 2462) (#("    " 0 4 (fontified nil)) . 2456) (undo-tree-id505 . -4) (undo-tree-id506 . -4) (2456 . 2461) (#("    " 0 4 (fontified nil)) . 2455) (undo-tree-id507 . -4) (undo-tree-id508 . -4) (2459 . 2460) (2455 . 2459)) ((#("    " 0 4 (fontified nil)) . 2455) (undo-tree-id2542 . -4) (undo-tree-id2543 . -4) (undo-tree-id2544 . -4) (undo-tree-id2545 . -4) (undo-tree-id2546 . -4) (undo-tree-id2547 . -4) (undo-tree-id2548 . -4) (undo-tree-id2549 . -4) (undo-tree-id2550 . -4) (undo-tree-id2551 . -4) (undo-tree-id2552 . -4) (undo-tree-id2553 . -4) (undo-tree-id2554 . -4) (undo-tree-id2555 . -4) (undo-tree-id2556 . -4) (undo-tree-id2557 . -4) (undo-tree-id2558 . -4) (undo-tree-id2559 . -4) (undo-tree-id2560 . -4) (undo-tree-id2561 . -4) (undo-tree-id2562 . -4) (undo-tree-id2563 . -4) (undo-tree-id2564 . -4) (undo-tree-id2565 . -4) (undo-tree-id2566 . -4) (#("
" 0 1 (fontified nil)) . 2459) (undo-tree-id2567 . -1) (undo-tree-id2568 . -1) (undo-tree-id2569 . -1) (undo-tree-id2570 . -1) (undo-tree-id2571 . -1) (undo-tree-id2572 . -1) (undo-tree-id2573 . -1) (undo-tree-id2574 . -1) (undo-tree-id2575 . -1) (undo-tree-id2576 . -1) (undo-tree-id2577 . -1) (undo-tree-id2578 . -1) (undo-tree-id2579 . -1) (undo-tree-id2580 . -1) (undo-tree-id2581 . -1) (undo-tree-id2582 . -1) (undo-tree-id2583 . -1) (undo-tree-id2584 . -1) (undo-tree-id2585 . -1) (undo-tree-id2586 . -1) (undo-tree-id2587 . -1) (undo-tree-id2588 . -1) (undo-tree-id2589 . -1) (undo-tree-id2590 . -1) (undo-tree-id2591 . -1) (2455 . 2459) (#("    
" 0 4 (fontified nil) 4 5 (fontified nil)) . 2456) (undo-tree-id2592 . -5) (undo-tree-id2593 . -5) (undo-tree-id2594 . -5) (undo-tree-id2595 . -5) (undo-tree-id2596 . -5) (undo-tree-id2597 . -5) (undo-tree-id2598 . -5) (undo-tree-id2599 . -5) (undo-tree-id2600 . -5) (undo-tree-id2601 . -5) (undo-tree-id2602 . -5) (undo-tree-id2603 . -5) (undo-tree-id2604 . -5) (undo-tree-id2605 . -5) (undo-tree-id2606 . -5) (undo-tree-id2607 . -5) (undo-tree-id2608 . -5) (undo-tree-id2609 . -5) (undo-tree-id2610 . -5) (undo-tree-id2611 . -5) (undo-tree-id2612 . -5) (undo-tree-id2613 . -5) (undo-tree-id2614 . -5) (undo-tree-id2615 . -5) (undo-tree-id2616 . -5) (2456 . 2460) (#("    
" 0 4 (fontified nil) 4 5 (fontified nil)) . 2457) (undo-tree-id2617 . 1) (undo-tree-id2618 . 1) (undo-tree-id2619 . -4) (undo-tree-id2620 . -4) (2457 . 2461) (#("    " 0 4 (fontified t)) . 2458)) (26030 49124 829321 634000) 0 nil])
([nil nil ((2090 . 2091) (2083 . 2090)) nil (26033 1299 462102 397000) 0 nil])
([nil nil ((2472 . 2476) (#("d" 0 1 (fontified nil)) . 2472) (2472 . 2473) (#("data" 0 4 (fontified nil)) . -2472) (2472 . 2476) (#("da" 0 1 (fontified t) 1 2 (fontified t)) . -2472) (undo-tree-id498 . -2) (undo-tree-id499 . -2) (undo-tree-id500 . -2) 2474 (2473 . 2474) (#("uint8_t inp" 0 7 (face font-lock-type-face fontified nil) 7 8 (fontified nil) 8 11 (face font-lock-variable-name-face fontified nil)) . 2473) (2472 . 2473) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2472 2472 nil nil nil t nil)) nil 30 nil #s(yas--field 1 2472 2472 nil nil nil t nil) nil nil)) (2465 . 2484) (#("weight(${1:uint8_t inp})" 0 24 (fontified nil)) . 2465) (2465 . 2489) (#("w" 0 1 (fontified nil)) . 2465) (2465 . 2466) (#("weight(uint8_t inp)" 0 19 (fontified nil)) . -2465) (2465 . 2484) (#("we" 0 1 (fontified t) 1 2 (fontified t)) . -2465) (undo-tree-id501 . -2) (undo-tree-id502 . -2) 2467 (2465 . 2467) (2464 . 2466) (2461 . 2464) (2457 . 2461)) ((#("    " 0 3 (fontified nil) 3 4 (fontified nil)) . 2457) (undo-tree-id2489 . -4) (undo-tree-id2490 . -4) (undo-tree-id2491 . -4) (undo-tree-id2492 . -4) (undo-tree-id2493 . -4) (undo-tree-id2494 . -4) (undo-tree-id2495 . -4) (undo-tree-id2496 . -4) (undo-tree-id2497 . -4) (undo-tree-id2498 . -4) (undo-tree-id2499 . -4) (#("if " 0 1 (face font-lock-keyword-face fontified nil) 1 2 (face font-lock-keyword-face fontified nil) 2 3 (fontified nil)) . 2461) (undo-tree-id2500 . -3) (undo-tree-id2501 . -3) (undo-tree-id2502 . -3) (undo-tree-id2503 . -3) (undo-tree-id2504 . -3) (undo-tree-id2505 . -3) (undo-tree-id2506 . -3) (undo-tree-id2507 . -3) (undo-tree-id2508 . -3) (undo-tree-id2509 . -3) (undo-tree-id2510 . -3) (#("()" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-3-face) fontified nil)) . 2464) (undo-tree-id2511 . 1) (undo-tree-id2512 . -1) (undo-tree-id2513 . -1) (undo-tree-id2514 . -1) (undo-tree-id2515 . -1) (undo-tree-id2516 . -1) (undo-tree-id2517 . -1) (undo-tree-id2518 . -1) (undo-tree-id2519 . -1) (undo-tree-id2520 . -1) (undo-tree-id2521 . -1) (undo-tree-id2522 . -1) (#("we" 0 1 (fontified nil) 1 2 (fontified nil)) . 2465) (undo-tree-id2523 . -2) (undo-tree-id2524 . -2) (2465 . 2467) (#("weight(uint8_t inp)" 0 19 (fontified nil)) . 2465) (2465 . 2484) (#("w" 0 1 (fontified nil)) . 2465) (2465 . 2466) (#("weight(${1:uint8_t inp})" 0 24 (fontified nil)) . 2465) (2465 . 2489) (#("weight(uint8_t inp)" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil) 6 7 (face (rainbow-delimiters-depth-4-face) fontified nil) 7 14 (face font-lock-type-face fontified nil) 14 15 (fontified nil) 15 18 (face font-lock-variable-name-face fontified nil) 18 19 (face (rainbow-delimiters-depth-4-face) fontified nil)) . 2465) (undo-tree-id2525 . 1) (undo-tree-id2526 . -7) (undo-tree-id2527 . -7) (undo-tree-id2528 . -7) (undo-tree-id2529 . -7) (undo-tree-id2530 . -7) (undo-tree-id2531 . -7) (undo-tree-id2532 . -7) (undo-tree-id2533 . -7) (undo-tree-id2534 . -7) (undo-tree-id2535 . -7) (undo-tree-id2536 . -7) (apply yas--snippet-revive 2465 2484 #s(yas--snippet nil (#s(yas--field 1 2472 2472 nil nil nil t nil)) nil 30 nil #s(yas--field 1 2472 2472 nil nil nil t nil) nil nil)) (#("d" 0 1 (fontified nil)) . 2472) (undo-tree-id2537 . -1) (undo-tree-id2538 . -1) (2473 . 2484) (#("a" 0 1 (fontified nil)) . 2473) (undo-tree-id2539 . -1) (undo-tree-id2540 . -1) (2472 . 2474) (#("data" 0 4 (fontified nil)) . 2472) (2472 . 2476) (#("d" 0 1 (fontified nil)) . 2472) (2472 . 2473) (#("data" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . 2472) (undo-tree-id2541 . -4)) (26030 49124 780928 75000) 0 nil])
([nil nil ((2097 . 2103) (#("      " 0 6 (fontified nil)) . 2096) (undo-tree-id58 . -6) (undo-tree-id59 . -6) (undo-tree-id60 . -6) (undo-tree-id61 . -6) (undo-tree-id62 . -6) (undo-tree-id63 . -6) (undo-tree-id64 . -6) (undo-tree-id65 . -6) (undo-tree-id66 . -6) (2096 . 2103) (#("      " 0 6 (fontified nil)) . 2095) (undo-tree-id67 . -6) (undo-tree-id68 . -6) (undo-tree-id69 . -6) (undo-tree-id70 . -6) (undo-tree-id71 . -6) (undo-tree-id72 . -6) (undo-tree-id73 . -6) (undo-tree-id74 . -6) (undo-tree-id75 . -6) (undo-tree-id76 . -6) (undo-tree-id77 . -6) (2095 . 2102) (2094 . 2100) (2093 . 2095) (2092 . 2093)) nil (26033 1299 462097 169000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2460) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (#("i" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -2461) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -2462) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (#(" " 0 1 (fontified t)) . -2463) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -2464) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (#("w" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -2465) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (#("e" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -2466) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (#("i" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -2467) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (#("g" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -2468) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (#("h" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -2469) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (#("t" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -2470) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) 2471 (#("(" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil)) . -2471) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil)) . 2472) (undo-tree-id475 . 1) (#("d" 0 1 (fontified nil)) . -2472) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (#("a" 0 1 (fontified nil)) . -2473) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (#("t" 0 1 (fontified t)) . -2474) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (#("a" 0 1 (fontified t)) . -2475) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -2476) (undo-tree-id488 . -1) (undo-tree-id489 . 1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (#(" " 0 1 (fontified t)) . -2477) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (#("<" 0 1 (fontified t)) . -2478) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (#(" " 0 1 (fontified t)) . -2479) (undo-tree-id496 . -1) (undo-tree-id497 . -1) 2480 (2477 . 2480) (apply yas--snippet-revive 2465 2477 #s(yas--snippet nil (#s(yas--field 1 2472 2472 nil nil nil t nil)) nil 30 nil #s(yas--field 1 2472 2472 nil nil nil t nil) nil nil))) ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2472 2472 nil nil nil t nil)) nil 30 nil #s(yas--field 1 2472 2472 nil nil nil t nil) nil nil)) (#(" < " 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 2477) (2472 . 2480) (2460 . 2473)) (26030 49124 689579 957000) 0 nil])
([nil nil ((#("    printf(\"class : %i\\n\", detect_junction());
" 0 4 (fontified t) 4 10 (fontified t) 10 11 (fontified t face (rainbow-delimiters-depth-3-face)) 11 25 (fontified t face font-lock-string-face) 25 26 (fontified t) 26 27 (fontified t) 27 42 (fontified t) 42 43 (fontified t face (rainbow-delimiters-depth-4-face)) 43 44 (fontified t face (rainbow-delimiters-depth-4-face)) 44 45 (fontified t face (rainbow-delimiters-depth-3-face)) 45 46 (fontified t) 46 47 (fontified t)) . 2110) (undo-tree-id39 . -47) (undo-tree-id40 . -46) (undo-tree-id41 . -5) (undo-tree-id42 . -5) (undo-tree-id43 . -5) (undo-tree-id44 . -5) (undo-tree-id45 . -5) (undo-tree-id46 . -5) (undo-tree-id47 . -5) (undo-tree-id48 . -5) (undo-tree-id49 . -5) (undo-tree-id50 . -5) (undo-tree-id51 . -5) (undo-tree-id52 . -5) (undo-tree-id53 . -5) (undo-tree-id54 . -5) (undo-tree-id55 . -5) (undo-tree-id56 . -5) (undo-tree-id57 . -47) 2115) nil (26033 1299 462060 145000) 0 nil])
([nil nil ((2244 . 2246)) ((#("

" 0 1 (fontified t) 1 2 (fontified t)) . 2244) (undo-tree-id2488 . -1)) (26030 49124 666752 356000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2100 . 2101) (#("
" 0 1 (fontified nil)) . -2143) (2096 . 2144)) nil (26033 1299 462030 874000) 0 nil])
([nil nil ((2253 . 2255) (2244 . 2253)) ((#("float pos" 0 1 (face font-lock-type-face fontified nil) 1 2 (face font-lock-type-face fontified nil) 2 3 (face font-lock-type-face fontified nil) 3 4 (face font-lock-type-face fontified nil) 4 5 (face font-lock-type-face c-type c-decl-id-start fontified nil) 5 6 (fontified nil) 6 7 (face font-lock-function-name-face fontified nil) 7 8 (face font-lock-function-name-face fontified nil) 8 9 (face font-lock-function-name-face fontified nil)) . 2244) (undo-tree-id2404 . -9) (undo-tree-id2405 . -9) (undo-tree-id2406 . -9) (undo-tree-id2407 . -9) (undo-tree-id2408 . -9) (undo-tree-id2409 . -9) (undo-tree-id2410 . -9) (undo-tree-id2411 . -9) (undo-tree-id2412 . -9) (undo-tree-id2413 . -9) (undo-tree-id2414 . -9) (undo-tree-id2415 . -9) (undo-tree-id2416 . -9) (undo-tree-id2417 . -9) (undo-tree-id2418 . -9) (undo-tree-id2419 . -9) (undo-tree-id2420 . -9) (undo-tree-id2421 . -9) (undo-tree-id2422 . -9) (undo-tree-id2423 . -9) (undo-tree-id2424 . -9) (undo-tree-id2425 . -9) (undo-tree-id2426 . -9) (undo-tree-id2427 . -9) (undo-tree-id2428 . -9) (undo-tree-id2429 . -9) (undo-tree-id2430 . -9) (undo-tree-id2431 . -9) (undo-tree-id2432 . -9) (undo-tree-id2433 . -9) (undo-tree-id2434 . -9) (undo-tree-id2435 . -9) (undo-tree-id2436 . -9) (undo-tree-id2437 . -9) (undo-tree-id2438 . -9) (undo-tree-id2439 . -9) (undo-tree-id2440 . -9) (undo-tree-id2441 . -9) (undo-tree-id2442 . -9) (undo-tree-id2443 . -9) (undo-tree-id2444 . -9) (undo-tree-id2445 . -9) (#("()" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t) 1 2 (face (rainbow-delimiters-depth-1-face) fontified t)) . 2253) (undo-tree-id2446 . -2) (undo-tree-id2447 . -2) (undo-tree-id2448 . -1) (undo-tree-id2449 . -1) (undo-tree-id2450 . -2) (undo-tree-id2451 . -1) (undo-tree-id2452 . -1) (undo-tree-id2453 . -1) (undo-tree-id2454 . -1) (undo-tree-id2455 . -1) (undo-tree-id2456 . -1) (undo-tree-id2457 . -1) (undo-tree-id2458 . -1) (undo-tree-id2459 . -1) (undo-tree-id2460 . -1) (undo-tree-id2461 . -1) (undo-tree-id2462 . -1) (undo-tree-id2463 . -1) (undo-tree-id2464 . -1) (undo-tree-id2465 . -1) (undo-tree-id2466 . -1) (undo-tree-id2467 . -1) (undo-tree-id2468 . -1) (undo-tree-id2469 . -1) (undo-tree-id2470 . -1) (undo-tree-id2471 . -1) (undo-tree-id2472 . -1) (undo-tree-id2473 . -1) (undo-tree-id2474 . -1) (undo-tree-id2475 . -1) (undo-tree-id2476 . -1) (undo-tree-id2477 . -1) (undo-tree-id2478 . -1) (undo-tree-id2479 . -1) (undo-tree-id2480 . -1) (undo-tree-id2481 . -1) (undo-tree-id2482 . -1) (undo-tree-id2483 . -1) (undo-tree-id2484 . -1) (undo-tree-id2485 . -1) (undo-tree-id2486 . -1) (undo-tree-id2487 . -1)) (26030 49124 53356 664000) 0 nil])
([nil nil ((2097 . 2103) (#("    " 0 3 (fontified t) 3 4 (fontified t rear-nonsticky t)) . -2097) (undo-tree-id28 . -4) (undo-tree-id29 . -4) (undo-tree-id30 . -4) (undo-tree-id31 . -4) (undo-tree-id32 . -4) (undo-tree-id33 . -4) (undo-tree-id34 . -4) (undo-tree-id35 . -4) (undo-tree-id36 . -4) (undo-tree-id37 . -4) (undo-tree-id38 . -4) 2101) nil (26033 1299 462022 648000) 0 nil])
([nil nil ((2258 . 2260) (2257 . 2259) (2256 . 2258) (2255 . 2256)) ((#(" " 0 1 (fontified nil)) . 2255) (undo-tree-id2174 . -1) (undo-tree-id2175 . -1) (undo-tree-id2176 . -1) (undo-tree-id2177 . -1) (undo-tree-id2178 . -1) (undo-tree-id2179 . -1) (undo-tree-id2180 . -1) (undo-tree-id2181 . -1) (undo-tree-id2182 . -1) (undo-tree-id2183 . -1) (undo-tree-id2184 . -1) (undo-tree-id2185 . -1) (undo-tree-id2186 . -1) (undo-tree-id2187 . -1) (undo-tree-id2188 . -1) (undo-tree-id2189 . -1) (undo-tree-id2190 . -1) (undo-tree-id2191 . -1) (undo-tree-id2192 . -1) (undo-tree-id2193 . -1) (undo-tree-id2194 . -1) (undo-tree-id2195 . -1) (undo-tree-id2196 . -1) (undo-tree-id2197 . -1) (undo-tree-id2198 . -1) (undo-tree-id2199 . -1) (undo-tree-id2200 . -1) (undo-tree-id2201 . -1) (undo-tree-id2202 . -1) (undo-tree-id2203 . -1) (undo-tree-id2204 . -1) (undo-tree-id2205 . -1) (undo-tree-id2206 . -1) (undo-tree-id2207 . -1) (undo-tree-id2208 . -1) (undo-tree-id2209 . -1) (undo-tree-id2210 . -1) (undo-tree-id2211 . -1) (undo-tree-id2212 . -1) (undo-tree-id2213 . -1) (undo-tree-id2214 . -1) (undo-tree-id2215 . -1) (undo-tree-id2216 . -1) (undo-tree-id2217 . -1) (undo-tree-id2218 . -1) (undo-tree-id2219 . -1) (undo-tree-id2220 . -1) (undo-tree-id2221 . -1) (undo-tree-id2222 . -1) (undo-tree-id2223 . -1) (undo-tree-id2224 . -1) (undo-tree-id2225 . -1) (undo-tree-id2226 . -1) (undo-tree-id2227 . -1) (undo-tree-id2228 . -1) (undo-tree-id2229 . -1) (undo-tree-id2230 . -1) (undo-tree-id2231 . -1) (undo-tree-id2232 . -1) (undo-tree-id2233 . -1) (undo-tree-id2234 . -1) (undo-tree-id2235 . -1) (undo-tree-id2236 . -1) (undo-tree-id2237 . -1) (undo-tree-id2238 . -1) (undo-tree-id2239 . -1) (undo-tree-id2240 . -1) (undo-tree-id2241 . -1) (undo-tree-id2242 . -1) (undo-tree-id2243 . -1) (undo-tree-id2244 . -1) (#("{}" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 2256) (undo-tree-id2245 . -1) (undo-tree-id2246 . -1) (undo-tree-id2247 . -1) (undo-tree-id2248 . -1) (undo-tree-id2249 . -1) (undo-tree-id2250 . -1) (undo-tree-id2251 . -1) (undo-tree-id2252 . -1) (undo-tree-id2253 . -1) (undo-tree-id2254 . -1) (undo-tree-id2255 . -1) (undo-tree-id2256 . -1) (undo-tree-id2257 . -1) (undo-tree-id2258 . -1) (undo-tree-id2259 . -1) (undo-tree-id2260 . -1) (undo-tree-id2261 . -1) (undo-tree-id2262 . -1) (undo-tree-id2263 . -1) (undo-tree-id2264 . -1) (undo-tree-id2265 . -1) (undo-tree-id2266 . -1) (undo-tree-id2267 . -1) (undo-tree-id2268 . -1) (undo-tree-id2269 . -1) (undo-tree-id2270 . -1) (undo-tree-id2271 . -1) (undo-tree-id2272 . -1) (undo-tree-id2273 . -1) (undo-tree-id2274 . -1) (undo-tree-id2275 . -1) (undo-tree-id2276 . -1) (undo-tree-id2277 . -1) (undo-tree-id2278 . -1) (undo-tree-id2279 . -1) (undo-tree-id2280 . -1) (undo-tree-id2281 . -1) (undo-tree-id2282 . -1) (undo-tree-id2283 . -1) (undo-tree-id2284 . -1) (undo-tree-id2285 . -1) (undo-tree-id2286 . -1) (undo-tree-id2287 . -1) (undo-tree-id2288 . -1) (undo-tree-id2289 . -1) (undo-tree-id2290 . -1) (undo-tree-id2291 . -1) (undo-tree-id2292 . -1) (undo-tree-id2293 . -1) (undo-tree-id2294 . -1) (undo-tree-id2295 . -1) (undo-tree-id2296 . -1) (undo-tree-id2297 . -1) (undo-tree-id2298 . -1) (undo-tree-id2299 . -1) (undo-tree-id2300 . -1) (undo-tree-id2301 . -1) (undo-tree-id2302 . -1) (undo-tree-id2303 . -1) (undo-tree-id2304 . -1) (undo-tree-id2305 . -1) (undo-tree-id2306 . -1) (undo-tree-id2307 . -1) (undo-tree-id2308 . -1) (undo-tree-id2309 . -1) (undo-tree-id2310 . -1) (undo-tree-id2311 . -1) (undo-tree-id2312 . -1) (undo-tree-id2313 . -1) (undo-tree-id2314 . -1) (undo-tree-id2315 . -1) (#("

" 0 1 (fontified t) 1 2 (fontified nil)) . 2257) (undo-tree-id2316 . -1) (undo-tree-id2317 . -1) (undo-tree-id2318 . -1) (undo-tree-id2319 . -1) (undo-tree-id2320 . -1) (undo-tree-id2321 . -1) (undo-tree-id2322 . -1) (undo-tree-id2323 . -1) (undo-tree-id2324 . -1) (undo-tree-id2325 . -1) (undo-tree-id2326 . -1) (undo-tree-id2327 . -1) (undo-tree-id2328 . -1) (undo-tree-id2329 . -1) (undo-tree-id2330 . -1) (undo-tree-id2331 . -1) (undo-tree-id2332 . -1) (undo-tree-id2333 . -1) (undo-tree-id2334 . -1) (undo-tree-id2335 . -1) (undo-tree-id2336 . -1) (undo-tree-id2337 . -1) (undo-tree-id2338 . -1) (undo-tree-id2339 . -1) (undo-tree-id2340 . -1) (undo-tree-id2341 . -1) (undo-tree-id2342 . -1) (undo-tree-id2343 . -1) (undo-tree-id2344 . -1) (undo-tree-id2345 . -1) (undo-tree-id2346 . -1) (undo-tree-id2347 . -1) (undo-tree-id2348 . -1) (undo-tree-id2349 . -1) (undo-tree-id2350 . -1) (undo-tree-id2351 . -1) (undo-tree-id2352 . -1) (undo-tree-id2353 . -1) (undo-tree-id2354 . -1) (undo-tree-id2355 . -1) (undo-tree-id2356 . -1) (undo-tree-id2357 . -1) (undo-tree-id2358 . -1) (undo-tree-id2359 . -1) (undo-tree-id2360 . -1) (undo-tree-id2361 . -1) (undo-tree-id2362 . -1) (undo-tree-id2363 . -1) (undo-tree-id2364 . -1) (undo-tree-id2365 . -1) (undo-tree-id2366 . -1) (undo-tree-id2367 . -1) (undo-tree-id2368 . -1) (undo-tree-id2369 . -1) (undo-tree-id2370 . -1) (undo-tree-id2371 . -1) (undo-tree-id2372 . -1) (undo-tree-id2373 . -1) (undo-tree-id2374 . -1) (undo-tree-id2375 . -1) (undo-tree-id2376 . -1) (undo-tree-id2377 . -1) (undo-tree-id2378 . -1) (undo-tree-id2379 . -1) (undo-tree-id2380 . -1) (undo-tree-id2381 . -1) (undo-tree-id2382 . -1) (undo-tree-id2383 . -1) (undo-tree-id2384 . -1) (undo-tree-id2385 . -1) (undo-tree-id2386 . -1) (#("  " 0 1 (fontified t) 1 2 (fontified t)) . 2258) (undo-tree-id2387 . -1) (undo-tree-id2388 . -1) (undo-tree-id2389 . -1) (undo-tree-id2390 . -1) (undo-tree-id2391 . -1) (undo-tree-id2392 . -1) (undo-tree-id2393 . -1) (undo-tree-id2394 . -1) (undo-tree-id2395 . -1) (undo-tree-id2396 . -1) (undo-tree-id2397 . -1) (undo-tree-id2398 . -1) (undo-tree-id2399 . -1) (undo-tree-id2400 . -1) (undo-tree-id2401 . -1) (undo-tree-id2402 . -1) (undo-tree-id2403 . -1)) (26030 49123 677022 871000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 2132) (undo-tree-id27 . -1)) nil (26033 1299 462005 907000) 0 nil])
([nil nil ((2254 . 2263)) ((#("float num" 0 1 (face font-lock-type-face fontified t) 1 2 (face font-lock-type-face fontified t) 2 3 (face font-lock-type-face fontified t) 3 4 (face font-lock-type-face fontified t) 4 5 (face font-lock-type-face fontified t) 5 6 (fontified t) 6 7 (face font-lock-variable-name-face fontified t) 7 8 (face font-lock-variable-name-face fontified t) 8 9 (face font-lock-variable-name-face fontified t)) . 2254)) (26030 49123 615880 382000) 0 nil])
([nil nil ((#("detectjunction" 0 6 (fontified t) 6 14 (fontified t)) . 2126) (undo-tree-id8 . -13) (undo-tree-id9 . -6) (undo-tree-id10 . -6) (undo-tree-id11 . -6) (undo-tree-id12 . -6) (undo-tree-id13 . -6) (undo-tree-id14 . -6) (undo-tree-id15 . -6) (undo-tree-id16 . -6) (undo-tree-id17 . -6) (undo-tree-id18 . -6) (undo-tree-id19 . -6) (undo-tree-id20 . -6) (undo-tree-id21 . -6) (undo-tree-id22 . -6) (undo-tree-id23 . -6) (undo-tree-id24 . -6) (undo-tree-id25 . -6) (undo-tree-id26 . -14)) nil (26033 1299 462001 494000) 0 nil])
([nil nil ((2268 . 2270) (#("  " 0 2 (fontified nil)) . 2267) (undo-tree-id423 . -2) (undo-tree-id424 . -2) (2269 . 2270) (2267 . 2269) (#(" " 0 1 (fontified nil)) . -2267) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (#(" " 0 1 (fontified t)) . 2268)) ((2267 . 2269) (#("  " 0 2 (fontified nil)) . 2267) (undo-tree-id2167 . -2) (undo-tree-id2168 . -2) (undo-tree-id2169 . -2) (undo-tree-id2170 . -2) (#("
" 0 1 (fontified nil)) . 2269) (undo-tree-id2171 . -1) (undo-tree-id2172 . -1) (2267 . 2269) (#("  " 0 2 (fontified t)) . 2268) (undo-tree-id2173 . -2)) (26030 49123 589379 539000) 0 nil])
([nil nil ((#("());" 0 1 (fontified t face (rainbow-delimiters-depth-5-face)) 1 2 (fontified t face (rainbow-delimiters-depth-5-face)) 2 3 (fontified t face (rainbow-delimiters-depth-4-face)) 3 4 (fontified t)) . 2126) (undo-tree-id6 . -3) (undo-tree-id7 . -4)) nil (26033 1299 461972 391000) 0 nil])
([nil nil ((2273 . 2280) (2272 . 2274) (#("n" 0 1 (fontified t)) . -2272) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (#("u" 0 1 (fontified t)) . -2273) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (#("m" 0 1 (fontified t)) . -2274) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (#(" " 0 1 (fontified t)) . -2275) (undo-tree-id421 . -1) (undo-tree-id422 . -1) 2276 (2269 . 2276) (2267 . 2269)) ((#("  " 0 2 (fontified nil)) . 2267) (undo-tree-id2041 . -2) (undo-tree-id2042 . -2) (undo-tree-id2043 . -2) (undo-tree-id2044 . -2) (undo-tree-id2045 . -2) (undo-tree-id2046 . -2) (undo-tree-id2047 . -2) (undo-tree-id2048 . -2) (undo-tree-id2049 . -2) (undo-tree-id2050 . -2) (undo-tree-id2051 . -2) (undo-tree-id2052 . -2) (undo-tree-id2053 . -2) (undo-tree-id2054 . -2) (undo-tree-id2055 . -2) (undo-tree-id2056 . -2) (undo-tree-id2057 . -2) (undo-tree-id2058 . -2) (undo-tree-id2059 . -2) (undo-tree-id2060 . -2) (undo-tree-id2061 . -2) (undo-tree-id2062 . -2) (undo-tree-id2063 . -2) (undo-tree-id2064 . -2) (undo-tree-id2065 . -2) (undo-tree-id2066 . -2) (undo-tree-id2067 . -2) (undo-tree-id2068 . -2) (undo-tree-id2069 . -2) (undo-tree-id2070 . -2) (undo-tree-id2071 . -2) (undo-tree-id2072 . -2) (undo-tree-id2073 . -2) (undo-tree-id2074 . -2) (undo-tree-id2075 . -2) (undo-tree-id2076 . -2) (undo-tree-id2077 . -2) (undo-tree-id2078 . -2) (#("if num " 0 1 (face font-lock-keyword-face fontified nil) 1 2 (face font-lock-keyword-face fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil) 6 7 (fontified nil)) . 2269) (undo-tree-id2079 . -3) (undo-tree-id2080 . -3) (undo-tree-id2081 . -7) (undo-tree-id2082 . -7) (undo-tree-id2083 . -3) (undo-tree-id2084 . -3) (undo-tree-id2085 . -3) (undo-tree-id2086 . -3) (undo-tree-id2087 . -3) (undo-tree-id2088 . -3) (undo-tree-id2089 . -3) (undo-tree-id2090 . -3) (undo-tree-id2091 . -3) (undo-tree-id2092 . -3) (undo-tree-id2093 . -3) (undo-tree-id2094 . -3) (undo-tree-id2095 . -3) (undo-tree-id2096 . -3) (undo-tree-id2097 . -3) (undo-tree-id2098 . -3) (undo-tree-id2099 . -3) (undo-tree-id2100 . -3) (undo-tree-id2101 . -3) (undo-tree-id2102 . -3) (undo-tree-id2103 . -3) (undo-tree-id2104 . -3) (undo-tree-id2105 . -3) (undo-tree-id2106 . -3) (undo-tree-id2107 . -3) (undo-tree-id2108 . -3) (undo-tree-id2109 . -3) (undo-tree-id2110 . -3) (undo-tree-id2111 . -3) (undo-tree-id2112 . -3) (undo-tree-id2113 . -3) (undo-tree-id2114 . -3) (undo-tree-id2115 . -3) (undo-tree-id2116 . -3) (2272 . 2276) (#("()" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 2272) (undo-tree-id2117 . -2) (undo-tree-id2118 . -2) (undo-tree-id2119 . -1) (undo-tree-id2120 . -1) (undo-tree-id2121 . -2) (undo-tree-id2122 . -2) (undo-tree-id2123 . -2) (undo-tree-id2124 . -2) (undo-tree-id2125 . -2) (undo-tree-id2126 . -2) (undo-tree-id2127 . -2) (undo-tree-id2128 . -2) (undo-tree-id2129 . -2) (undo-tree-id2130 . -2) (undo-tree-id2131 . -2) (undo-tree-id2132 . -2) (undo-tree-id2133 . -2) (undo-tree-id2134 . -2) (undo-tree-id2135 . -2) (undo-tree-id2136 . -2) (undo-tree-id2137 . -2) (undo-tree-id2138 . -2) (undo-tree-id2139 . -2) (undo-tree-id2140 . -2) (undo-tree-id2141 . -2) (undo-tree-id2142 . -2) (undo-tree-id2143 . -2) (undo-tree-id2144 . -2) (undo-tree-id2145 . -1) (undo-tree-id2146 . -1) (undo-tree-id2147 . -1) (undo-tree-id2148 . -1) (undo-tree-id2149 . -1) (undo-tree-id2150 . -1) (undo-tree-id2151 . -1) (undo-tree-id2152 . -1) (undo-tree-id2153 . -1) (undo-tree-id2154 . -1) (#("num < 0" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t)) . 2273) (undo-tree-id2155 . -7) (undo-tree-id2156 . -7) (undo-tree-id2157 . -7) (undo-tree-id2158 . -7) (undo-tree-id2159 . -7) (undo-tree-id2160 . -7) (undo-tree-id2161 . -7) (undo-tree-id2162 . -7) (undo-tree-id2163 . -7) (undo-tree-id2164 . -7) (undo-tree-id2165 . -7) (undo-tree-id2166 . -7)) (26030 49123 553351 793000) 0 nil])
([nil nil ((2126 . 2127) (2125 . 2126) (#(")" 0 1 (fontified nil)) . -2125) (2125 . 2126)) nil (26033 1299 461953 981000) 0 nil])
([nil nil ((2301 . 2304) (2300 . 2301) (2299 . 2300) (2296 . 2299) (2306 . 2307) (2295 . 2296) (apply yas--snippet-revive 2288 2306 #s(yas--snippet nil (#s(yas--field 0 2295 2305 nil nil nil nil nil)) nil 31 nil nil nil t)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 0 2295 2305 nil nil nil nil nil)) nil 31 nil nil nil t)) (2288 . 2306) (#("return ${0:expression};" 0 23 (fontified nil)) . 2288) (2288 . 2311) (#("ret" 0 3 (fontified nil)) . 2288) (2288 . 2291) (#("return expression;" 0 18 (fontified nil)) . -2288) (2288 . 2306) (#("ret" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -2288) (undo-tree-id413 . -3) (undo-tree-id414 . -3) 2291 (2288 . 2291) (2284 . 2288) (2283 . 2287) (2282 . 2284) (2281 . 2282)) ((#(" " 0 1 (fontified nil)) . 2281) (undo-tree-id1878 . -1) (undo-tree-id1879 . -1) (undo-tree-id1880 . -1) (undo-tree-id1881 . -1) (undo-tree-id1882 . -1) (undo-tree-id1883 . -1) (undo-tree-id1884 . -1) (undo-tree-id1885 . -1) (undo-tree-id1886 . -1) (undo-tree-id1887 . -1) (undo-tree-id1888 . -1) (undo-tree-id1889 . -1) (undo-tree-id1890 . -1) (undo-tree-id1891 . -1) (undo-tree-id1892 . -1) (undo-tree-id1893 . -1) (undo-tree-id1894 . -1) (undo-tree-id1895 . -1) (undo-tree-id1896 . -1) (undo-tree-id1897 . -1) (undo-tree-id1898 . -1) (undo-tree-id1899 . -1) (undo-tree-id1900 . -1) (undo-tree-id1901 . -1) (undo-tree-id1902 . -1) (undo-tree-id1903 . -1) (undo-tree-id1904 . -1) (undo-tree-id1905 . -1) (undo-tree-id1906 . -1) (#("{}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 2282) (undo-tree-id1907 . -1) (undo-tree-id1908 . -2) (undo-tree-id1909 . -1) (undo-tree-id1910 . -1) (undo-tree-id1911 . -2) (undo-tree-id1912 . -2) (undo-tree-id1913 . -1) (undo-tree-id1914 . -2) (undo-tree-id1915 . -1) (undo-tree-id1916 . -2) (undo-tree-id1917 . -1) (undo-tree-id1918 . -1) (undo-tree-id1919 . -1) (undo-tree-id1920 . -1) (undo-tree-id1921 . -1) (undo-tree-id1922 . -1) (undo-tree-id1923 . -1) (undo-tree-id1924 . -1) (undo-tree-id1925 . -1) (undo-tree-id1926 . -1) (undo-tree-id1927 . -1) (undo-tree-id1928 . -1) (undo-tree-id1929 . -1) (undo-tree-id1930 . -1) (undo-tree-id1931 . -1) (undo-tree-id1932 . -1) (undo-tree-id1933 . -1) (undo-tree-id1934 . -1) (undo-tree-id1935 . -1) (#("

  " 0 1 (fontified t) 1 2 (fontified nil) 2 4 (fontified nil)) . 2283) (undo-tree-id1936 . -1) (undo-tree-id1937 . -1) (undo-tree-id1938 . -1) (undo-tree-id1939 . -2) (undo-tree-id1940 . -2) (undo-tree-id1941 . -4) (undo-tree-id1942 . -4) (undo-tree-id1943 . -4) (undo-tree-id1944 . -4) (undo-tree-id1945 . -4) (undo-tree-id1946 . -4) (undo-tree-id1947 . -4) (undo-tree-id1948 . -4) (undo-tree-id1949 . -4) (undo-tree-id1950 . -1) (undo-tree-id1951 . -1) (undo-tree-id1952 . -1) (undo-tree-id1953 . -1) (undo-tree-id1954 . -1) (undo-tree-id1955 . -1) (undo-tree-id1956 . -1) (undo-tree-id1957 . -1) (undo-tree-id1958 . -1) (undo-tree-id1959 . -1) (#("    " 0 4 (fontified nil)) . 2284) (undo-tree-id1960 . -4) (undo-tree-id1961 . -4) (undo-tree-id1962 . -4) (undo-tree-id1963 . -4) (undo-tree-id1964 . -4) (undo-tree-id1965 . -4) (undo-tree-id1966 . -4) (undo-tree-id1967 . -4) (undo-tree-id1968 . -4) (undo-tree-id1969 . -4) (undo-tree-id1970 . -4) (undo-tree-id1971 . -4) (#("ret" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 2288) (undo-tree-id1972 . -3) (undo-tree-id1973 . -3) (2288 . 2291) (#("return expression;" 0 18 (fontified nil)) . 2288) (2288 . 2306) (#("ret" 0 3 (fontified nil)) . 2288) (2288 . 2291) (#("return ${0:expression};" 0 23 (fontified nil)) . 2288) (2288 . 2311) (#("return expression;" 0 6 (face font-lock-keyword-face fontified nil) 6 7 (fontified nil) 7 17 (fontified nil) 17 18 (fontified nil)) . 2288) (undo-tree-id1974 . -17) (undo-tree-id1975 . -7) (undo-tree-id1976 . -7) (undo-tree-id1977 . -7) (undo-tree-id1978 . -7) (undo-tree-id1979 . -7) (undo-tree-id1980 . -7) (undo-tree-id1981 . -7) (undo-tree-id1982 . -7) (undo-tree-id1983 . -7) (undo-tree-id1984 . -7) (undo-tree-id1985 . -7) (apply yas--snippet-revive 2288 2306 #s(yas--snippet nil (#s(yas--field 0 2295 2305 nil nil nil nil nil)) nil 31 nil nil nil t)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 0 2295 2305 nil nil nil nil nil)) nil 31 nil nil nil t)) (#("(" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . 2295) (undo-tree-id1986 . -1) (undo-tree-id1987 . -1) (undo-tree-id1988 . -1) (undo-tree-id1989 . -1) (undo-tree-id1990 . -1) (undo-tree-id1991 . -1) (undo-tree-id1992 . -1) (undo-tree-id1993 . -1) (undo-tree-id1994 . -1) (undo-tree-id1995 . -1) (undo-tree-id1996 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . 2306) (#("-1 " 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 2296) (undo-tree-id1997 . -3) (undo-tree-id1998 . -3) (undo-tree-id1999 . -3) (undo-tree-id2000 . -3) (undo-tree-id2001 . -3) (undo-tree-id2002 . -3) (undo-tree-id2003 . -3) (undo-tree-id2004 . -3) (undo-tree-id2005 . -3) (undo-tree-id2006 . -3) (undo-tree-id2007 . -3) (#("*" 0 1 (fontified nil)) . 2299) (undo-tree-id2008 . -1) (undo-tree-id2009 . -1) (undo-tree-id2010 . -1) (undo-tree-id2011 . -1) (undo-tree-id2012 . -1) (undo-tree-id2013 . -1) (undo-tree-id2014 . -1) (undo-tree-id2015 . -1) (undo-tree-id2016 . -1) (undo-tree-id2017 . -1) (undo-tree-id2018 . -1) (#(" " 0 1 (fontified nil)) . 2300) (undo-tree-id2019 . -1) (undo-tree-id2020 . -1) (undo-tree-id2021 . -1) (undo-tree-id2022 . -1) (undo-tree-id2023 . -1) (undo-tree-id2024 . -1) (undo-tree-id2025 . -1) (undo-tree-id2026 . -1) (undo-tree-id2027 . -1) (undo-tree-id2028 . -1) (undo-tree-id2029 . -1) (#("num" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . 2301) (undo-tree-id2030 . -3) (undo-tree-id2031 . -3) (undo-tree-id2032 . -3) (undo-tree-id2033 . -3) (undo-tree-id2034 . -3) (undo-tree-id2035 . -3) (undo-tree-id2036 . -3) (undo-tree-id2037 . -3) (undo-tree-id2038 . -3) (undo-tree-id2039 . -3) (undo-tree-id2040 . -3)) (26030 49123 509778 207000) 0 nil])
([nil nil ((2125 . 2128)) nil (26033 1299 461944 208000) 0 nil])
([nil nil ((#("expression" 0 10 (fontified t)) . 2304) (undo-tree-id408 . -10) (undo-tree-id409 . -9) (undo-tree-id410 . 10) (undo-tree-id412 . -10)) ((2304 . 2314)) (26030 49123 486605 223000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2096) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (t 26033 1299 496143 957000)) nil (26033 1303 860311 392000) 0 nil])
([nil nil ((#("else" 0 4 (face font-lock-keyword-face fontified nil)) . 2315) (2311 . 2315) 2322 (2317 . 2322) (2316 . 2317) (2315 . 2316) (#("else" 0 1 (face font-lock-keyword-face fontified nil) 1 2 (face font-lock-keyword-face fontified nil) 2 3 (face font-lock-keyword-face fontified nil) 3 4 (face font-lock-keyword-face fontified nil)) . 2315) (undo-tree-id405 . -4) (undo-tree-id406 . -4) (2311 . 2315) 2315 (2310 . 2315)) ((#(" else" 0 1 (fontified nil) 1 2 (face font-lock-keyword-face fontified nil) 2 3 (face font-lock-keyword-face fontified nil) 3 4 (face font-lock-keyword-face fontified nil) 4 5 (face font-lock-keyword-face fontified nil)) . 2310) (undo-tree-id1862 . -1) (undo-tree-id1863 . -1) (undo-tree-id1864 . -1) (undo-tree-id1865 . -1) (undo-tree-id1866 . -1) (#("else" 0 4 (face font-lock-keyword-face fontified nil)) . 2311) (undo-tree-id1867 . -4) (undo-tree-id1868 . -4) (undo-tree-id1869 . -4) (undo-tree-id1870 . -4) (undo-tree-id1871 . -4) (2315 . 2319) (#(" " 0 1 (fontified nil)) . 2315) (undo-tree-id1872 . -1) (undo-tree-id1873 . -1) (undo-tree-id1874 . -1) (undo-tree-id1875 . -1) (undo-tree-id1876 . -1) (#(":" 0 1 (fontified nil)) . 2316) (undo-tree-id1877 . -1) (#("
    " 0 1 (fontified nil) 1 5 (fontified nil)) . 2317) (#("else" 0 4 (face font-lock-keyword-face fontified nil)) . 2311) (2315 . 2319)) (26030 49123 474017 368000) 0 nil])
([nil nil ((283 . 294) (#("m" 0 1 (fontified t c-in-sws t face font-lock-string-face)) . -283) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (#("p" 0 1 (fontified t c-in-sws t face font-lock-string-face)) . -284) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (#("o" 0 1 (fontified t c-in-sws t face font-lock-string-face)) . -285) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (#("d" 0 1 (fontified t c-in-sws t face font-lock-string-face)) . -286) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) 287 (286 . 287) (282 . 286) (282 . 283) (nil syntax-table nil 282 . 283) (nil syntax-table (1) 281 . 282) (281 . 282) (#("\"" 0 1 (fontified nil)) . -281) (nil syntax-table nil 282 . 283) (nil syntax-table (1) 281 . 282) (273 . 282) (272 . 273) (271 . 272) (t 26033 1303 919900 773000)) nil (26033 1386 458357 5000) 0 nil])
([nil nil ((#("  " 0 2 (fontified nil)) . -2323) (undo-tree-id368 . -2) (undo-tree-id369 . -2) (undo-tree-id371 . -1) (undo-tree-id373 . -1) (undo-tree-id375 . -1) (undo-tree-id377 . -1) (undo-tree-id379 . -1) (undo-tree-id381 . -1) (undo-tree-id383 . -1) (undo-tree-id385 . -1) (undo-tree-id387 . -2) (undo-tree-id389 . -2) (undo-tree-id391 . -2) (undo-tree-id393 . -2) (undo-tree-id395 . -2) (undo-tree-id397 . -2) (undo-tree-id399 . -2) (undo-tree-id401 . -2) (undo-tree-id403 . -2) (#("else" 0 4 (face font-lock-keyword-face fontified nil)) . 2315) (2311 . 2315) 2325) ((#("else" 0 4 (face font-lock-keyword-face fontified nil)) . 2311) (2315 . 2319) (2323 . 2325)) (26030 49123 463605 828000) 0 nil])
([nil nil ((#("#include \"nodedetect.c\"
" 0 1 (fontified t c-is-sws t c-in-sws t face font-lock-preprocessor-face) 1 2 (fontified t c-in-sws t face font-lock-preprocessor-face) 2 3 (fontified t c-in-sws t face font-lock-preprocessor-face) 3 4 (fontified t c-in-sws t face font-lock-preprocessor-face) 4 5 (fontified t c-in-sws t face font-lock-preprocessor-face) 5 6 (fontified t c-in-sws t face font-lock-preprocessor-face) 6 7 (fontified t c-in-sws t face font-lock-preprocessor-face) 7 8 (fontified t c-in-sws t face font-lock-preprocessor-face) 8 9 (fontified t c-in-sws t) 9 10 (fontified t c-in-sws t face font-lock-string-face) 10 11 (fontified t c-in-sws t face font-lock-string-face) 11 12 (fontified t c-in-sws t face font-lock-string-face) 12 13 (fontified t c-in-sws t face font-lock-string-face) 13 14 (fontified t c-in-sws t face font-lock-string-face) 14 15 (fontified t c-in-sws t face font-lock-string-face) 15 16 (fontified t c-in-sws t face font-lock-string-face) 16 17 (fontified t c-in-sws t face font-lock-string-face) 17 18 (fontified t c-in-sws t face font-lock-string-face) 18 19 (fontified t c-in-sws t face font-lock-string-face) 19 20 (fontified t c-in-sws t face font-lock-string-face) 20 21 (fontified t c-in-sws t face font-lock-string-face) 21 22 (fontified t c-in-sws t face font-lock-string-face) 22 23 (fontified t c-in-sws t face font-lock-string-face) 23 24 (fontified t c-in-sws t)) . 272) (undo-tree-id354 . -21) (undo-tree-id355 . -21) (undo-tree-id356 . 2) (undo-tree-id357 . -23) (undo-tree-id358 . -21) (undo-tree-id359 . -21) (undo-tree-id360 . -21) (undo-tree-id361 . -21) (undo-tree-id362 . -21) (undo-tree-id363 . -21) (undo-tree-id364 . -21) (undo-tree-id365 . -21) (undo-tree-id366 . -21) (undo-tree-id367 . -21) (undo-tree-id368 . -21) (undo-tree-id369 . -21) (undo-tree-id370 . -21) (undo-tree-id371 . -21) (undo-tree-id372 . -21) (undo-tree-id373 . -21) (undo-tree-id374 . -21) (undo-tree-id375 . -21) (undo-tree-id376 . -21) (undo-tree-id377 . -21) (undo-tree-id378 . -21) (undo-tree-id379 . -21) (undo-tree-id380 . -21) (undo-tree-id381 . -21) (undo-tree-id382 . -21) (undo-tree-id383 . -21) (undo-tree-id384 . -21) (undo-tree-id385 . -21) (undo-tree-id386 . -21) (undo-tree-id387 . -21) (undo-tree-id388 . -21) (undo-tree-id389 . -24) 293 (t 26033 1386 519486 72000)) nil (26033 1426 695414 28000) 0 nil])
([nil nil ((2329 . 2332) (#("num" 0 3 (fontified nil)) . 2329) (2329 . 2332) (#("num" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -2329) (undo-tree-id263 . -3) (undo-tree-id264 . -3) (undo-tree-id266 . -1) (undo-tree-id268 . -1) (undo-tree-id270 . -2) (undo-tree-id272 . -2) (undo-tree-id274 . -2) (undo-tree-id276 . -2) (undo-tree-id278 . -2) (undo-tree-id280 . -2) (undo-tree-id282 . -2) (undo-tree-id284 . -2) (undo-tree-id286 . -3) (undo-tree-id288 . -3) (undo-tree-id290 . -3) (undo-tree-id292 . -3) (undo-tree-id294 . -3) (undo-tree-id296 . -3) (undo-tree-id298 . -3) (undo-tree-id300 . -3) (undo-tree-id302 . -3) (undo-tree-id304 . -3) (undo-tree-id306 . -3) (undo-tree-id308 . -3) (undo-tree-id310 . -3) (undo-tree-id312 . -3) (undo-tree-id314 . -3) (undo-tree-id316 . -3) (undo-tree-id318 . -3) (undo-tree-id320 . -3) (undo-tree-id322 . -3) (undo-tree-id324 . -3) (undo-tree-id326 . -3) (undo-tree-id328 . -3) (undo-tree-id330 . -3) (undo-tree-id332 . -3) (undo-tree-id334 . -3) (undo-tree-id336 . -3) (undo-tree-id338 . -3) (undo-tree-id340 . -3) (undo-tree-id342 . -3) (undo-tree-id344 . -3) (undo-tree-id346 . -3) (undo-tree-id348 . -3) (undo-tree-id350 . -3) (undo-tree-id352 . -3) (undo-tree-id354 . -3) (undo-tree-id356 . -3) (undo-tree-id358 . -3) (undo-tree-id360 . -3) (undo-tree-id362 . -3) 2332 (2329 . 2332) (apply yas--snippet-revive 2322 2340 #s(yas--snippet nil (#s(yas--field 0 2329 2339 nil nil nil nil nil)) nil 32 nil nil nil t)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 0 2329 2339 nil nil nil nil nil)) nil 32 nil nil nil t)) (2322 . 2340) (#("return ${0:expression};" 0 23 (fontified nil)) . 2322) (2322 . 2345) (#("ret" 0 3 (fontified nil)) . 2322) (2322 . 2325) (#("return expression;" 0 18 (fontified nil)) . -2322) (2322 . 2340) (#("ret" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -2322) (undo-tree-id363 . -3) (undo-tree-id364 . -3) 2325 (2322 . 2325) (2318 . 2322) (2317 . 2321) (2316 . 2318) (#(":" 0 1 (fontified t)) . -2316) (undo-tree-id366 . -1) (undo-tree-id367 . -1) 2317) ((2316 . 2317) (#("{}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 2316) (undo-tree-id1843 . -1) (undo-tree-id1844 . -1) (undo-tree-id1845 . -1) (undo-tree-id1846 . -2) (undo-tree-id1847 . -1) (undo-tree-id1848 . -1) (#("

  " 0 1 (fontified t) 1 2 (fontified nil) 2 4 (fontified nil)) . 2317) (undo-tree-id1849 . -1) (undo-tree-id1850 . -1) (undo-tree-id1851 . -2) (undo-tree-id1852 . -1) (undo-tree-id1853 . -1) (#("    " 0 4 (fontified nil)) . 2318) (undo-tree-id1854 . -4) (undo-tree-id1855 . -4) (undo-tree-id1856 . -4) (#("ret" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 2322) (2322 . 2325) (#("return expression;" 0 18 (fontified nil)) . 2322) (2322 . 2340) (#("ret" 0 3 (fontified nil)) . 2322) (2322 . 2325) (#("return ${0:expression};" 0 23 (fontified nil)) . 2322) (2322 . 2345) (#("return expression;" 0 6 (face font-lock-keyword-face fontified nil) 6 7 (fontified nil) 7 17 (fontified nil) 17 18 (fontified nil)) . 2322) (undo-tree-id1857 . -17) (undo-tree-id1858 . -7) (undo-tree-id1859 . -7) (apply yas--snippet-revive 2322 2340 #s(yas--snippet nil (#s(yas--field 0 2329 2339 nil nil nil nil nil)) nil 32 nil nil nil t)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 0 2329 2339 nil nil nil nil nil)) nil 32 nil nil nil t)) (#("num" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 2329) (2329 . 2332) (#("num" 0 3 (fontified nil)) . 2329) (2329 . 2332) (#("num" 0 3 (fontified nil)) . 2329) (undo-tree-id1860 . -3) (undo-tree-id1861 . -3)) (26030 49123 442316 520000) 0 nil])
([nil nil ((#("
uint8_t class[7] =  {
  0b00011000,
  0b11111111,
  0b00011111,
  0b11111000,
  0b00000000,
  0b01100110,
};





enum cla {
  MID,
  FULL,
  RIG,
  LFT,
  NUL,
  TT,
  JPT,
};



int cntbits(int n) {
    int count = 0;
    
    while (n) {
        n = n & (n - 1);
        count++;
    }
    
    return count;
}




/* int state_led = 0; */

/* void state_toggle() { */
/*   if (state_led == 0) { */
/*     state_led = 1; */
/*   } else { */
/*     state_led = 0; */
/*   } */
/* } */



enum cla get_thing(uint8_t inp) {


  if(cntbits(inp ^ class[NUL]) <= 1) {
    return NUL;
  }

  if(cntbits(inp ^ class[FULL]) <= 1) {
    return FULL;
  }




  if(cntbits(inp ^ class[RIG]) <= 2) {
    return RIG;
  }

  if(cntbits(inp ^ class[LFT]) <= 2) {
    return LFT;
  }



  if(cntbits(inp ^ class[MID]) <= 1) {
    return MID;
  }



  if(cntbits(inp ^ class[TT]) <= 1) {
    return TT;
  }

  return JPT;

  
}



" 0 1 (c-in-sws t c-is-sws t fontified t) 1 2 (c-is-sws t fontified t face font-lock-type-face) 2 7 (fontified t face font-lock-type-face) 7 8 (fontified t c-type c-decl-id-start face font-lock-type-face) 8 9 (fontified t) 9 14 (fontified t face font-lock-variable-name-face) 14 15 (fontified t face (rainbow-delimiters-depth-1-face)) 15 16 (fontified t) 16 17 (fontified t face (rainbow-delimiters-depth-1-face)) 17 21 (fontified t) 21 22 (fontified t face (rainbow-delimiters-depth-1-face)) 22 107 (fontified t) 107 108 (fontified t face (rainbow-delimiters-depth-1-face)) 108 115 (fontified t) 115 117 (fontified t face font-lock-keyword-face) 117 118 (fontified t face font-lock-keyword-face) 118 119 (fontified t face font-lock-keyword-face c-type c-decl-type-start) 119 120 (fontified t) 120 123 (fontified t face font-lock-type-face) 123 124 (fontified t) 124 125 (fontified t c-type c-not-decl face (rainbow-delimiters-depth-1-face)) 125 126 (fontified t) 126 128 (fontified t) 128 131 (fontified t face font-lock-variable-name-face) 131 132 (fontified t c-type c-decl-id-start) 132 135 (fontified t) 135 139 (fontified t face font-lock-variable-name-face) 139 140 (fontified t c-type c-decl-id-start) 140 143 (fontified t) 143 146 (fontified t face font-lock-variable-name-face) 146 147 (fontified t c-type c-decl-id-start) 147 150 (fontified t) 150 153 (fontified t face font-lock-variable-name-face) 153 154 (fontified t c-type c-decl-id-start) 154 157 (fontified t) 157 160 (fontified t face font-lock-variable-name-face) 160 161 (fontified t c-type c-decl-id-start) 161 164 (fontified t) 164 166 (fontified t face font-lock-variable-name-face) 166 167 (fontified t c-type c-decl-id-start) 167 170 (fontified t) 170 173 (fontified t face font-lock-variable-name-face) 173 174 (fontified t c-type c-decl-id-start) 174 175 (fontified t) 175 176 (fontified t face (rainbow-delimiters-depth-1-face)) 176 181 (fontified t) 181 183 (fontified t face font-lock-type-face) 183 184 (fontified t c-type c-decl-id-start face font-lock-type-face) 184 185 (fontified t) 185 192 (fontified t face font-lock-function-name-face) 192 193 (fontified t c-type c-decl-arg-start face (rainbow-delimiters-depth-1-face)) 193 196 (fontified t face font-lock-type-face) 196 197 (fontified t) 197 198 (fontified t face font-lock-variable-name-face) 198 199 (fontified t face (rainbow-delimiters-depth-1-face)) 199 200 (fontified t) 200 201 (fontified t face (rainbow-delimiters-depth-1-face)) 201 206 (fontified t) 206 208 (fontified t face font-lock-type-face) 208 209 (fontified t c-type c-decl-id-start face font-lock-type-face) 209 210 (fontified t) 210 215 (fontified t face font-lock-variable-name-face) 215 230 (fontified t) 230 235 (fontified t face font-lock-keyword-face) 235 236 (fontified t) 236 237 (fontified t face (rainbow-delimiters-depth-2-face)) 237 238 (fontified t) 238 239 (fontified t face (rainbow-delimiters-depth-2-face)) 239 240 (fontified t) 240 241 (fontified t face (rainbow-delimiters-depth-2-face)) 241 258 (fontified t) 258 259 (fontified t face (rainbow-delimiters-depth-3-face)) 259 264 (fontified t) 264 265 (fontified t face (rainbow-delimiters-depth-3-face)) 265 288 (fontified t) 288 289 (fontified t face (rainbow-delimiters-depth-2-face)) 289 299 (fontified t) 299 305 (fontified t face font-lock-keyword-face) 305 313 (fontified t) 313 314 (fontified t face (rainbow-delimiters-depth-1-face)) 314 319 (fontified t) 319 320 (c-in-sws t c-is-sws t fontified t face font-lock-comment-delimiter-face) 320 322 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 322 340 (c-in-sws t fontified t face font-lock-comment-face) 340 343 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 343 345 (c-in-sws t fontified t) 345 348 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 348 369 (c-in-sws t fontified t face font-lock-comment-face) 369 372 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 372 373 (c-in-sws t fontified t) 373 378 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 378 389 (c-in-sws t fontified t face font-lock-comment-face) 389 399 (c-in-sws t face font-lock-comment-face fontified t) 399 402 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 402 403 (c-in-sws t fontified t) 403 404 (fontified t c-in-sws t face font-lock-comment-delimiter-face) 404 410 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 410 424 (c-in-sws t fontified t face font-lock-comment-face) 424 426 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 426 427 (fontified t face font-lock-comment-delimiter-face c-in-sws t) 427 428 (fontified t c-is-sws t) 428 433 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 433 441 (c-in-sws t fontified t face font-lock-comment-face) 441 444 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 444 445 (c-in-sws t fontified t) 445 452 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 452 466 (c-in-sws t fontified t face font-lock-comment-face) 466 469 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 469 470 (c-in-sws t fontified t) 470 475 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 475 476 (c-in-sws t fontified t face font-lock-comment-face) 476 479 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 479 480 (c-in-sws t fontified t) 480 481 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 481 483 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 483 484 (c-in-sws t fontified t face font-lock-comment-face) 484 487 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 487 491 (c-in-sws t fontified t) 491 492 (c-is-sws t fontified t face font-lock-keyword-face) 492 495 (fontified t face font-lock-keyword-face) 495 496 (fontified t) 496 498 (fontified t face font-lock-type-face) 498 499 (fontified t c-type c-decl-id-start face font-lock-type-face) 499 500 (fontified t) 500 509 (fontified t face font-lock-function-name-face) 509 510 (fontified t c-type c-decl-arg-start face (rainbow-delimiters-depth-1-face)) 510 517 (fontified t face font-lock-type-face) 517 518 (fontified t) 518 521 (fontified t face font-lock-variable-name-face) 521 522 (fontified t face (rainbow-delimiters-depth-1-face)) 522 523 (fontified t) 523 524 (fontified t face (rainbow-delimiters-depth-1-face)) 524 529 (fontified t) 529 531 (fontified t face font-lock-keyword-face) 531 532 (fontified t face (rainbow-delimiters-depth-2-face)) 532 539 (fontified t) 539 540 (fontified t face (rainbow-delimiters-depth-3-face)) 540 551 (fontified t) 551 552 (fontified t face (rainbow-delimiters-depth-4-face)) 552 555 (fontified t) 555 556 (fontified t face (rainbow-delimiters-depth-4-face)) 556 557 (fontified t face (rainbow-delimiters-depth-3-face)) 557 562 (fontified t) 562 563 (fontified t face (rainbow-delimiters-depth-2-face)) 563 564 (fontified t) 564 565 (fontified t face (rainbow-delimiters-depth-2-face)) 565 570 (fontified t) 570 576 (fontified t face font-lock-keyword-face) 576 584 (fontified t) 584 585 (fontified t face (rainbow-delimiters-depth-2-face)) 585 589 (fontified t) 589 591 (fontified t face font-lock-keyword-face) 591 592 (fontified t face (rainbow-delimiters-depth-2-face)) 592 599 (fontified t) 599 600 (fontified t face (rainbow-delimiters-depth-3-face)) 600 611 (fontified t) 611 612 (fontified t face (rainbow-delimiters-depth-4-face)) 612 616 (fontified t) 616 617 (fontified t face (rainbow-delimiters-depth-4-face)) 617 618 (fontified t face (rainbow-delimiters-depth-3-face)) 618 623 (fontified t) 623 624 (fontified t face (rainbow-delimiters-depth-2-face)) 624 625 (fontified t) 625 626 (fontified t face (rainbow-delimiters-depth-2-face)) 626 627 (fontified t) 627 631 (fontified t) 631 637 (fontified t face font-lock-keyword-face) 637 646 (fontified t) 646 647 (fontified t face (rainbow-delimiters-depth-2-face)) 647 654 (fontified t) 654 656 (fontified t face font-lock-keyword-face) 656 657 (fontified t face (rainbow-delimiters-depth-2-face)) 657 664 (fontified t) 664 665 (fontified t face (rainbow-delimiters-depth-3-face)) 665 676 (fontified t) 676 677 (fontified t face (rainbow-delimiters-depth-4-face)) 677 680 (fontified t) 680 681 (fontified t face (rainbow-delimiters-depth-4-face)) 681 682 (fontified t face (rainbow-delimiters-depth-3-face)) 682 687 (fontified t) 687 688 (fontified t face (rainbow-delimiters-depth-2-face)) 688 689 (fontified t) 689 690 (fontified t face (rainbow-delimiters-depth-2-face)) 690 695 (fontified t) 695 701 (fontified t face font-lock-keyword-face) 701 709 (fontified t) 709 710 (fontified t face (rainbow-delimiters-depth-2-face)) 710 714 (fontified t) 714 716 (fontified t face font-lock-keyword-face) 716 717 (fontified t face (rainbow-delimiters-depth-2-face)) 717 724 (fontified t) 724 725 (fontified t face (rainbow-delimiters-depth-3-face)) 725 736 (fontified t) 736 737 (fontified t face (rainbow-delimiters-depth-4-face)) 737 740 (fontified t) 740 741 (fontified t face (rainbow-delimiters-depth-4-face)) 741 742 (fontified t face (rainbow-delimiters-depth-3-face)) 742 747 (fontified t) 747 748 (fontified t face (rainbow-delimiters-depth-2-face)) 748 749 (fontified t) 749 750 (fontified t face (rainbow-delimiters-depth-2-face)) 750 755 (fontified t) 755 761 (fontified t face font-lock-keyword-face) 761 769 (fontified t) 769 770 (fontified t face (rainbow-delimiters-depth-2-face)) 770 776 (fontified t) 776 778 (fontified t face font-lock-keyword-face) 778 779 (fontified t face (rainbow-delimiters-depth-2-face)) 779 786 (fontified t) 786 787 (fontified t face (rainbow-delimiters-depth-3-face)) 787 798 (fontified t) 798 799 (fontified t face (rainbow-delimiters-depth-4-face)) 799 802 (fontified t) 802 803 (fontified t face (rainbow-delimiters-depth-4-face)) 803 804 (fontified t face (rainbow-delimiters-depth-3-face)) 804 809 (fontified t) 809 810 (fontified t face (rainbow-delimiters-depth-2-face)) 810 811 (fontified t) 811 812 (fontified t face (rainbow-delimiters-depth-2-face)) 812 817 (fontified t) 817 823 (fontified t face font-lock-keyword-face) 823 829 (fontified t) 829 831 (fontified t) 831 832 (fontified t face (rainbow-delimiters-depth-2-face)) 832 838 (fontified t) 838 840 (fontified t face font-lock-keyword-face) 840 841 (fontified t face (rainbow-delimiters-depth-2-face)) 841 848 (fontified t) 848 849 (fontified t face (rainbow-delimiters-depth-3-face)) 849 860 (fontified t) 860 861 (fontified t face (rainbow-delimiters-depth-4-face)) 861 863 (fontified t) 863 864 (fontified t face (rainbow-delimiters-depth-4-face)) 864 865 (fontified t face (rainbow-delimiters-depth-3-face)) 865 870 (fontified t) 870 871 (fontified t face (rainbow-delimiters-depth-2-face)) 871 872 (fontified t) 872 873 (fontified t face (rainbow-delimiters-depth-2-face)) 873 878 (fontified t) 878 884 (fontified t face font-lock-keyword-face) 884 891 (fontified t) 891 892 (fontified t face (rainbow-delimiters-depth-2-face)) 892 896 (fontified t) 896 902 (fontified t face font-lock-keyword-face) 902 912 (fontified t) 912 913 (fontified t face (rainbow-delimiters-depth-1-face)) 913 917 (fontified t)) . 384) (undo-tree-id390 . -829) (undo-tree-id391 . -916) (undo-tree-id392 . -112) (undo-tree-id393 . -112) (undo-tree-id394 . -916) (undo-tree-id395 . -916) (undo-tree-id396 . -916) (undo-tree-id397 . -916) (undo-tree-id398 . -834) (undo-tree-id399 . -917) (undo-tree-id400 . -916) (undo-tree-id401 . -889) (undo-tree-id402 . -889) (undo-tree-id403 . -889) (undo-tree-id404 . -889) (undo-tree-id405 . -889) (undo-tree-id406 . -889) (undo-tree-id407 . -912) (undo-tree-id408 . -912) (undo-tree-id409 . -912) (undo-tree-id410 . -912) (undo-tree-id411 . -912) (undo-tree-id412 . -912) (undo-tree-id413 . -912) (undo-tree-id414 . -912) (undo-tree-id415 . -914) (undo-tree-id416 . -914) (undo-tree-id417 . -914) (undo-tree-id418 . -914) (undo-tree-id419 . -914) (undo-tree-id420 . -914) (undo-tree-id421 . -914) (undo-tree-id422 . -914) (undo-tree-id423 . -915) (undo-tree-id424 . -915) (undo-tree-id425 . -915) (undo-tree-id426 . -915) (undo-tree-id427 . -915) (undo-tree-id428 . -915) (undo-tree-id429 . -915) (undo-tree-id430 . -915) (undo-tree-id431 . -916) (undo-tree-id432 . -916) (undo-tree-id433 . -916) (undo-tree-id434 . -916) (undo-tree-id435 . -916) (undo-tree-id436 . -916) (undo-tree-id437 . -916) (undo-tree-id438 . -916) (undo-tree-id439 . -917) (undo-tree-id440 . -917) (undo-tree-id441 . -917) (undo-tree-id442 . -917) (undo-tree-id443 . -917) (undo-tree-id444 . -917) (undo-tree-id445 . -917) (undo-tree-id446 . -917) (undo-tree-id447 . -917) (undo-tree-id448 . -917) (undo-tree-id449 . -917) (undo-tree-id450 . -917) (undo-tree-id451 . -917) (undo-tree-id452 . -917) (undo-tree-id453 . -917) (undo-tree-id454 . -917) (undo-tree-id455 . -916) (undo-tree-id456 . -916) (undo-tree-id457 . -916) (undo-tree-id458 . -916) (undo-tree-id459 . -916) (undo-tree-id460 . -916) (undo-tree-id461 . -916) (undo-tree-id462 . -916) (undo-tree-id463 . -916) (undo-tree-id464 . -916) (undo-tree-id465 . -917) 1300 (t 26033 1426 729410 405000)) nil (26033 1474 918362 858000) 0 nil])
([nil nil ((#("expression" 0 10 (fontified t)) . 2332) (undo-tree-id258 . -10) (undo-tree-id259 . -9) (undo-tree-id260 . 10) (undo-tree-id262 . -10)) ((2332 . 2342)) (26030 49123 438961 252000) 0 nil])
([nil nil ((282 . 294) (282 . 283) (nil syntax-table nil 282 . 283) (nil syntax-table (1) 281 . 282) (281 . 282) (#("\"" 0 1 (fontified nil)) . -281) (nil syntax-table nil 282 . 283) (nil syntax-table (1) 281 . 282) (273 . 282) (272 . 273) (271 . 272)) nil (26033 1474 918235 710000) 0 nil])
([nil nil ((#("    
" 0 4 (fontified t) 4 5 (fontified t)) . 2338) (undo-tree-id627 . -4) (undo-tree-id629 . -5) (undo-tree-id631 . -5) (undo-tree-id633 . -5) (undo-tree-id635 . -5) (undo-tree-id637 . -5) (undo-tree-id639 . -5) (undo-tree-id641 . -5) (undo-tree-id643 . -5) (undo-tree-id645 . -5) (undo-tree-id647 . -5) (undo-tree-id649 . -5) (undo-tree-id651 . -5) (undo-tree-id653 . -5) (undo-tree-id655 . -5) (undo-tree-id657 . -5) (undo-tree-id659 . -5) (undo-tree-id661 . -5) (undo-tree-id662 . -3) (undo-tree-id663 . -3) (undo-tree-id665 . -3) (undo-tree-id667 . -3) (undo-tree-id669 . -3) (undo-tree-id671 . -3) (undo-tree-id673 . -3) (undo-tree-id675 . -3) (undo-tree-id677 . -3) (undo-tree-id679 . -3) (undo-tree-id681 . -5) 2341 (t 26030 47009 390870 997000)) ((2338 . 2343)) (26030 49123 430793 718000) 0 nil])
([nil nil ((#("cur" 0 3 (fontified t)) . 942) (undo-tree-id504 . -2) (undo-tree-id505 . -3) (t 26033 1474 982970 172000)) nil (26033 1531 628100 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2338)) ((2338 . 2339)) (26030 49123 231041 304000) 0 nil])
([nil nil ((944 . 946) (#("a" 0 1 (fontified t)) . -944) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (#("t" 0 1 (fontified t)) . -945) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) 946 (942 . 946)) nil (26033 1531 628086 578000) 0 nil])
([nil nil ((2268 . 2269) (2268 . 2270) (#("  " 0 2 (fontified t)) . -2268) (undo-tree-id624 . -2) (undo-tree-id625 . -2) (2267 . 2268)) ((#("
" 0 1 (fontified t)) . 2267) (undo-tree-id1805 . -1) (undo-tree-id1806 . -1) (undo-tree-id1807 . -1) (undo-tree-id1808 . -1) (undo-tree-id1809 . -1) (undo-tree-id1810 . -1) (undo-tree-id1811 . -1) (undo-tree-id1812 . -1) (undo-tree-id1813 . -1) (undo-tree-id1814 . -1) (undo-tree-id1815 . -1) (undo-tree-id1816 . -1) (undo-tree-id1817 . -1) (undo-tree-id1818 . -1) (undo-tree-id1819 . -1) (undo-tree-id1820 . -1) (undo-tree-id1821 . -1) (undo-tree-id1822 . -1) (2268 . 2270) (#("  " 0 2 (fontified nil)) . 2268) (undo-tree-id1823 . -2) (undo-tree-id1824 . -2) (undo-tree-id1825 . -2) (undo-tree-id1826 . -2) (undo-tree-id1827 . -2) (undo-tree-id1828 . -2) (undo-tree-id1829 . -2) (undo-tree-id1830 . -2) (undo-tree-id1831 . -2) (undo-tree-id1832 . -2) (undo-tree-id1833 . -2) (undo-tree-id1834 . -2) (undo-tree-id1835 . -2) (undo-tree-id1836 . -2) (undo-tree-id1837 . -2) (undo-tree-id1838 . -2) (undo-tree-id1839 . -2) (undo-tree-id1840 . -2) (undo-tree-id1841 . -2) (#("
" 0 1 (fontified t)) . 2268) (undo-tree-id1842 . -1)) (26030 49123 166931 653000) 0 nil])
([nil nil ((#("    if (jun != 7) {
" 0 4 (fontified t) 4 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 8 (fontified t face (rainbow-delimiters-depth-3-face)) 8 9 (fontified t) 9 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t) 12 13 (fontified t) 13 14 (fontified t) 14 15 (fontified t) 15 16 (fontified t) 16 17 (fontified t face (rainbow-delimiters-depth-3-face)) 17 18 (fontified t) 18 19 (fontified t face (rainbow-delimiters-depth-3-face)) 19 20 (fontified t)) . 1183) (undo-tree-id537 . -19) (undo-tree-id538 . -20) (undo-tree-id539 . -20) (undo-tree-id540 . -20) (undo-tree-id541 . -20) (undo-tree-id542 . -20) (undo-tree-id543 . -20) (undo-tree-id544 . -20) (undo-tree-id545 . -20) (undo-tree-id546 . -20) (undo-tree-id547 . -20) (undo-tree-id548 . -20) (undo-tree-id549 . -20) (undo-tree-id550 . -20) (undo-tree-id551 . -20) (undo-tree-id552 . -20) (undo-tree-id553 . -20) (undo-tree-id554 . -20) (undo-tree-id555 . -20) (undo-tree-id556 . -20) (undo-tree-id557 . -20) (undo-tree-id558 . -20) (undo-tree-id559 . -20) (t 26033 1531 664162 211000)) nil (26033 1844 659866 238000) 0 nil])
([nil nil ((2269 . 2271) (#("  " 0 2 (fontified t)) . 2269) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id606 . -1) (undo-tree-id608 . -1) (undo-tree-id610 . -1) (undo-tree-id612 . -1) (undo-tree-id614 . -1) (undo-tree-id616 . -1) (undo-tree-id618 . -1) (undo-tree-id620 . -1) (undo-tree-id622 . -1) 2271) ((2269 . 2271) (#("  " 0 2 (fontified t)) . 2269)) (26030 49123 143526 586000) 0 nil])
([nil nil ((#("    }
" 0 4 (fontified t) 4 5 (fontified t face (rainbow-delimiters-depth-3-face)) 5 6 (fontified t)) . 1226) (undo-tree-id535 . -5) (undo-tree-id536 . -6)) nil (26033 1844 659833 715000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -2341) (undo-tree-id525 . -2) (undo-tree-id526 . -2) (undo-tree-id528 . -2) (undo-tree-id530 . -2) (undo-tree-id532 . -2) (undo-tree-id534 . -2) (undo-tree-id536 . -2) (undo-tree-id538 . -2) (undo-tree-id540 . -2) (undo-tree-id542 . -2) (undo-tree-id544 . -2) (undo-tree-id546 . -2) (undo-tree-id548 . -2) (undo-tree-id550 . -2) (undo-tree-id552 . -2) (undo-tree-id554 . -2) (undo-tree-id556 . -2) (undo-tree-id558 . -2) (undo-tree-id560 . -2) (undo-tree-id562 . -2) 2343 (2341 . 2343) (#("  " 0 2 (fontified nil)) . 2340) (undo-tree-id564 . -2) (undo-tree-id565 . -2) (undo-tree-id567 . -2) (undo-tree-id569 . -2) (undo-tree-id571 . -2) (undo-tree-id573 . -2) (undo-tree-id575 . -2) (undo-tree-id577 . -2) (undo-tree-id579 . -2) (undo-tree-id581 . -2) (undo-tree-id583 . -2) (undo-tree-id585 . -2) (undo-tree-id587 . -2) (undo-tree-id589 . -2) (undo-tree-id591 . -2) (undo-tree-id593 . -2) (undo-tree-id595 . -2) (undo-tree-id597 . -2) (undo-tree-id599 . -2) (undo-tree-id601 . -2) (2339 . 2343)) ((#("
  
" 0 1 (fontified t) 1 3 (fontified nil) 3 4 (fontified nil)) . 2339) (2340 . 2342) (#("  " 0 2 (fontified nil)) . 2341) (2341 . 2343)) (26030 49123 121136 398000) 0 nil])
([nil nil ((1184 . 1188) (#("      " 0 6 (fontified t)) . 1184)) nil (26033 1844 659825 360000) 0 nil])
([nil nil ((2577 . 2581) (#("da" 0 2 (fontified nil)) . 2577) (2577 . 2579) (#("data" 0 4 (fontified nil)) . -2577) (2577 . 2581) (#("da" 0 1 (fontified t) 1 2 (fontified t)) . -2577) (undo-tree-id749 . -2) (undo-tree-id750 . -2) 2579 (2578 . 2579) (#("uint8_t inp" 0 7 (face font-lock-type-face fontified nil) 7 8 (fontified nil) 8 11 (face font-lock-variable-name-face fontified nil)) . 2578) (2577 . 2578) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2577 2577 nil nil nil t nil)) nil 34 nil #s(yas--field 1 2577 2577 nil nil nil t nil) #s(yas--field 1 2570 2570 nil nil nil t nil) nil)) (2570 . 2589) (#("weight(${1:uint8_t inp})" 0 24 (fontified nil)) . 2570) (2570 . 2594) (#("w" 0 1 (fontified nil)) . 2570) (2570 . 2571) (#("weight(uint8_t inp)" 0 19 (fontified nil)) . -2570) (2570 . 2589) (#("we" 0 1 (fontified t) 1 2 (fontified t)) . -2570) (undo-tree-id751 . -2) (undo-tree-id752 . -2) 2572 (2571 . 2572) (#("float num" 0 5 (face font-lock-type-face fontified nil) 5 6 (fontified nil) 6 9 (face font-lock-variable-name-face fontified nil)) . 2571) (2570 . 2571) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2570 2570 nil nil nil t nil)) nil 33 nil #s(yas--field 1 2570 2570 nil nil nil t nil) nil nil)) (2566 . 2580) (#("pos(${1:float num})" 0 19 (fontified nil)) . 2566) (2566 . 2585) (#("po" 0 2 (fontified nil)) . 2566) (2566 . 2568) (#("pos(float num)" 0 14 (fontified nil)) . -2566) (2566 . 2580) (#("pos" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -2566) (undo-tree-id753 . -3) (undo-tree-id754 . -3) (undo-tree-id755 . -3) 2569 (2566 . 2569) (2565 . 2567) (2562 . 2565) (2558 . 2562) (#("   " 0 3 (fontified t)) . 2558) (undo-tree-id756 . -3) (t 26030 47014 551412 84000)) ((2558 . 2561) (#("    " 0 4 (fontified nil)) . 2558) (undo-tree-id1390 . -4) (undo-tree-id1391 . -4) (undo-tree-id1392 . -4) (undo-tree-id1393 . -4) (undo-tree-id1394 . -4) (undo-tree-id1395 . -4) (undo-tree-id1396 . -4) (undo-tree-id1397 . -4) (undo-tree-id1398 . -4) (undo-tree-id1399 . -4) (undo-tree-id1400 . -4) (undo-tree-id1401 . -4) (undo-tree-id1402 . -4) (undo-tree-id1403 . -4) (undo-tree-id1404 . -4) (undo-tree-id1405 . -4) (undo-tree-id1406 . -4) (undo-tree-id1407 . -4) (undo-tree-id1408 . -4) (undo-tree-id1409 . -4) (undo-tree-id1410 . -4) (undo-tree-id1411 . -4) (undo-tree-id1412 . -4) (undo-tree-id1413 . -4) (undo-tree-id1414 . -4) (undo-tree-id1415 . -4) (undo-tree-id1416 . -4) (undo-tree-id1417 . -4) (undo-tree-id1418 . -4) (undo-tree-id1419 . -4) (undo-tree-id1420 . -4) (undo-tree-id1421 . -4) (undo-tree-id1422 . -4) (undo-tree-id1423 . -4) (undo-tree-id1424 . -4) (undo-tree-id1425 . -4) (undo-tree-id1426 . -4) (undo-tree-id1427 . -4) (undo-tree-id1428 . -4) (undo-tree-id1429 . -4) (undo-tree-id1430 . -4) (undo-tree-id1431 . -4) (undo-tree-id1432 . -4) (undo-tree-id1433 . -4) (undo-tree-id1434 . -4) (undo-tree-id1435 . -4) (undo-tree-id1436 . -4) (undo-tree-id1437 . -4) (undo-tree-id1438 . -4) (undo-tree-id1439 . -4) (undo-tree-id1440 . -4) (undo-tree-id1441 . -4) (undo-tree-id1442 . -4) (undo-tree-id1443 . -4) (undo-tree-id1444 . -4) (undo-tree-id1445 . -4) (undo-tree-id1446 . -4) (undo-tree-id1447 . -4) (undo-tree-id1448 . -4) (undo-tree-id1449 . -4) (undo-tree-id1450 . -4) (undo-tree-id1451 . -4) (undo-tree-id1452 . -4) (undo-tree-id1453 . -4) (undo-tree-id1454 . -4) (undo-tree-id1455 . -4) (undo-tree-id1456 . -4) (undo-tree-id1457 . -4) (undo-tree-id1458 . -4) (undo-tree-id1459 . -4) (undo-tree-id1460 . -4) (undo-tree-id1461 . -4) (undo-tree-id1462 . -4) (undo-tree-id1463 . -4) (undo-tree-id1464 . -4) (undo-tree-id1465 . -4) (undo-tree-id1466 . -4) (undo-tree-id1467 . -4) (undo-tree-id1468 . -4) (undo-tree-id1469 . -4) (undo-tree-id1470 . -4) (undo-tree-id1471 . -4) (undo-tree-id1472 . -4) (undo-tree-id1473 . -4) (undo-tree-id1474 . -4) (undo-tree-id1475 . -4) (undo-tree-id1476 . -4) (undo-tree-id1477 . -4) (undo-tree-id1478 . -4) (undo-tree-id1479 . -4) (undo-tree-id1480 . -4) (undo-tree-id1481 . -4) (undo-tree-id1482 . -4) (undo-tree-id1483 . -4) (undo-tree-id1484 . -4) (undo-tree-id1485 . -4) (undo-tree-id1486 . -4) (undo-tree-id1487 . -4) (undo-tree-id1488 . -4) (undo-tree-id1489 . -4) (undo-tree-id1490 . -4) (undo-tree-id1491 . -4) (undo-tree-id1492 . -4) (undo-tree-id1493 . -4) (undo-tree-id1494 . -4) (undo-tree-id1495 . -4) (undo-tree-id1496 . -4) (undo-tree-id1497 . -4) (undo-tree-id1498 . -4) (undo-tree-id1499 . -4) (undo-tree-id1500 . -4) (undo-tree-id1501 . -4) (undo-tree-id1502 . -4) (undo-tree-id1503 . -4) (undo-tree-id1504 . -4) (undo-tree-id1505 . -4) (undo-tree-id1506 . -4) (undo-tree-id1507 . -4) (undo-tree-id1508 . -4) (undo-tree-id1509 . -4) (#("if " 0 1 (face font-lock-keyword-face fontified nil) 1 2 (face font-lock-keyword-face fontified nil) 2 3 (fontified nil)) . 2562) (undo-tree-id1510 . -3) (undo-tree-id1511 . -3) (undo-tree-id1512 . -3) (undo-tree-id1513 . -3) (undo-tree-id1514 . -3) (undo-tree-id1515 . -3) (undo-tree-id1516 . -3) (undo-tree-id1517 . -3) (undo-tree-id1518 . -3) (undo-tree-id1519 . -3) (undo-tree-id1520 . -3) (undo-tree-id1521 . -3) (undo-tree-id1522 . -3) (undo-tree-id1523 . -3) (undo-tree-id1524 . -3) (undo-tree-id1525 . -3) (undo-tree-id1526 . -3) (undo-tree-id1527 . -3) (undo-tree-id1528 . -3) (undo-tree-id1529 . -3) (undo-tree-id1530 . -3) (undo-tree-id1531 . -3) (undo-tree-id1532 . -3) (undo-tree-id1533 . -3) (undo-tree-id1534 . -3) (undo-tree-id1535 . -3) (undo-tree-id1536 . -3) (undo-tree-id1537 . -3) (undo-tree-id1538 . -3) (undo-tree-id1539 . -3) (undo-tree-id1540 . -3) (undo-tree-id1541 . -3) (undo-tree-id1542 . -3) (undo-tree-id1543 . -3) (undo-tree-id1544 . -3) (undo-tree-id1545 . -3) (undo-tree-id1546 . -3) (undo-tree-id1547 . -3) (undo-tree-id1548 . -3) (undo-tree-id1549 . -3) (undo-tree-id1550 . -3) (undo-tree-id1551 . -3) (undo-tree-id1552 . -3) (undo-tree-id1553 . -3) (undo-tree-id1554 . -3) (undo-tree-id1555 . -3) (undo-tree-id1556 . -3) (undo-tree-id1557 . -3) (undo-tree-id1558 . -3) (undo-tree-id1559 . -3) (undo-tree-id1560 . -3) (undo-tree-id1561 . -3) (undo-tree-id1562 . -3) (undo-tree-id1563 . -3) (undo-tree-id1564 . -3) (undo-tree-id1565 . -3) (undo-tree-id1566 . -3) (undo-tree-id1567 . -3) (undo-tree-id1568 . -3) (undo-tree-id1569 . -3) (undo-tree-id1570 . -3) (undo-tree-id1571 . -3) (undo-tree-id1572 . -3) (undo-tree-id1573 . -3) (undo-tree-id1574 . -3) (undo-tree-id1575 . -3) (undo-tree-id1576 . -3) (undo-tree-id1577 . -3) (undo-tree-id1578 . -3) (undo-tree-id1579 . -3) (undo-tree-id1580 . -3) (undo-tree-id1581 . -3) (undo-tree-id1582 . -3) (undo-tree-id1583 . -3) (undo-tree-id1584 . -3) (undo-tree-id1585 . -3) (undo-tree-id1586 . -3) (undo-tree-id1587 . -3) (undo-tree-id1588 . -3) (undo-tree-id1589 . -3) (undo-tree-id1590 . -3) (undo-tree-id1591 . -3) (undo-tree-id1592 . -3) (undo-tree-id1593 . -3) (undo-tree-id1594 . -3) (undo-tree-id1595 . -3) (undo-tree-id1596 . -3) (undo-tree-id1597 . -3) (undo-tree-id1598 . -3) (undo-tree-id1599 . -3) (undo-tree-id1600 . -3) (undo-tree-id1601 . -3) (undo-tree-id1602 . -3) (undo-tree-id1603 . -3) (undo-tree-id1604 . -3) (undo-tree-id1605 . -3) (undo-tree-id1606 . -3) (undo-tree-id1607 . -3) (undo-tree-id1608 . -3) (undo-tree-id1609 . -3) (undo-tree-id1610 . -3) (undo-tree-id1611 . -3) (undo-tree-id1612 . -3) (undo-tree-id1613 . -3) (undo-tree-id1614 . -3) (undo-tree-id1615 . -3) (undo-tree-id1616 . -3) (undo-tree-id1617 . -3) (undo-tree-id1618 . -3) (undo-tree-id1619 . -3) (undo-tree-id1620 . -3) (undo-tree-id1621 . -3) (undo-tree-id1622 . -3) (undo-tree-id1623 . -3) (undo-tree-id1624 . -3) (undo-tree-id1625 . -3) (undo-tree-id1626 . -3) (undo-tree-id1627 . -3) (undo-tree-id1628 . -3) (undo-tree-id1629 . -3) (#("()" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-3-face) fontified nil)) . 2565) (undo-tree-id1630 . -2) (undo-tree-id1631 . -2) (undo-tree-id1632 . 1) (undo-tree-id1633 . -1) (undo-tree-id1634 . -2) (undo-tree-id1635 . 1) (undo-tree-id1636 . -2) (undo-tree-id1637 . -2) (undo-tree-id1638 . -1) (undo-tree-id1639 . -1) (undo-tree-id1640 . -2) (undo-tree-id1641 . -2) (undo-tree-id1642 . -2) (undo-tree-id1643 . -2) (undo-tree-id1644 . -2) (undo-tree-id1645 . -2) (undo-tree-id1646 . -2) (undo-tree-id1647 . -2) (undo-tree-id1648 . -2) (undo-tree-id1649 . -2) (undo-tree-id1650 . -2) (undo-tree-id1651 . -2) (undo-tree-id1652 . -2) (undo-tree-id1653 . -2) (undo-tree-id1654 . -2) (undo-tree-id1655 . -2) (undo-tree-id1656 . -2) (undo-tree-id1657 . -2) (undo-tree-id1658 . -2) (undo-tree-id1659 . -2) (undo-tree-id1660 . -2) (undo-tree-id1661 . -2) (undo-tree-id1662 . -2) (undo-tree-id1663 . -2) (undo-tree-id1664 . -2) (undo-tree-id1665 . -2) (undo-tree-id1666 . -2) (undo-tree-id1667 . -2) (undo-tree-id1668 . -2) (undo-tree-id1669 . -2) (undo-tree-id1670 . -2) (undo-tree-id1671 . -2) (undo-tree-id1672 . -2) (undo-tree-id1673 . -2) (undo-tree-id1674 . -2) (undo-tree-id1675 . -2) (undo-tree-id1676 . -2) (undo-tree-id1677 . -2) (undo-tree-id1678 . -2) (undo-tree-id1679 . -2) (undo-tree-id1680 . -2) (undo-tree-id1681 . -2) (undo-tree-id1682 . -2) (undo-tree-id1683 . -2) (undo-tree-id1684 . -2) (undo-tree-id1685 . -2) (undo-tree-id1686 . -2) (undo-tree-id1687 . -2) (undo-tree-id1688 . -2) (undo-tree-id1689 . -2) (undo-tree-id1690 . -2) (undo-tree-id1691 . -2) (undo-tree-id1692 . -2) (undo-tree-id1693 . -2) (undo-tree-id1694 . -2) (undo-tree-id1695 . -2) (undo-tree-id1696 . -2) (undo-tree-id1697 . -2) (undo-tree-id1698 . -2) (undo-tree-id1699 . -2) (undo-tree-id1700 . -2) (undo-tree-id1701 . -2) (undo-tree-id1702 . -2) (undo-tree-id1703 . -2) (undo-tree-id1704 . -2) (undo-tree-id1705 . -2) (undo-tree-id1706 . -2) (undo-tree-id1707 . -2) (undo-tree-id1708 . -2) (undo-tree-id1709 . -2) (undo-tree-id1710 . -2) (undo-tree-id1711 . -2) (undo-tree-id1712 . -2) (undo-tree-id1713 . -2) (undo-tree-id1714 . -2) (undo-tree-id1715 . -2) (undo-tree-id1716 . -2) (undo-tree-id1717 . -2) (undo-tree-id1718 . -2) (undo-tree-id1719 . -2) (undo-tree-id1720 . -2) (undo-tree-id1721 . -2) (undo-tree-id1722 . -2) (undo-tree-id1723 . -2) (undo-tree-id1724 . -2) (undo-tree-id1725 . -2) (undo-tree-id1726 . -1) (undo-tree-id1727 . -1) (undo-tree-id1728 . -1) (undo-tree-id1729 . -1) (undo-tree-id1730 . -1) (undo-tree-id1731 . -1) (undo-tree-id1732 . -1) (undo-tree-id1733 . -1) (undo-tree-id1734 . -1) (undo-tree-id1735 . -1) (undo-tree-id1736 . -1) (undo-tree-id1737 . -1) (undo-tree-id1738 . -1) (undo-tree-id1739 . -1) (undo-tree-id1740 . -1) (undo-tree-id1741 . -1) (undo-tree-id1742 . -1) (undo-tree-id1743 . -1) (undo-tree-id1744 . -1) (undo-tree-id1745 . -1) (undo-tree-id1746 . -1) (undo-tree-id1747 . -1) (undo-tree-id1748 . -1) (undo-tree-id1749 . -1) (undo-tree-id1750 . -1) (undo-tree-id1751 . -1) (#("pos" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 2566) (undo-tree-id1752 . -3) (undo-tree-id1753 . -3) (2566 . 2569) (#("pos(float num)" 0 14 (fontified nil)) . 2566) (2566 . 2580) (#("po" 0 2 (fontified nil)) . 2566) (2566 . 2568) (#("pos(${1:float num})" 0 19 (fontified nil)) . 2566) (2566 . 2585) (#("pos(float num)" 0 3 (fontified nil) 3 4 (face (rainbow-delimiters-depth-4-face) fontified nil) 4 9 (face font-lock-type-face fontified nil) 9 10 (fontified nil) 10 13 (face font-lock-variable-name-face fontified nil) 13 14 (face (rainbow-delimiters-depth-4-face) fontified nil)) . 2566) (undo-tree-id1754 . -4) (undo-tree-id1755 . -4) (undo-tree-id1756 . -4) (undo-tree-id1757 . -14) (undo-tree-id1758 . -14) (undo-tree-id1759 . -14) (undo-tree-id1760 . -14) (undo-tree-id1761 . -14) (undo-tree-id1762 . -14) (undo-tree-id1763 . -14) (undo-tree-id1764 . -14) (undo-tree-id1765 . -4) (undo-tree-id1766 . -4) (undo-tree-id1767 . -4) (undo-tree-id1768 . -4) (undo-tree-id1769 . -4) (undo-tree-id1770 . -4) (undo-tree-id1771 . -4) (undo-tree-id1772 . -4) (undo-tree-id1773 . -4) (undo-tree-id1774 . -4) (undo-tree-id1775 . -4) (undo-tree-id1776 . -4) (undo-tree-id1777 . -4) (undo-tree-id1778 . -4) (undo-tree-id1779 . -4) (undo-tree-id1780 . -4) (undo-tree-id1781 . -4) (undo-tree-id1782 . -4) (apply yas--snippet-revive 2566 2580 #s(yas--snippet nil (#s(yas--field 1 2570 2570 nil nil nil t nil)) nil 33 nil #s(yas--field 1 2570 2570 nil nil nil t nil) nil nil)) (#("w" 0 1 (fontified nil)) . 2570) (undo-tree-id1783 . -1) (undo-tree-id1784 . -1) (2571 . 2580) (#("e" 0 1 (fontified nil)) . 2571) (undo-tree-id1785 . -1) (undo-tree-id1786 . -1) (2570 . 2572) (#("weight(uint8_t inp)" 0 19 (fontified nil)) . 2570) (2570 . 2589) (#("w" 0 1 (fontified nil)) . 2570) (2570 . 2571) (#("weight(${1:uint8_t inp})" 0 24 (fontified nil)) . 2570) (2570 . 2594) (#("weight(uint8_t inp)" 0 6 (fontified nil) 6 7 (face (rainbow-delimiters-depth-5-face) fontified nil) 7 14 (face font-lock-type-face fontified nil) 14 15 (fontified nil) 15 18 (face font-lock-variable-name-face fontified nil) 18 19 (face (rainbow-delimiters-depth-5-face) fontified nil)) . 2570) (undo-tree-id1787 . -7) (undo-tree-id1788 . -7) (undo-tree-id1789 . -19) (undo-tree-id1790 . -7) (undo-tree-id1791 . -7) (undo-tree-id1792 . -7) (undo-tree-id1793 . -7) (undo-tree-id1794 . -7) (undo-tree-id1795 . -7) (undo-tree-id1796 . -7) (undo-tree-id1797 . -7) (undo-tree-id1798 . -7) (undo-tree-id1799 . -7) (apply yas--snippet-revive 2570 2589 #s(yas--snippet nil (#s(yas--field 1 2577 2577 nil nil nil t nil)) nil 34 nil #s(yas--field 1 2577 2577 nil nil nil t nil) #s(yas--field 1 2570 2570 nil nil nil t nil) nil)) (#("d" 0 1 (fontified nil)) . 2577) (undo-tree-id1800 . -1) (undo-tree-id1801 . -1) (2578 . 2589) (#("a" 0 1 (fontified nil)) . 2578) (undo-tree-id1802 . -1) (undo-tree-id1803 . -1) (2577 . 2579) (#("data" 0 4 (fontified nil)) . 2577) (2577 . 2581) (#("da" 0 2 (fontified nil)) . 2577) (2577 . 2579) (#("data" 0 4 (fontified t)) . 2577) (undo-tree-id1804 . -4)) (26030 49123 46007 376000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1183) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1)) nil (26033 1844 659815 354000) 0 nil])
([nil nil ((apply yas--snippet-revive 2570 2582 #s(yas--snippet nil (#s(yas--field 1 2577 2577 nil nil nil t nil)) nil 34 nil #s(yas--field 1 2577 2577 nil nil nil t nil) #s(yas--field 1 2570 2570 nil nil nil t nil) nil))) ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2577 2577 nil nil nil t nil)) nil 34 nil #s(yas--field 1 2577 2577 nil nil nil t nil) #s(yas--field 1 2570 2570 nil nil nil t nil) nil))) (26030 49123 23525 325000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1216) (undo-tree-id560 . -4) (undo-tree-id561 . -4) (undo-tree-id562 . -4) (undo-tree-id563 . -4) (undo-tree-id564 . -4) (undo-tree-id565 . -4) (undo-tree-id566 . -4) (undo-tree-id567 . -4) (undo-tree-id568 . -4) (undo-tree-id569 . -4) (undo-tree-id570 . -4) 1220 (1216 . 1220) (#("    " 0 4 (fontified nil)) . 1215) (undo-tree-id571 . -4) (undo-tree-id572 . -4) (undo-tree-id573 . -4) (undo-tree-id574 . -4) (undo-tree-id575 . -4) (undo-tree-id576 . -4) (undo-tree-id577 . -4) (undo-tree-id578 . -4) (undo-tree-id579 . -4) (undo-tree-id580 . -4) (undo-tree-id581 . -4) (1215 . 1220) (#(" " 0 1 (fontified nil)) . 1214) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (1215 . 1216) (t 26033 1844 695489 415000)) nil (26033 1847 823351 545000) 0 nil])
([nil nil ((2583 . 2589) (apply yas--snippet-revive 2566 2583 #s(yas--snippet nil (#s(yas--field 1 2570 2570 nil nil nil t nil)) nil 33 nil #s(yas--field 1 2570 2570 nil nil nil t nil) nil nil))) ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2570 2570 nil nil nil t nil)) nil 33 nil #s(yas--field 1 2570 2570 nil nil nil t nil) nil nil)) (#(" < 0.5" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t)) . 2583) (undo-tree-id1379 . -6) (undo-tree-id1380 . -6) (undo-tree-id1381 . -6) (undo-tree-id1382 . -6) (undo-tree-id1383 . -6) (undo-tree-id1384 . -6) (undo-tree-id1385 . -6) (undo-tree-id1386 . -6) (undo-tree-id1387 . -6) (undo-tree-id1388 . -6) (undo-tree-id1389 . -6)) (26030 49123 707 85000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1216) (undo-tree-id602 . 1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (t 26033 1847 856691 769000)) nil (26033 1857 474952 506000) 0 nil])
([nil nil ((2593 . 2599) (2592 . 2598) (2591 . 2593) (2590 . 2591)) ((#(" " 0 1 (fontified nil)) . 2590) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (#("{}" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-3-face) fontified nil)) . 2591) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1) (undo-tree-id1176 . -1) (undo-tree-id1177 . -1) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) (undo-tree-id1194 . -1) (undo-tree-id1195 . -1) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (undo-tree-id1200 . -1) (undo-tree-id1201 . -1) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (#("

    " 0 1 (fontified t) 1 2 (fontified nil) 2 6 (fontified t)) . 2592) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (#("      " 0 5 (fontified t) 5 6 (fontified t)) . 2593) (undo-tree-id1359 . -5) (undo-tree-id1360 . -5) (undo-tree-id1361 . -5) (undo-tree-id1362 . -5) (undo-tree-id1363 . -5) (undo-tree-id1364 . -5) (undo-tree-id1365 . -5) (undo-tree-id1366 . -5) (undo-tree-id1367 . -5) (undo-tree-id1368 . -5) (undo-tree-id1369 . -5) (undo-tree-id1370 . -5) (undo-tree-id1371 . -5) (undo-tree-id1372 . -5) (undo-tree-id1373 . -5) (undo-tree-id1374 . -5) (undo-tree-id1375 . -5) (undo-tree-id1376 . -5) (undo-tree-id1377 . -5) (undo-tree-id1378 . -5)) (26030 49122 937999 981000) 0 nil])
([nil nil ((#("      
" 0 6 (fontified t) 6 7 (fontified t)) . 1216) (undo-tree-id600 . 7) (undo-tree-id601 . -6)) nil (26033 1857 474942 583000) 0 nil])
([nil nil ((2596 . 2602) (#("      " 0 6 (fontified nil)) . 2595) (undo-tree-id741 . -6) (undo-tree-id742 . -6) (2595 . 2602) (#("      " 0 6 (fontified nil)) . 2594) (undo-tree-id743 . -6) (undo-tree-id744 . -6) (2594 . 2601) (#("      " 0 6 (fontified nil)) . 2593) (undo-tree-id745 . -6) (undo-tree-id746 . -6) (2599 . 2600) (2593 . 2599) (#("     " 0 5 (fontified nil)) . -2593) (undo-tree-id747 . -5) (undo-tree-id748 . -5) (#(" " 0 1 (fontified t)) . 2598)) ((2593 . 2599) (#("      " 0 6 (fontified nil)) . 2593) (undo-tree-id914 . -6) (undo-tree-id915 . -6) (undo-tree-id916 . -6) (undo-tree-id917 . -6) (undo-tree-id918 . -6) (undo-tree-id919 . -6) (undo-tree-id920 . -6) (undo-tree-id921 . -6) (undo-tree-id922 . -6) (undo-tree-id923 . -6) (undo-tree-id924 . -6) (undo-tree-id925 . -6) (undo-tree-id926 . -6) (undo-tree-id927 . -6) (undo-tree-id928 . -6) (undo-tree-id929 . -6) (undo-tree-id930 . -6) (undo-tree-id931 . -6) (undo-tree-id932 . -6) (undo-tree-id933 . -6) (undo-tree-id934 . -6) (undo-tree-id935 . -6) (undo-tree-id936 . -6) (undo-tree-id937 . -6) (undo-tree-id938 . -6) (undo-tree-id939 . -6) (undo-tree-id940 . -6) (undo-tree-id941 . -6) (undo-tree-id942 . -6) (undo-tree-id943 . -6) (undo-tree-id944 . -6) (undo-tree-id945 . -6) (undo-tree-id946 . -6) (undo-tree-id947 . -6) (undo-tree-id948 . -6) (undo-tree-id949 . -6) (undo-tree-id950 . -6) (undo-tree-id951 . -6) (undo-tree-id952 . -6) (undo-tree-id953 . -6) (undo-tree-id954 . -6) (undo-tree-id955 . -6) (undo-tree-id956 . -6) (undo-tree-id957 . -6) (undo-tree-id958 . -6) (undo-tree-id959 . -6) (undo-tree-id960 . -6) (undo-tree-id961 . -6) (undo-tree-id962 . -6) (undo-tree-id963 . -6) (undo-tree-id964 . -6) (undo-tree-id965 . -6) (undo-tree-id966 . -6) (undo-tree-id967 . -6) (undo-tree-id968 . -6) (undo-tree-id969 . -6) (undo-tree-id970 . -6) (undo-tree-id971 . -6) (undo-tree-id972 . -6) (undo-tree-id973 . -6) (undo-tree-id974 . -6) (undo-tree-id975 . -6) (undo-tree-id976 . -6) (undo-tree-id977 . -6) (undo-tree-id978 . -6) (undo-tree-id979 . -6) (undo-tree-id980 . -6) (undo-tree-id981 . -6) (undo-tree-id982 . -6) (undo-tree-id983 . -6) (undo-tree-id984 . -6) (undo-tree-id985 . -6) (undo-tree-id986 . -6) (undo-tree-id987 . -6) (undo-tree-id988 . -6) (undo-tree-id989 . -6) (undo-tree-id990 . -6) (#("
" 0 1 (fontified nil)) . 2599) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (2593 . 2599) (#("      
" 0 6 (fontified nil) 6 7 (fontified nil)) . 2594) (undo-tree-id1068 . -6) (undo-tree-id1069 . -6) (undo-tree-id1070 . -7) (undo-tree-id1071 . -7) (undo-tree-id1072 . -7) (2594 . 2600) (#("      
" 0 6 (fontified nil) 6 7 (fontified nil)) . 2595) (undo-tree-id1073 . -7) (undo-tree-id1074 . -7) (2595 . 2601) (#("      " 0 5 (fontified t) 5 6 (fontified t)) . 2596) (undo-tree-id1075 . -1) (undo-tree-id1076 . -6)) (26030 49122 908204 104000) 0 nil])
([nil nil ((#("
" 0 1 (rear-nonsticky t fontified t)) . 1216) (undo-tree-id599 . 1)) nil (26033 1857 474938 443000) 0 nil])
([nil nil ((2594 . 2600)) ((#("      " 0 5 (fontified t) 5 6 (fontified t)) . 2594) (undo-tree-id895 . -5) (undo-tree-id896 . -5) (undo-tree-id897 . -5) (undo-tree-id898 . -5) (undo-tree-id899 . -5) (undo-tree-id900 . -5) (undo-tree-id901 . -5) (undo-tree-id902 . -5) (undo-tree-id903 . -5) (undo-tree-id904 . -5) (undo-tree-id905 . -5) (undo-tree-id906 . -5) (undo-tree-id907 . -5) (undo-tree-id908 . -5) (undo-tree-id909 . -5) (undo-tree-id910 . -5) (undo-tree-id911 . -5) (undo-tree-id912 . -5) (undo-tree-id913 . -5)) (26030 49122 855060 901000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1216) (undo-tree-id598 . 1)) nil (26033 1857 474932 29000) 0 nil])
([nil nil ((2594 . 2600) (#("     " 0 5 (fontified nil)) . -2594) (undo-tree-id739 . -5) (undo-tree-id740 . -5) (#(" " 0 1 (fontified t)) . 2599)) ((2594 . 2600) (#("      " 0 5 (fontified t) 5 6 (fontified t)) . 2594) (undo-tree-id885 . -5) (undo-tree-id886 . -5) (undo-tree-id887 . -5) (undo-tree-id888 . -5) (undo-tree-id889 . -5) (undo-tree-id890 . -5) (undo-tree-id891 . -5) (undo-tree-id892 . -5) (undo-tree-id893 . -5) (undo-tree-id894 . -5)) (26030 49122 834534 458000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1216) (undo-tree-id597 . 1)) nil (26033 1857 474927 776000) 0 nil])
([nil nil ((2594 . 2600) (#("     " 0 5 (fontified nil)) . -2594) (undo-tree-id737 . -5) (undo-tree-id738 . -5) (#(" " 0 1 (fontified t)) . 2599)) ((2594 . 2600) (#("      " 0 5 (fontified t) 5 6 (fontified t)) . 2594) (undo-tree-id866 . -5) (undo-tree-id867 . -5) (undo-tree-id868 . -5) (undo-tree-id869 . -5) (undo-tree-id870 . -5) (undo-tree-id871 . -5) (undo-tree-id872 . -5) (undo-tree-id873 . -5) (undo-tree-id874 . -5) (undo-tree-id875 . -5) (undo-tree-id876 . -5) (undo-tree-id877 . -5) (undo-tree-id878 . -5) (undo-tree-id879 . -5) (undo-tree-id880 . -5) (undo-tree-id881 . -5) (undo-tree-id882 . -5) (undo-tree-id883 . -5) (undo-tree-id884 . -5)) (26030 49122 778598 910000) 0 nil])
([nil nil ((#("
    //    state_toggle();
" 0 1 (fontified t) 1 5 (c-in-sws t c-is-sws t fontified t) 5 6 (c-is-sws t c-in-sws t fontified t face font-lock-comment-delimiter-face) 6 11 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 11 26 (c-in-sws t fontified t face font-lock-comment-face) 26 27 (c-in-sws t fontified t face font-lock-comment-face)) . 1216) (undo-tree-id594 . 27) (undo-tree-id595 . -27) (undo-tree-id596 . -26)) nil (26033 1857 474922 438000) 0 nil])
([nil nil ((#("P" 0 1 (fontified t)) . -2600) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (#("o" 0 1 (fontified t)) . -2601) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (#("s" 0 1 (fontified t)) . -2602) (undo-tree-id725 . -1) (undo-tree-id726 . -1) 2603 (2600 . 2603) (#("P" 0 1 (fontified t)) . -2600) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (#("o" 0 1 (fontified t)) . -2601) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (#("s" 0 1 (fontified t)) . -2602) (undo-tree-id731 . -1) (undo-tree-id732 . -1) 2603 (2600 . 2603) (#("P" 0 1 (fontified t)) . -2600) (undo-tree-id733 . -1) (undo-tree-id734 . -1) 2601 (2600 . 2601) (2594 . 2600) (#("     " 0 5 (fontified nil)) . -2594) (undo-tree-id735 . -5) (undo-tree-id736 . -5) (#(" " 0 1 (fontified t)) . 2599)) ((2594 . 2600) (#("      " 0 6 (fontified nil)) . 2594) (#("P" 0 1 (fontified nil)) . 2600) (2600 . 2601) (#("Pos" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 2600) (2600 . 2603) (#("Pos" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 2600) (2600 . 2603)) (26030 49122 739812 739000) 0 nil])
([nil nil ((1919 . 1920)) nil (26033 1857 474897 230000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -2600) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (#("n" 0 1 (fontified t)) . -2601) (undo-tree-id719 . -1) (undo-tree-id720 . -1) 2602 (2600 . 2602) (2594 . 2600) (#("      " 0 6 (fontified t)) . 2594)) ((2594 . 2600) (#("      " 0 6 (fontified nil)) . 2594) (undo-tree-id848 . -6) (undo-tree-id849 . -6) (undo-tree-id850 . -6) (undo-tree-id851 . -6) (undo-tree-id852 . -6) (undo-tree-id853 . -6) (undo-tree-id854 . -6) (undo-tree-id855 . -6) (undo-tree-id856 . -6) (undo-tree-id857 . -6) (undo-tree-id858 . -6) (undo-tree-id859 . -6) (undo-tree-id860 . -6) (undo-tree-id861 . -6) (undo-tree-id862 . -6) (undo-tree-id863 . -5) (#("en" 0 1 (fontified nil) 1 2 (fontified nil)) . 2600) (undo-tree-id864 . -2) (undo-tree-id865 . -2) (2600 . 2602)) (26030 49122 731404 197000) 0 nil])
([nil nil ((1917 . 1920) (#("1" 0 1 (fontified t)) . -1917) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (#("0" 0 1 (fontified t)) . -1918) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (#("0" 0 1 (fontified t)) . -1919) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) 1920 (t 26033 1857 508276 496000)) nil (26033 1925 272972 722000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3018 . 3019) (nil fontified nil 2600 . 3019) (2600 . 3019) 2599) ((#("    switch (get_thing(i)){
    case FULL:
      printf(\"FULL\\n\");
      break;
      
    case MID:
      printf(\"MID\\n\");
      break;
      
    case LFT:
      printf(\"LFT\\n\");
      break;
      
    case RIG:
      printf(\"RIG\\n\");
      break;
      
    case NUL:
      printf(\"NUL\\n\");
      break;

    case TT:
      printf(\"TT\\n\");
      break;

    case JPT:
      printf(\"JPT\\n\");
      break;
      
  }

" 0 4 (fontified nil) 4 10 (face font-lock-keyword-face fontified nil) 10 11 (fontified nil) 11 12 (face (rainbow-delimiters-depth-4-face) fontified nil) 12 21 (fontified nil) 21 22 (face (rainbow-delimiters-depth-5-face) fontified nil) 22 23 (fontified nil) 23 24 (face (rainbow-delimiters-depth-5-face) fontified nil) 24 25 (face (rainbow-delimiters-depth-4-face) fontified nil) 25 26 (face (rainbow-delimiters-depth-4-face) fontified nil) 26 27 (fontified nil) 27 31 (fontified nil) 31 35 (face font-lock-keyword-face fontified nil) 35 40 (fontified nil) 40 41 (c-type c-decl-end fontified nil) 41 42 (fontified nil) 42 48 (fontified nil) 48 54 (fontified nil) 54 55 (face (rainbow-delimiters-depth-5-face) fontified nil) 55 63 (face font-lock-string-face fontified nil) 63 64 (face (rainbow-delimiters-depth-5-face) fontified nil) 64 65 (fontified nil) 65 66 (fontified nil) 66 72 (fontified nil) 72 77 (face font-lock-keyword-face fontified nil) 77 79 (fontified nil) 79 86 (fontified nil) 86 90 (fontified nil) 90 94 (face font-lock-keyword-face fontified nil) 94 98 (fontified nil) 98 99 (c-type c-decl-end fontified nil) 99 100 (fontified nil) 100 106 (fontified nil) 106 112 (fontified nil) 112 113 (face (rainbow-delimiters-depth-5-face) fontified nil) 113 120 (face font-lock-string-face fontified nil) 120 121 (face (rainbow-delimiters-depth-5-face) fontified nil) 121 123 (fontified nil) 123 129 (fontified nil) 129 134 (face font-lock-keyword-face fontified nil) 134 136 (fontified nil) 136 141 (fontified nil) 141 142 (fontified nil) 142 143 (fontified nil) 143 147 (fontified nil) 147 151 (face font-lock-keyword-face fontified nil) 151 155 (fontified nil) 155 156 (c-type c-decl-end fontified nil) 156 157 (fontified nil) 157 163 (fontified nil) 163 169 (fontified nil) 169 170 (face (rainbow-delimiters-depth-5-face) fontified nil) 170 177 (face font-lock-string-face fontified nil) 177 178 (face (rainbow-delimiters-depth-5-face) fontified nil) 178 180 (fontified nil) 180 186 (fontified nil) 186 191 (face font-lock-keyword-face fontified nil) 191 193 (fontified nil) 193 198 (fontified nil) 198 199 (fontified nil) 199 200 (fontified nil) 200 204 (fontified nil) 204 208 (face font-lock-keyword-face fontified nil) 208 212 (fontified nil) 212 213 (c-type c-decl-end fontified nil) 213 214 (fontified nil) 214 220 (fontified nil) 220 226 (fontified nil) 226 227 (face (rainbow-delimiters-depth-5-face) fontified nil) 227 234 (face font-lock-string-face fontified nil) 234 235 (face (rainbow-delimiters-depth-5-face) fontified nil) 235 237 (fontified nil) 237 243 (fontified nil) 243 248 (face font-lock-keyword-face fontified nil) 248 250 (fontified nil) 250 255 (fontified nil) 255 256 (fontified nil) 256 257 (fontified nil) 257 261 (fontified nil) 261 265 (face font-lock-keyword-face fontified nil) 265 269 (fontified nil) 269 270 (c-type c-decl-end fontified nil) 270 271 (fontified nil) 271 277 (fontified nil) 277 283 (fontified nil) 283 284 (face (rainbow-delimiters-depth-5-face) fontified nil) 284 291 (face font-lock-string-face fontified nil) 291 292 (face (rainbow-delimiters-depth-5-face) fontified nil) 292 294 (fontified nil) 294 300 (fontified nil) 300 305 (face font-lock-keyword-face fontified nil) 305 307 (fontified nil) 307 308 (fontified nil) 308 312 (fontified nil) 312 316 (face font-lock-keyword-face fontified nil) 316 319 (fontified nil) 319 320 (c-type c-decl-end fontified nil) 320 321 (fontified nil) 321 327 (fontified nil) 327 333 (fontified nil) 333 334 (face (rainbow-delimiters-depth-5-face) fontified nil) 334 340 (face font-lock-string-face fontified nil) 340 341 (face (rainbow-delimiters-depth-5-face) fontified nil) 341 343 (fontified nil) 343 349 (fontified nil) 349 354 (face font-lock-keyword-face fontified nil) 354 356 (fontified nil) 356 357 (fontified nil) 357 361 (fontified nil) 361 365 (face font-lock-keyword-face fontified nil) 365 369 (fontified nil) 369 370 (c-type c-decl-end fontified nil) 370 371 (fontified nil) 371 377 (fontified nil) 377 383 (fontified nil) 383 384 (face (rainbow-delimiters-depth-5-face) fontified nil) 384 391 (face font-lock-string-face fontified nil) 391 392 (face (rainbow-delimiters-depth-5-face) fontified nil) 392 394 (fontified nil) 394 400 (fontified nil) 400 405 (face font-lock-keyword-face fontified nil) 405 407 (fontified nil) 407 414 (fontified nil) 414 416 (fontified nil) 416 417 (face (rainbow-delimiters-depth-4-face) fontified nil) 417 418 (fontified nil) 418 419 (fontified nil rear-nonsticky nil)) . 2600) (undo-tree-id831 . -86) (undo-tree-id832 . -356) (undo-tree-id833 . -86) (undo-tree-id834 . -98) (undo-tree-id835 . -98) (undo-tree-id836 . -22) (undo-tree-id837 . -23) (undo-tree-id838 . -42) (undo-tree-id839 . -54) (undo-tree-id840 . -98) (undo-tree-id841 . -98) (undo-tree-id842 . -98) (undo-tree-id843 . -98) (undo-tree-id844 . -98) (undo-tree-id845 . -98) (undo-tree-id846 . -98) (undo-tree-id847 . -98) (nil rear-nonsticky t 3018 . 3019)) (26030 49122 728952 85000) 0 nil])
([nil nil ((421 . 422) (408 . 421) (t 26033 1925 334173 497000)) nil (26033 2018 116915 137000) 0 nil])
([nil nil ((2594 . 2600) (#("          " 0 6 (fontified t) 6 10 (fontified t)) . 2594) (undo-tree-id712 . -6) (undo-tree-id713 . -6) (undo-tree-id714 . -6) (undo-tree-id715 . -6)) ((2594 . 2604) (#("      " 0 6 (fontified t)) . 2594)) (26030 49122 725503 198000) 0 nil])
([nil nil ((420 . 421) (#("0" 0 1 (fontified t)) . -420) (undo-tree-id758 . -1) (undo-tree-id759 . -1) 421) nil (26033 2018 116912 590000) 0 nil])
([nil nil ((2623 . 2629) (#("    " 0 4 (fontified t)) . 2623) 2629) ((2623 . 2627) (#("      " 0 6 (fontified t)) . 2623)) (26030 49122 720809 158000) 0 nil])
([nil nil ((441 . 443) (431 . 441) (424 . 431) (422 . 424)) nil (26033 2018 116907 17000) 0 nil])
([nil nil ((2640 . 2641) (#("      " 0 6 (fontified t)) . 2640) 2648) ((2640 . 2646) (#("	" 0 1 (fontified t)) . 2640) (undo-tree-id830 . -1)) (26030 49122 714030 882000) 0 nil])
([nil nil ((446 . 448) (445 . 447) (444 . 446) (443 . 444)) nil (26033 2018 116904 517000) 0 nil])
([nil nil ((2659 . 2660) (#("      " 0 6 (fontified t)) . 2659) 2669) ((2659 . 2665) (#("	" 0 1 (fontified t)) . 2659)) (26030 49122 490678 501000) 0 nil])
([nil nil ((455 . 457) (#("e" 0 1 (fontified t)) . -455) (undo-tree-id754 . -1) (undo-tree-id755 . -1) 456 (452 . 456) (451 . 453) (448 . 451) (446 . 448) (#(" " 0 1 (fontified nil)) . -446) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (#(" " 0 1 (fontified t)) . 447)) nil (26033 2018 116900 797000) 0 nil])
([nil nil ((2674 . 2680) (#("    " 0 4 (fontified t)) . 2674) 2686) ((2674 . 2678) (#("      " 0 6 (fontified t)) . 2674)) (26030 49122 467726 724000) 0 nil])
([nil nil ((465 . 474) (461 . 465) (460 . 464) (459 . 461) (458 . 459)) nil (26033 2018 116891 543000) 0 nil])
([nil nil ((2690 . 2691) (#("      " 0 6 (fontified t)) . 2690) 2704) ((2690 . 2696) (#("	" 0 1 (fontified t)) . 2690)) (26030 49122 410527 303000) 0 nil])
([nil nil ((474 . 475)) nil (26033 2018 116888 769000) 0 nil])
([nil nil ((2708 . 2709) (#("      " 0 6 (fontified t)) . 2708) 2719) ((2708 . 2714) (#("	" 0 1 (fontified t)) . 2708)) (26030 49122 387720 677000) 0 nil])
([nil nil ((500 . 501) (491 . 500) (487 . 491) (486 . 490) (485 . 487) (484 . 485) (#("else" 0 1 (fontified nil face font-lock-keyword-face) 1 2 (fontified nil face font-lock-keyword-face) 2 3 (fontified nil face font-lock-keyword-face) 3 4 (fontified nil face font-lock-keyword-face)) . 484) (undo-tree-id752 . -3) (undo-tree-id753 . -4) (480 . 484) 484 (479 . 484)) nil (26033 2018 116886 117000) 0 nil])
([nil nil ((2716 . 2717) (#("     " 0 5 (fontified nil)) . -2716) (undo-tree-id711 . -5) (#(" " 0 1 (fontified t)) . 2721)) ((2716 . 2722) (#("	" 0 1 (fontified t)) . 2716)) (26030 49122 329188 464000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1283) (undo-tree-id748 . -4) (undo-tree-id749 . -4) 1287 (1283 . 1287) (#("    " 0 4 (fontified nil)) . 1282) (undo-tree-id750 . -4) (undo-tree-id751 . -4) (1281 . 1287)) nil (26033 2018 116878 374000) 0 nil])
([nil nil ((2718 . 2724) (#("    " 0 4 (fontified t)) . 2718)) ((2718 . 2722) (#("      " 0 6 (fontified t)) . 2718)) (26030 49122 306828 803000) 0 nil])
([nil nil ((1299 . 1301) (1289 . 1299) (1287 . 1289) (1283 . 1287)) nil (26033 2018 116870 274000) 0 nil])
([nil nil ((2734 . 2735) (#("      " 0 6 (fontified t)) . -2734) (undo-tree-id710 . -6) 2740) ((2734 . 2740) (#("	" 0 1 (fontified t)) . 2734)) (26030 49122 246695 724000) 0 nil])
([nil nil ((1301 . 1302)) nil (26033 2018 116867 709000) 0 nil])
([nil nil ((2752 . 2753) (#("      " 0 6 (fontified t)) . 2752) 2760) ((2752 . 2758) (#("	" 0 1 (fontified t)) . 2752)) (26030 49122 224802 553000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1304) (undo-tree-id744 . -4) (undo-tree-id745 . -4) 1308 (1304 . 1308) (#("    " 0 4 (fontified nil)) . 1303) (undo-tree-id746 . -4) (undo-tree-id747 . -4) (1302 . 1308)) nil (26033 2018 116865 34000) 0 nil])
([nil nil ((2760 . 2761) (#("     " 0 5 (fontified nil)) . -2760) (undo-tree-id709 . -5) (#(" " 0 1 (fontified t)) . 2765)) ((2760 . 2766) (#("	" 0 1 (fontified t)) . 2760)) (26030 49122 169136 803000) 0 nil])
([nil nil ((1339 . 1343) (#("    " 0 4 (fontified nil)) . 1338) (undo-tree-id740 . -4) (undo-tree-id741 . -4) (1338 . 1343) (#("    " 0 4 (fontified nil)) . 1337) (undo-tree-id742 . -4) (undo-tree-id743 . -4) (1341 . 1342) (1337 . 1341)) nil (26033 2018 116854 318000) 0 nil])
([nil nil ((2762 . 2768) (#("    " 0 4 (fontified t)) . 2762)) ((2762 . 2766) (#("      " 0 6 (fontified t)) . 2762)) (26030 49122 147131 144000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . 625)) nil (26033 2018 116845 629000) 0 nil])
([nil nil ((2778 . 2779) (#("      " 0 6 (fontified t)) . -2778) 2784) ((2778 . 2784) (#("	" 0 1 (fontified t)) . 2778)) (26030 49122 92081 662000) 0 nil])
([nil nil ((625 . 630)) nil (26033 2018 116844 129000) 0 nil])
([nil nil ((2796 . 2797) (#("      " 0 6 (fontified t)) . 2796) 2804) ((2796 . 2802) (#("	" 0 1 (fontified t)) . 2796)) (26030 49122 68130 1000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1349 . 1350) (#("
" 0 1 (fontified nil)) . -1375) (1347 . 1376) 1346) nil (26033 2018 116840 876000) 0 nil])
([nil nil ((2804 . 2805) (#("     " 0 5 (fontified nil)) . -2804) (undo-tree-id707 . -5) (undo-tree-id708 . -5) (#(" " 0 1 (fontified t)) . 2809)) ((2804 . 2810) (#("	" 0 1 (fontified t)) . 2804)) (26030 49122 10414 528000) 0 nil])
([nil nil ((1348 . 1352) (#("  " 0 1 (fontified t) 1 2 (fontified t rear-nonsticky t)) . -1348) (undo-tree-id722 . -2) (undo-tree-id723 . -2) (undo-tree-id724 . -2) (undo-tree-id725 . -2) (undo-tree-id726 . -2) (undo-tree-id727 . -2) (undo-tree-id728 . -2) (undo-tree-id729 . -2) (undo-tree-id730 . -2) (undo-tree-id731 . -2) (undo-tree-id732 . -2) (undo-tree-id733 . -2) (undo-tree-id734 . -2) (undo-tree-id735 . -2) (undo-tree-id736 . -2) (undo-tree-id737 . -2) (undo-tree-id738 . -2) (undo-tree-id739 . -2) 1350) nil (26033 2018 116830 711000) 0 nil])
([nil nil ((2806 . 2812) (#("    " 0 4 (fontified t)) . 2806)) ((2806 . 2810) (#("      " 0 6 (fontified t)) . 2806)) (26030 49121 986816 38000) 0 nil])
([nil nil ((1345 . 1346) (1340 . 1345) (t 26033 2018 176611 167000) 1329) nil (26033 2102 563576 77000) 0 nil])
([nil nil ((2822 . 2823) (#("      " 0 6 (fontified t)) . -2822) (undo-tree-id705 . -6) (undo-tree-id706 . -6) 2828) ((2822 . 2828) (#("	" 0 1 (fontified t)) . 2822)) (26030 49121 972508 32000) 0 nil])
([nil nil ((#("    i
" 0 4 (fontified t) 4 5 (fontified t c-type c-decl-id-start face font-lock-type-face) 5 6 (fontified t)) . 1341) (undo-tree-id760 . 1) (undo-tree-id761 . -5) (undo-tree-id762 . -4) (undo-tree-id763 . -4) (undo-tree-id764 . -6) (undo-tree-id765 . -6) (undo-tree-id766 . -6) (undo-tree-id767 . -6) (undo-tree-id768 . -6) (undo-tree-id769 . -6) (undo-tree-id770 . -6) (undo-tree-id771 . -4) (undo-tree-id772 . -4) (undo-tree-id773 . -4) (undo-tree-id774 . -4) (undo-tree-id775 . -4) (undo-tree-id776 . -4) (undo-tree-id777 . -4) (undo-tree-id778 . -4) (undo-tree-id779 . -4) (undo-tree-id780 . -5) (undo-tree-id781 . -5) (undo-tree-id782 . -5) (undo-tree-id783 . -5) (undo-tree-id784 . -5) (undo-tree-id785 . -5) (undo-tree-id786 . -5) (undo-tree-id787 . -5) (undo-tree-id788 . -4) (undo-tree-id789 . -4) (undo-tree-id790 . -4) (undo-tree-id791 . -4) (undo-tree-id792 . -4) (undo-tree-id793 . -4) (undo-tree-id794 . -4) (undo-tree-id795 . -4) (undo-tree-id796 . -4) (undo-tree-id797 . -4) (undo-tree-id798 . -4) (undo-tree-id799 . -4) (undo-tree-id800 . -4) (undo-tree-id801 . -4) (undo-tree-id802 . -4) (undo-tree-id803 . -4) (undo-tree-id804 . -4) (undo-tree-id805 . -4) (undo-tree-id806 . -4) (undo-tree-id807 . -6) 1345) nil (26033 2102 563567 442000) 0 nil])
([nil nil ((2853 . 2859)) ((#("      " 0 5 (fontified t) 5 6 (fontified t)) . 2853) (undo-tree-id820 . -5) (undo-tree-id821 . -5) (undo-tree-id822 . -5) (undo-tree-id823 . -5) (undo-tree-id824 . -5) (undo-tree-id825 . -5) (undo-tree-id826 . -5) (undo-tree-id827 . -5) (undo-tree-id828 . -5) (undo-tree-id829 . -5)) (26030 49121 970970 430000) 0 nil])
([nil nil ((1309 . 1313) (1309 . 1311)) nil (26033 2102 563478 195000) 0 nil])
([nil nil ((2860 . 2866) (#("    " 0 4 (fontified t)) . 2860) 2865) ((2860 . 2864) (#("      " 0 6 (fontified t)) . 2860)) (26030 49121 968320 140000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . 2087) (t 26033 2102 591510 927000)) nil (26033 7699 873038 873000) 0 nil])
([nil nil ((2875 . 2876) (#("      " 0 6 (fontified t)) . 2875) 2882) ((2875 . 2881) (#("	" 0 1 (fontified t)) . 2875)) (26030 49121 964971 130000) 0 nil])
([nil nil ((apply -78 1015 1427 undo--wrap-and-run-primitive-undo 1015 1427 ((1421 . 1424) (1385 . 1388) (1375 . 1378) (1357 . 1360) (1348 . 1351) (1317 . 1320) (1308 . 1311) (1284 . 1287) (1275 . 1278) (1263 . 1266) (1255 . 1258) (1233 . 1236) (1225 . 1228) (1180 . 1183) (1171 . 1174) (1167 . 1170) (1159 . 1162) (1145 . 1148) (1137 . 1140) (1113 . 1116) (1104 . 1107) (1064 . 1067) (1055 . 1058) (1019 . 1022) (1228 . 1229) (1222 . 1223) (1214 . 1215) (1198 . 1199) (1190 . 1191) (1151 . 1152) 1015))) nil (26033 7699 873036 767000) 0 nil])
([nil nil ((2840 . 2841) (#("      " 0 6 (fontified t)) . 2840) 2849) ((2840 . 2846) (#("	" 0 1 (fontified t)) . 2840)) (26030 49121 936922 780000) 0 nil])
([nil nil ((1431 . 1434) (1427 . 1431) (#("    " 0 1 (fontified nil c-is-sws t c-in-sws t) 1 4 (fontified nil c-is-sws t c-in-sws t)) . 1426) (undo-tree-id821 . -4) (undo-tree-id822 . -4) (1430 . 1431) (1426 . 1430)) nil (26033 7699 873033 552000) 0 nil])
([nil nil ((2848 . 2849) (#("     " 0 5 (fontified nil)) . -2848) (undo-tree-id704 . -5) (#(" " 0 1 (fontified t)) . 2853)) ((2848 . 2854) (#("	" 0 1 (fontified t)) . 2848)) (26030 49121 721088 405000) 0 nil])
([nil nil ((#("    pri
" 0 3 (fontified t c-in-sws t c-is-sws t) 3 4 (fontified t c-is-sws t c-in-sws t) 4 5 (fontified t c-is-sws t face font-lock-type-face) 5 6 (fontified t face font-lock-type-face) 6 7 (fontified t c-type c-decl-id-start face font-lock-type-face) 7 8 (fontified t)) . 1427) (undo-tree-id817 . 1) (undo-tree-id818 . -7) (undo-tree-id819 . -6) (undo-tree-id820 . -6) 1433) nil (26033 7699 873026 205000) 0 nil])
([nil nil ((2882 . 2883) (#("      " 0 6 (fontified t)) . 2882) 2890) ((2882 . 2888) (#("	" 0 1 (fontified t)) . 2882)) (26030 49121 698041 165000) 0 nil])
([nil nil ((apply 6 1384 1419 undo--wrap-and-run-primitive-undo 1384 1419 ((#(" */" 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 1418) (#<marker at 2501 in main.c<microMouse>> . -3) (#<marker at 1308 in main.c<microMouse>> . -3) (#<marker at 1308 in main.c<microMouse>> . -3) (#<marker in no buffer> . -3) (#<marker at 2285 in main.c<microMouse>> . -3) (#<marker at 2285 in main.c<microMouse>> . -3) (#<marker at 2285 in main.c<microMouse>> . -3) (#<marker at 2285 in main.c<microMouse>> . -3) (#<marker at 2285 in main.c<microMouse>> . -3) (#<marker at 2285 in main.c<microMouse>> . -3) (#<marker at 2285 in main.c<microMouse>> . -3) (#<marker at 2285 in main.c<microMouse>> . -3) (#<marker at 2285 in main.c<microMouse>> . -3) (#<marker at 2285 in main.c<microMouse>> . -3) (#("/* " 0 1 (fontified t face font-lock-comment-delimiter-face c-in-sws t) 1 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . -1385) 1425))) nil (26033 7699 873017 766000) 0 nil])
([nil nil ((2890 . 2891)) ((#("	" 0 1 (fontified t)) . 2890)) (26030 49121 643329 373000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t face font-lock-comment-delimiter-face c-is-sws t)) . 1385) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1)) nil (26033 7699 873015 91000) 0 nil])
([nil nil ((2892 . 2898) (#("    " 0 4 (fontified t)) . 2892)) ((2892 . 2896) (#("      " 0 6 (fontified t)) . 2892)) (26030 49121 621290 669000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t c-is-sws t)) . 1385) (undo-tree-id810 . -1) (undo-tree-id811 . -1)) nil (26033 7699 873004 953000) 0 nil])
([nil nil ((2908 . 2909) (#("      " 0 6 (fontified t)) . -2908) (undo-tree-id702 . -6) (undo-tree-id703 . -6) 2914) ((2908 . 2914) (#("	" 0 1 (fontified t)) . 2908)) (26030 49121 557367 914000) 0 nil])
([nil nil ((#("jun" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . 1411) (undo-tree-id808 . -2) (undo-tree-id809 . -3)) nil (26033 7699 872997 24000) 0 nil])
([nil nil ((2926 . 2927) (#("      " 0 6 (fontified t)) . 2926) 2934) ((2926 . 2932) (#("	" 0 1 (fontified t)) . 2926)) (26030 49121 533198 149000) 0 nil])
([nil nil ((1411 . 1415)) nil (26033 7699 872971 617000) 0 nil])
([nil nil ((2941 . 2947) (#("  " 0 2 (fontified t)) . -2941) 2943) ((2941 . 2943) (#("      " 0 6 (fontified t)) . 2941)) (26030 49121 503883 474000) 0 nil])
([nil nil ((#("    /* update_cunstate(get_thing(data)); */

    /* int concurrent = check_concurrency(); */

    /* if (concurrent < 0) { */
    /*   continue; */
    /* } */

    /* /\\* if (concurrent == prev_cunstate) { *\\/ */
    /* /\\*   continue; *\\/ */
    /* /\\* } *\\/ */

    /* move_two(concurrent); */

    /* int jun = detect_junction(); */

    /* toggle_state(); */


" 0 1 (fontified t c-in-sws t c-is-sws t) 1 4 (fontified t c-in-sws t c-is-sws t) 4 5 (c-is-sws t c-in-sws t fontified t face font-lock-comment-delimiter-face) 5 7 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 7 12 (fontified t c-in-sws t face font-lock-comment-face) 12 22 (fontified t c-in-sws t face font-lock-comment-face) 22 23 (fontified t c-in-sws t face font-lock-comment-face) 23 32 (fontified t c-in-sws t face font-lock-comment-face) 32 33 (fontified t c-in-sws t face font-lock-comment-face) 33 34 (fontified t c-in-sws t face font-lock-comment-face) 34 35 (fontified t c-in-sws t face font-lock-comment-face) 35 36 (fontified t c-in-sws t face font-lock-comment-face) 36 37 (fontified t c-in-sws t face font-lock-comment-face) 37 38 (fontified t c-in-sws t face font-lock-comment-face) 38 39 (fontified t c-in-sws t face font-lock-comment-face) 39 40 (fontified t c-in-sws t face font-lock-comment-face) 40 43 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 43 44 (fontified t c-in-sws t) 44 45 (fontified t c-in-sws t) 45 49 (fontified t c-in-sws t) 49 52 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 52 54 (fontified t c-in-sws t face font-lock-comment-face) 54 55 (fontified t c-in-sws t face font-lock-comment-face) 55 56 (fontified t c-in-sws t face font-lock-comment-face) 56 66 (fontified t c-in-sws t face font-lock-comment-face) 66 86 (fontified t c-in-sws t face font-lock-comment-face) 86 87 (fontified t c-in-sws t face font-lock-comment-face) 87 88 (fontified t c-in-sws t face font-lock-comment-face) 88 89 (fontified t c-in-sws t face font-lock-comment-face) 89 92 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 92 94 (fontified t c-in-sws t) 94 98 (fontified t c-in-sws t) 98 101 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 101 103 (fontified t c-in-sws t face font-lock-comment-face) 103 104 (fontified t c-in-sws t face font-lock-comment-face) 104 105 (fontified t c-in-sws t face font-lock-comment-face) 105 119 (fontified t c-in-sws t face font-lock-comment-face) 119 120 (fontified t c-in-sws t face font-lock-comment-face) 120 121 (fontified t c-in-sws t face font-lock-comment-face) 121 122 (fontified t c-in-sws t face font-lock-comment-face) 122 125 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 125 126 (fontified t c-in-sws t) 126 130 (fontified t c-in-sws t) 130 133 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 133 135 (fontified t c-in-sws t face font-lock-comment-delimiter-face) 135 137 (fontified t c-in-sws t face font-lock-comment-face) 137 143 (fontified t c-in-sws t face font-lock-comment-face) 143 144 (fontified t c-in-sws t face font-lock-comment-face) 144 147 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 147 148 (fontified t c-in-sws t) 148 152 (fontified t c-in-sws t) 152 155 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 155 156 (fontified t c-in-sws t face font-lock-comment-face) 156 159 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 159 161 (fontified t c-in-sws t) 161 165 (fontified t c-in-sws t) 165 168 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 168 169 (fontified t c-in-sws t face font-lock-comment-face) 169 170 (c-in-sws t fontified t face font-lock-comment-face) 170 172 (fontified t c-in-sws t face font-lock-comment-face) 172 206 (fontified t c-in-sws t face font-lock-comment-face) 206 208 (fontified t c-in-sws t face font-lock-comment-face) 208 209 (c-in-sws t fontified t face font-lock-comment-face) 209 210 (fontified t c-in-sws t face font-lock-comment-face) 210 213 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 213 214 (fontified t c-in-sws t) 214 218 (fontified t c-in-sws t) 218 221 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 221 222 (fontified t c-in-sws t face font-lock-comment-face) 222 223 (c-in-sws t fontified t face font-lock-comment-face) 223 227 (fontified t c-in-sws t face font-lock-comment-face) 227 236 (fontified t c-in-sws t face font-lock-comment-face) 236 238 (fontified t c-in-sws t face font-lock-comment-face) 238 239 (c-in-sws t fontified t face font-lock-comment-face) 239 240 (fontified t c-in-sws t face font-lock-comment-face) 240 243 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 243 244 (fontified t c-in-sws t) 244 248 (fontified t c-in-sws t) 248 251 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 251 252 (fontified t c-in-sws t face font-lock-comment-face) 252 253 (c-in-sws t fontified t face font-lock-comment-face) 253 255 (fontified t c-in-sws t face font-lock-comment-face) 255 256 (fontified t c-in-sws t face font-lock-comment-face) 256 258 (fontified t c-in-sws t face font-lock-comment-face) 258 259 (c-in-sws t fontified t face font-lock-comment-face) 259 260 (fontified t c-in-sws t face font-lock-comment-face) 260 263 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 263 265 (fontified t c-in-sws t) 265 269 (fontified t c-in-sws t) 269 272 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 272 273 (fontified t c-in-sws t face font-lock-comment-face) 273 280 (fontified t c-in-sws t face font-lock-comment-face) 280 281 (fontified t c-in-sws t face font-lock-comment-face) 281 291 (fontified t c-in-sws t face font-lock-comment-face) 291 292 (fontified t c-in-sws t face font-lock-comment-face) 292 293 (fontified t c-in-sws t face font-lock-comment-face) 293 296 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 296 298 (fontified t c-in-sws t) 298 302 (fontified t c-in-sws t) 302 305 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 305 306 (fontified t c-in-sws t face font-lock-comment-face) 306 307 (fontified t c-in-sws t face font-lock-comment-face) 307 308 (fontified t c-in-sws t face font-lock-comment-face) 308 309 (fontified t c-in-sws t face font-lock-comment-face) 309 310 (fontified t c-in-sws t face font-lock-comment-face) 310 311 (fontified t c-in-sws t face font-lock-comment-face) 311 312 (fontified t c-in-sws t face font-lock-comment-face) 312 313 (fontified t c-in-sws t face font-lock-comment-face) 313 314 (fontified t c-in-sws t face font-lock-comment-face) 314 315 (fontified t c-in-sws t face font-lock-comment-face) 315 316 (fontified t c-in-sws t face font-lock-comment-face) 316 317 (fontified t c-in-sws t face font-lock-comment-face) 317 318 (fontified t c-in-sws t face font-lock-comment-face) 318 319 (fontified t c-in-sws t face font-lock-comment-face) 319 320 (fontified t c-in-sws t face font-lock-comment-face) 320 321 (fontified t c-in-sws t face font-lock-comment-face) 321 322 (fontified t c-in-sws t face font-lock-comment-face) 322 323 (fontified t c-in-sws t face font-lock-comment-face) 323 324 (fontified t c-in-sws t face font-lock-comment-face) 324 325 (fontified t c-in-sws t face font-lock-comment-face) 325 326 (fontified t c-in-sws t face font-lock-comment-face) 326 327 (fontified t c-in-sws t face font-lock-comment-face) 327 328 (fontified t c-in-sws t face font-lock-comment-face) 328 329 (fontified t c-in-sws t face font-lock-comment-face) 329 330 (fontified t c-in-sws t face font-lock-comment-face) 330 331 (fontified t c-in-sws t face font-lock-comment-face) 331 332 (fontified t c-in-sws t face font-lock-comment-face) 332 333 (fontified t c-in-sws t face font-lock-comment-face) 333 336 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 336 337 (fontified t c-in-sws t) 337 338 (fontified t c-in-sws t) 338 342 (fontified t c-in-sws t) 342 345 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 345 346 (fontified t c-in-sws t face font-lock-comment-face) 346 347 (fontified t c-in-sws t face font-lock-comment-face) 347 348 (fontified t c-in-sws t face font-lock-comment-face) 348 349 (fontified t c-in-sws t face font-lock-comment-face) 349 350 (fontified t c-in-sws t face font-lock-comment-face) 350 351 (fontified t c-in-sws t face font-lock-comment-face) 351 352 (fontified t c-in-sws t face font-lock-comment-face) 352 353 (fontified t c-in-sws t face font-lock-comment-face) 353 354 (fontified t c-in-sws t face font-lock-comment-face) 354 355 (fontified t c-in-sws t face font-lock-comment-face) 355 356 (fontified t c-in-sws t face font-lock-comment-face) 356 357 (fontified t c-in-sws t face font-lock-comment-face) 357 358 (fontified t c-in-sws t face font-lock-comment-face) 358 359 (fontified t c-in-sws t face font-lock-comment-face) 359 360 (fontified t c-in-sws t face font-lock-comment-face) 360 363 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 363 364 (fontified t c-in-sws t) 364 365 (fontified t c-in-sws t) 365 366 (fontified t c-in-sws t)) . 1015) (undo-tree-id831 . -365) (undo-tree-id832 . -198) (undo-tree-id833 . -365) (undo-tree-id834 . -365) (undo-tree-id835 . -198) (undo-tree-id836 . -198) (undo-tree-id837 . -283) (undo-tree-id838 . -283) (undo-tree-id839 . -283) (undo-tree-id840 . -365) (undo-tree-id841 . -365) (t 26033 7699 933138 250000)) nil (26033 18649 356423 381000) 0 nil])
([nil nil ((2949 . 2955)) ((#("      " 0 6 (fontified t)) . 2949) (undo-tree-id802 . -5) (undo-tree-id803 . -5) (undo-tree-id804 . -5) (undo-tree-id805 . -5) (undo-tree-id806 . -5) (undo-tree-id807 . -5) (undo-tree-id808 . -5) (undo-tree-id809 . -5) (undo-tree-id810 . -5) (undo-tree-id811 . -5) (undo-tree-id812 . -5) (undo-tree-id813 . -5) (undo-tree-id814 . -5) (undo-tree-id815 . -5) (undo-tree-id816 . -5) (undo-tree-id817 . -5) (undo-tree-id818 . -5) (undo-tree-id819 . -5)) (26030 49121 444964 33000) 0 nil])
([nil nil ((#("    /* gpio_put(LED_PIN, 0); */

    /* printf(\"%i\\n\", data); */

    /* gpio_put(LED_PIN, 1); */


    /* switch (get_thing(data)){ */
    /* case FULL: */
    /*   printf(\"FULL\\n\"); */
    /*   break; */
      
    /* case MID: */
    /*   printf(\"MID\\n\"); */
    /*   break; */
      
    /* case LFT: */
    /*   printf(\"LFT\\n\"); */
    /*   break; */
      
    /* case RIG: */
    /*   printf(\"RIG\\n\"); */
    /*   break; */
      
    /* case NUL: */
    /*   printf(\"NUL\\n\"); */
    /*   break; */
      
    /* case TT: */
    /*   printf(\"TT\\n\"); */
    /*   break; */
      
    /* case JPT: */
    /*   printf(\"JPT\\n\"); */
    /*   break; */
      
    /* } */
    
    



" 0 4 (c-in-sws t c-is-sws t fontified t) 4 5 (c-in-sws t c-is-sws t fontified t face font-lock-comment-delimiter-face) 5 7 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 7 8 (c-in-sws t fontified t face font-lock-comment-face) 8 15 (c-in-sws t fontified t face font-lock-comment-face) 15 16 (c-in-sws t fontified t face font-lock-comment-face) 16 26 (c-in-sws t fontified t face font-lock-comment-face) 26 27 (c-in-sws t fontified t face font-lock-comment-face) 27 28 (c-in-sws t fontified t face font-lock-comment-face) 28 31 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 31 37 (c-in-sws t fontified t) 37 40 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 40 46 (c-in-sws t fontified t face font-lock-comment-face) 46 47 (c-in-sws t fontified t face font-lock-comment-face) 47 48 (c-in-sws t fontified t face font-lock-comment-face) 48 53 (c-in-sws t fontified t face font-lock-comment-face) 53 59 (c-in-sws t fontified t face font-lock-comment-face) 59 60 (c-in-sws t fontified t face font-lock-comment-face) 60 61 (c-in-sws t fontified t face font-lock-comment-face) 61 64 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 64 65 (c-in-sws t fontified t) 65 70 (c-in-sws t fontified t) 70 73 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 73 81 (c-in-sws t fontified t face font-lock-comment-face) 81 82 (c-in-sws t fontified t face font-lock-comment-face) 82 92 (c-in-sws t fontified t face font-lock-comment-face) 92 93 (c-in-sws t fontified t face font-lock-comment-face) 93 94 (c-in-sws t fontified t face font-lock-comment-face) 94 97 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 97 104 (c-in-sws t fontified t) 104 107 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 107 113 (c-in-sws t fontified t face font-lock-comment-face) 113 114 (c-in-sws t fontified t face font-lock-comment-face) 114 115 (c-in-sws t fontified t face font-lock-comment-face) 115 124 (c-in-sws t fontified t face font-lock-comment-face) 124 125 (c-in-sws t fontified t face font-lock-comment-face) 125 129 (c-in-sws t fontified t face font-lock-comment-face) 129 130 (c-in-sws t fontified t face font-lock-comment-face) 130 131 (c-in-sws t fontified t face font-lock-comment-face) 131 132 (c-in-sws t fontified t face font-lock-comment-face) 132 135 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 135 136 (c-in-sws t fontified t) 136 140 (c-in-sws t fontified t) 140 143 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 143 147 (c-in-sws t fontified t face font-lock-comment-face) 147 152 (c-in-sws t fontified t face font-lock-comment-face) 152 153 (c-in-sws t fontified t face font-lock-comment-face) 153 156 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 156 161 (c-in-sws t fontified t) 161 164 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 164 166 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 166 172 (c-in-sws t fontified t face font-lock-comment-face) 172 173 (c-in-sws t fontified t face font-lock-comment-face) 173 181 (c-in-sws t fontified t face font-lock-comment-face) 181 182 (c-in-sws t fontified t face font-lock-comment-face) 182 183 (c-in-sws t fontified t face font-lock-comment-face) 183 186 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 186 187 (c-in-sws t fontified t) 187 188 (c-in-sws t fontified t) 188 189 (c-in-sws t fontified t) 189 190 (c-in-sws t fontified t) 190 191 (c-in-sws t fontified t) 191 192 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 192 194 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 194 196 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 196 201 (c-in-sws t fontified t face font-lock-comment-face) 201 202 (c-in-sws t fontified t face font-lock-comment-face) 202 205 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 205 206 (c-in-sws t fontified t) 206 207 (c-in-sws t fontified t) 207 212 (c-in-sws t fontified t) 212 213 (c-in-sws t fontified t) 213 214 (c-in-sws t fontified t) 214 217 (c-in-sws t fontified t) 217 218 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 218 220 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 220 224 (c-in-sws t fontified t face font-lock-comment-face) 224 228 (c-in-sws t fontified t face font-lock-comment-face) 228 229 (c-in-sws t fontified t face font-lock-comment-face) 229 232 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 232 237 (c-in-sws t fontified t) 237 240 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 240 242 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 242 248 (c-in-sws t fontified t face font-lock-comment-face) 248 249 (c-in-sws t fontified t face font-lock-comment-face) 249 256 (c-in-sws t fontified t face font-lock-comment-face) 256 257 (c-in-sws t fontified t face font-lock-comment-face) 257 258 (c-in-sws t fontified t face font-lock-comment-face) 258 261 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 261 266 (c-in-sws t fontified t) 266 269 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 269 271 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 271 276 (c-in-sws t fontified t face font-lock-comment-face) 276 277 (c-in-sws t fontified t face font-lock-comment-face) 277 280 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 280 288 (c-in-sws t fontified t) 288 290 (c-in-sws t fontified t) 290 291 (c-in-sws t fontified t) 291 292 (c-in-sws t fontified t) 292 293 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 293 295 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 295 299 (c-in-sws t fontified t face font-lock-comment-face) 299 303 (c-in-sws t fontified t face font-lock-comment-face) 303 304 (c-in-sws t fontified t face font-lock-comment-face) 304 307 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 307 308 (c-in-sws t fontified t) 308 309 (c-in-sws t fontified t) 309 312 (c-in-sws t fontified t) 312 313 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 313 315 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 315 317 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 317 323 (c-in-sws t fontified t face font-lock-comment-face) 323 324 (c-in-sws t fontified t face font-lock-comment-face) 324 331 (c-in-sws t fontified t face font-lock-comment-face) 331 332 (c-in-sws t fontified t face font-lock-comment-face) 332 333 (c-in-sws t fontified t face font-lock-comment-face) 333 336 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 336 341 (c-in-sws t fontified t) 341 344 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 344 346 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 346 351 (c-in-sws t fontified t face font-lock-comment-face) 351 352 (c-in-sws t fontified t face font-lock-comment-face) 352 355 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 355 367 (c-in-sws t fontified t) 367 370 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 370 374 (c-in-sws t fontified t face font-lock-comment-face) 374 378 (c-in-sws t fontified t face font-lock-comment-face) 378 379 (c-in-sws t fontified t face font-lock-comment-face) 379 382 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 382 387 (c-in-sws t fontified t) 387 390 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 390 392 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 392 398 (c-in-sws t fontified t face font-lock-comment-face) 398 399 (c-in-sws t fontified t face font-lock-comment-face) 399 406 (c-in-sws t fontified t face font-lock-comment-face) 406 407 (c-in-sws t fontified t face font-lock-comment-face) 407 408 (c-in-sws t fontified t face font-lock-comment-face) 408 411 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 411 412 (c-in-sws t fontified t) 412 413 (c-in-sws t fontified t) 413 416 (c-in-sws t fontified t) 416 417 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 417 419 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 419 420 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 420 421 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 421 422 (c-in-sws t fontified t face font-lock-comment-face) 422 426 (c-in-sws t fontified t face font-lock-comment-face) 426 427 (c-in-sws t fontified t face font-lock-comment-face) 427 428 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 428 430 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 430 431 (c-in-sws t fontified t) 431 432 (c-in-sws t fontified t) 432 442 (c-in-sws t fontified t) 442 443 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 443 445 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 445 449 (c-in-sws t fontified t face font-lock-comment-face) 449 453 (c-in-sws t fontified t face font-lock-comment-face) 453 454 (c-in-sws t fontified t face font-lock-comment-face) 454 456 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 456 457 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 457 458 (c-in-sws t fontified t) 458 460 (c-in-sws t fontified t) 460 461 (c-in-sws t fontified t) 461 462 (c-in-sws t fontified t) 462 463 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 463 465 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 465 466 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 466 467 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 467 469 (c-in-sws t face font-lock-comment-face fontified t) 469 473 (c-in-sws t face font-lock-comment-face fontified t) 473 474 (c-in-sws t face font-lock-comment-face fontified t) 474 481 (c-in-sws t face font-lock-comment-face fontified t) 481 482 (c-in-sws t face font-lock-comment-face fontified t) 482 483 (c-in-sws t face font-lock-comment-face fontified t) 483 486 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 486 487 (fontified t c-in-sws t) 487 488 (c-is-sws t c-in-sws t fontified t) 488 491 (c-in-sws t c-is-sws t fontified t) 491 492 (c-is-sws t c-in-sws t fontified t face font-lock-comment-delimiter-face) 492 494 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 494 496 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 496 497 (c-in-sws t fontified t face font-lock-comment-face) 497 498 (c-in-sws t fontified t face font-lock-comment-face) 498 499 (c-in-sws t fontified t face font-lock-comment-face) 499 500 (c-in-sws t fontified t face font-lock-comment-face) 500 501 (c-in-sws t fontified t face font-lock-comment-face) 501 502 (c-in-sws t fontified t face font-lock-comment-face) 502 505 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 505 506 (c-in-sws t fontified t) 506 507 (c-in-sws t fontified t) 507 517 (c-in-sws t fontified t) 517 518 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 518 520 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 520 524 (c-in-sws t fontified t face font-lock-comment-face) 524 527 (c-in-sws t fontified t face font-lock-comment-face) 527 528 (c-in-sws t fontified t face font-lock-comment-face) 528 531 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 531 536 (c-in-sws t fontified t) 536 539 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 539 541 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 541 547 (c-in-sws t fontified t face font-lock-comment-face) 547 548 (c-in-sws t fontified t face font-lock-comment-face) 548 554 (c-in-sws t fontified t face font-lock-comment-face) 554 555 (c-in-sws t fontified t face font-lock-comment-face) 555 556 (c-in-sws t fontified t face font-lock-comment-face) 556 559 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 559 560 (c-in-sws t fontified t) 560 561 (c-in-sws t fontified t) 561 564 (c-in-sws t fontified t) 564 565 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 565 567 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 567 569 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 569 574 (c-in-sws t fontified t face font-lock-comment-face) 574 575 (c-in-sws t fontified t face font-lock-comment-face) 575 578 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 578 590 (c-in-sws t fontified t) 590 593 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 593 597 (c-in-sws t fontified t face font-lock-comment-face) 597 601 (c-in-sws t fontified t face font-lock-comment-face) 601 602 (c-in-sws t fontified t face font-lock-comment-face) 602 605 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 605 610 (c-in-sws t fontified t) 610 613 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 613 615 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 615 621 (c-in-sws t fontified t face font-lock-comment-face) 621 622 (c-in-sws t fontified t face font-lock-comment-face) 622 629 (c-in-sws t fontified t face font-lock-comment-face) 629 630 (c-in-sws t fontified t face font-lock-comment-face) 630 631 (c-in-sws t fontified t face font-lock-comment-face) 631 634 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 634 639 (c-in-sws t fontified t) 639 642 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 642 644 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 644 649 (c-in-sws t fontified t face font-lock-comment-face) 649 650 (c-in-sws t fontified t face font-lock-comment-face) 650 653 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 653 665 (c-in-sws t fontified t) 665 668 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 668 669 (c-in-sws t fontified t face font-lock-comment-face) 669 672 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 672 686 (c-in-sws t fontified t)) . 1090) (undo-tree-id825 . -685) (undo-tree-id826 . -685) (undo-tree-id827 . -685) (undo-tree-id828 . -685) (undo-tree-id829 . -213) (undo-tree-id830 . -685) 1775) nil (26033 18649 356397 790000) 0 nil])
([nil nil ((2956 . 2962)) ((#("      " 0 6 (fontified t)) . 2956) (undo-tree-id793 . -5) (undo-tree-id794 . -5) (undo-tree-id795 . -5) (undo-tree-id796 . -5) (undo-tree-id797 . -5) (undo-tree-id798 . -5) (undo-tree-id799 . -5) (undo-tree-id800 . -5) (undo-tree-id801 . -5)) (26030 49121 423978 511000) 0 nil])
([nil nil ((306 . 311) (#("p" 0 1 (fontified t c-in-sws t face font-lock-string-face)) . -306) (undo-tree-id823 . -1) (#("i" 0 1 (fontified t c-in-sws t face font-lock-string-face)) . -307) (undo-tree-id824 . -1) 308 (306 . 308) (306 . 307) (nil syntax-table nil 306 . 307) (nil syntax-table (1) 305 . 306) (305 . 306) (#("\"" 0 1 (fontified nil)) . -305) (nil syntax-table nil 306 . 307) (nil syntax-table (1) 305 . 306) (298 . 306) (297 . 298) (296 . 297) (295 . 296)) nil (26033 18649 356371 897000) 0 nil])
([nil nil ((2963 . 2969)) ((#("      " 0 6 (fontified t)) . 2963) (undo-tree-id775 . -5) (undo-tree-id776 . -5) (undo-tree-id777 . -5) (undo-tree-id778 . -5) (undo-tree-id779 . -5) (undo-tree-id780 . -5) (undo-tree-id781 . -5) (undo-tree-id782 . -5) (undo-tree-id783 . -5) (undo-tree-id784 . -5) (undo-tree-id785 . -5) (undo-tree-id786 . -5) (undo-tree-id787 . -5) (undo-tree-id788 . -5) (undo-tree-id789 . -5) (undo-tree-id790 . -5) (undo-tree-id791 . -5) (undo-tree-id792 . -5)) (26030 49121 368477 869000) 0 nil])
([nil nil ((323 . 331) (323 . 324) (nil syntax-table nil 323 . 324) (nil syntax-table (1) 322 . 323) (322 . 323) (#("\"" 0 1 (fontified nil)) . -322) (nil syntax-table nil 323 . 324) (nil syntax-table (1) 322 . 323) (314 . 323) (313 . 314) (312 . 313) (t 26033 18649 427530 829000)) nil (26033 18964 457344 518000) 0 nil])
([nil nil ((#("      
" 0 6 (fontified t) 6 7 (fontified t rear-nonsticky t)) . 2949) (undo-tree-id699 . -6) (undo-tree-id700 . -5) (undo-tree-id701 . -5) 2954) ((2949 . 2956)) (26030 49121 344695 799000) 0 nil])
([nil nil ((272 . 274)) nil (26033 18964 457328 402000) 0 nil])
([nil nil ((#("      
" 0 6 (fontified t) 6 7 (fontified t)) . 2949) (undo-tree-id694 . -6) (undo-tree-id695 . 1) (undo-tree-id696 . -5) (undo-tree-id697 . -5) 2954) ((2949 . 2956)) (26030 49121 274163 237000) 0 nil])
([nil nil ((547 . 549) (t 26033 18964 502431 703000)) nil (26033 19172 833365 88000) 0 nil])
([nil nil ((#("      
" 0 6 (fontified t) 6 7 (fontified t)) . 2949) (undo-tree-id689 . -6) (undo-tree-id690 . 7) (undo-tree-id691 . -5) (undo-tree-id692 . -5) 2954) ((2949 . 2956)) (26030 49120 866825 498000) 0 nil])
([nil nil ((565 . 567) (548 . 565)) nil (26033 19172 833362 906000) 0 nil])
([nil nil ((#("      
" 0 6 (fontified t) 6 7 (fontified t)) . 2949) (undo-tree-id684 . -6) (undo-tree-id685 . 7) (undo-tree-id686 . -5) (undo-tree-id687 . -5) 2954) ((2949 . 2956)) (26030 49120 576132 880000) 0 nil])
([nil nil ((570 . 572) (569 . 571) (568 . 570) (567 . 568)) nil (26033 19172 833360 275000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . 2618) (undo-tree-id683 . -1)) ((2618 . 2619)) (26030 49120 500844 27000) 0 nil])
([nil nil ((#(" 
  gpio_init(LED_PIN);
  gpio_set_dir(LED_PIN, GPIO_OUT);
  gpio_put(LED_PIN, state);

" 0 13 (fontified t) 13 14 (fontified t face (rainbow-delimiters-depth-2-face)) 14 21 (fontified t) 21 22 (fontified t face (rainbow-delimiters-depth-2-face)) 22 38 (fontified t) 38 39 (fontified t face (rainbow-delimiters-depth-2-face)) 39 56 (fontified t) 56 57 (fontified t face (rainbow-delimiters-depth-2-face)) 57 59 (fontified t) 59 69 (fontified t) 69 70 (fontified t face (rainbow-delimiters-depth-2-face)) 70 79 (fontified t) 79 80 (fontified t) 80 81 (fontified t) 81 82 (fontified t) 82 83 (fontified t) 83 84 (fontified t) 84 85 (fontified t face (rainbow-delimiters-depth-2-face)) 85 87 (fontified t) 87 88 (fontified t)) . 613) (undo-tree-id902 . -87) (undo-tree-id903 . -24) (undo-tree-id904 . -87) (undo-tree-id905 . -87) (undo-tree-id906 . -24) (undo-tree-id907 . -87) (undo-tree-id908 . -87)) nil (26033 19172 833356 538000) 0 nil])
([nil nil ((2619 . 2622) (2618 . 2619)) ((#("d" 0 1 (fontified nil)) . 2618) (#("ata" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . 2619)) (26030 49120 473044 986000) 0 nil])
([nil nil ((nil rear-nonsticky nil 658 . 659) (nil fontified nil 571 . 659) (571 . 659) 570) nil (26033 19172 833340 502000) 0 nil])
([nil nil ((#("pos" 0 3 (fontified t)) . 2566) (undo-tree-id771 . -2) (t 26030 47098 973911 332000)) ((2566 . 2569)) (26030 49120 450502 859000) 0 nil] [nil nil ((2627 . 2628) (2625 . 2627) (t 26030 47098 973911 332000) 2621) ((#("
	" 0 1 (fontified t) 1 2 (fontified nil)) . 2625) (undo-tree-id757 . -2) (undo-tree-id758 . -2) (undo-tree-id759 . -2) (undo-tree-id760 . -2) (undo-tree-id761 . -2) (undo-tree-id762 . -1) (undo-tree-id763 . -2) (#("o" 0 1 (fontified t)) . 2627) (undo-tree-id764 . -1)) (26030 47184 432094 711000) 0 nil])
([nil nil ((#("  // uart
  
  uart_init(UART_ID, 9600);

  gpio_set_function(UART_RX_PIN, GPIO_FUNC_UART);
  gpio_set_function(UART_TX_PIN, GPIO_FUNC_UART);

  uart_set_baudrate(UART_ID, 9600);

  
  bi_decl(bi_1pin_with_func(UART_TX_PIN, GPIO_FUNC_UART));
  bi_decl(bi_1pin_with_func(UART_RX_PIN, GPIO_FUNC_UART));


" 0 2 (c-in-sws t c-is-sws t fontified t) 2 3 (c-in-sws t c-is-sws t fontified t face font-lock-comment-delimiter-face) 3 5 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 5 10 (c-in-sws t fontified t face font-lock-comment-face) 10 13 (c-in-sws t fontified t) 13 15 (c-is-sws t c-in-sws t fontified t) 15 16 (c-is-sws t fontified t) 16 24 (fontified t) 24 25 (fontified t face (rainbow-delimiters-depth-2-face)) 25 38 (fontified t) 38 39 (fontified t face (rainbow-delimiters-depth-2-face)) 39 61 (fontified t) 61 62 (fontified t face (rainbow-delimiters-depth-2-face)) 62 86 (fontified t) 86 89 (fontified t) 89 90 (fontified t face (rainbow-delimiters-depth-2-face)) 90 111 (fontified t) 111 112 (fontified t face (rainbow-delimiters-depth-2-face)) 112 124 (fontified t) 124 139 (fontified t) 139 140 (fontified t face (rainbow-delimiters-depth-2-face)) 140 142 (fontified t) 142 162 (fontified t) 162 163 (fontified t face (rainbow-delimiters-depth-2-face)) 163 176 (fontified t) 176 177 (fontified t face (rainbow-delimiters-depth-2-face)) 177 178 (fontified t) 178 192 (fontified t) 192 193 (fontified t face (rainbow-delimiters-depth-2-face)) 193 210 (fontified t) 210 211 (fontified t face (rainbow-delimiters-depth-3-face)) 211 238 (fontified t) 238 239 (fontified t face (rainbow-delimiters-depth-3-face)) 239 240 (fontified t face (rainbow-delimiters-depth-2-face)) 240 251 (fontified t) 251 252 (fontified t face (rainbow-delimiters-depth-2-face)) 252 269 (fontified t) 269 270 (fontified t face (rainbow-delimiters-depth-3-face)) 270 288 (fontified t) 288 297 (fontified t) 297 298 (fontified t face (rainbow-delimiters-depth-3-face)) 298 299 (fontified t face (rainbow-delimiters-depth-2-face)) 299 303 (fontified t)) . 702) (undo-tree-id895 . -302) (undo-tree-id896 . -92) (undo-tree-id897 . -302) (undo-tree-id898 . -302) (undo-tree-id899 . -143) (undo-tree-id900 . -302) (undo-tree-id901 . -302) 1004) nil (26033 19172 833336 830000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . 2566) (undo-tree-id770 . -1)) ((2566 . 2567)) (26030 49120 390908 791000) 0 nil])
nil
([nil nil ((678 . 680) (664 . 678) (662 . 664)) nil (26033 19172 833324 83000) 0 nil])
([nil nil ((#("weight" 0 6 (fontified t)) . 2566) (undo-tree-id769 . -5)) ((2566 . 2572)) (26030 49120 369130 29000) 0 nil])
([nil nil ((683 . 685) (682 . 684) (681 . 683) (680 . 681)) nil (26033 19172 833321 259000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . 2566)) ((2566 . 2567)) (26030 49120 308716 629000) 0 nil])
([nil nil ((nil rear-nonsticky nil 987 . 988) (nil fontified nil 701 . 988) (nil fontified nil 700 . 701) (nil fontified nil 688 . 700) (nil fontified nil 687 . 688) (nil fontified nil 685 . 687) (685 . 988) 684) nil (26033 19172 833317 731000) 0 nil])
([nil nil ((#("data" 0 4 (fontified t)) . 2566) (undo-tree-id768 . -3)) ((2566 . 2570)) (26030 49120 286377 872000) 0 nil])
([nil nil ((1107 . 1111) (#("        " 0 1 (c-in-sws t c-is-sws t fontified t) 1 3 (c-in-sws t c-is-sws t fontified t) 3 4 (c-is-sws t c-in-sws t fontified t) 4 5 (c-is-sws t c-in-sws t fontified t) 5 8 (c-is-sws t c-in-sws t fontified t)) . 1107) (undo-tree-id894 . -4) 1142) nil (26033 19172 833313 160000) 0 nil])
([nil nil ((#(")) " 0 1 (face (rainbow-delimiters-depth-3-face) fontified t) 1 2 (face (rainbow-delimiters-mismatched-face) fontified t) 2 3 (fontified t)) . 2566) (undo-tree-id767 . -2)) ((2566 . 2569)) (26030 49120 222666 385000) 0 nil])
([nil nil ((#("    printf(\"class : %i\\n\",data);
" 0 4 (fontified t) 4 5 (c-is-sws t fontified t) 5 10 (fontified t) 10 11 (fontified t face (rainbow-delimiters-depth-3-face)) 11 25 (fontified t face font-lock-string-face) 25 26 (fontified t) 26 27 (fontified t) 27 28 (fontified t) 28 29 (fontified t) 29 30 (fontified t) 30 31 (fontified t face (rainbow-delimiters-depth-3-face)) 31 32 (fontified t) 32 33 (fontified t)) . 1107) (undo-tree-id871 . -32) (undo-tree-id872 . -33) (undo-tree-id873 . -29) (undo-tree-id874 . -32) (undo-tree-id875 . -32) (undo-tree-id876 . -32) (undo-tree-id877 . -32) (undo-tree-id878 . -32) (undo-tree-id879 . -32) (undo-tree-id880 . -32) (undo-tree-id881 . -32) (undo-tree-id882 . -32) (undo-tree-id883 . -32) (undo-tree-id884 . -29) (undo-tree-id885 . -33) (undo-tree-id886 . -33) (undo-tree-id887 . -33) (undo-tree-id888 . -33) (undo-tree-id889 . -33) (undo-tree-id890 . -33) (undo-tree-id891 . -33) (undo-tree-id892 . -31) (undo-tree-id893 . -31) 1138) nil (26033 19172 833306 906000) 0 nil])
([nil nil ((#("< " 0 1 (fontified t) 1 2 (fontified t)) . 2566) (undo-tree-id766 . -1)) ((2566 . 2568)) (26030 49120 201162 145000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1107)) nil (26033 19172 833267 865000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . 2566)) ((2566 . 2567)) (26030 49120 145224 300000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1107)) nil (26033 19172 833265 908000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . 2566)) ((2566 . 2567)) (26030 49120 123740 585000) 0 nil])
([nil nil ((#("    
" 0 1 (fontified t) 1 4 (fontified t) 4 5 (fontified t)) . 1107) (undo-tree-id870 . -4)) nil (26033 19172 833264 99000) 0 nil])
([nil nil ((#("5" 0 1 (fontified t)) . 2566)) ((2566 . 2567)) (26030 49120 55572 436000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1137) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1)) nil (26033 19172 833260 375000) 0 nil])
([nil nil ((2566 . 2567)) ((#("1" 0 1 (fontified t)) . 2566) (t 26030 47192 689819 380000)) (26030 49119 639936 108000) 0 nil])
([nil nil ((1041 . 1043) (1029 . 1041) (1027 . 1029)) nil (26033 19172 833253 898000) 0 nil])
([nil nil ((#("    printf(\"%i\\n\", data);
" 0 4 (fontified t) 4 10 (fontified t) 10 11 (face (rainbow-delimiters-depth-3-face) fontified t) 11 17 (face font-lock-string-face fontified t) 17 18 (fontified t) 18 23 (fontified t) 23 24 (face (rainbow-delimiters-depth-3-face) fontified t) 24 25 (fontified t) 25 26 (fontified t)) . 2946) (undo-tree-id772 . -25) (undo-tree-id773 . -8) (undo-tree-id774 . -8) 2954 (t 26030 47192 689819 380000)) ((2946 . 2972)) (26030 49119 636320 392000) 0 nil])
([nil nil ((1043 . 1044)) nil (26033 19172 833251 704000) 0 nil])
nil
([nil nil ((1056 . 1058) (1047 . 1056) (1044 . 1047)) nil (26033 19172 833249 887000) 0 nil])
([nil nil ((1058 . 1059)) nil (26033 19172 833247 686000) 0 nil])
([nil nil ((1073 . 1075) (1062 . 1073) (1059 . 1062)) nil (26033 19172 833245 737000) 0 nil])
([nil nil ((1075 . 1076)) nil (26033 19172 833243 441000) 0 nil])
([nil nil ((apply -18 1112 1222 undo--wrap-and-run-primitive-undo 1112 1222 ((1219 . 1222) (1203 . 1206) (1194 . 1197) (1166 . 1169) (1157 . 1160) (1116 . 1119) 1112))) nil (26033 19172 833241 998000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t c-is-sws t c-in-sws t)) . -1225) (undo-tree-id861 . -4) (undo-tree-id862 . -4) 1229 (1225 . 1229) (#("    " 0 4 (fontified nil c-is-sws t c-in-sws t)) . 1224) (undo-tree-id863 . -4) (undo-tree-id864 . -4) (1224 . 1229) (#("    " 0 1 (fontified nil c-is-sws t c-in-sws t) 1 4 (fontified nil c-in-sws t c-is-sws t)) . 1223) (undo-tree-id865 . -4) (undo-tree-id866 . -4) (1222 . 1228)) nil (26033 19172 833237 751000) 0 nil])
([nil nil ((1242 . 1245) (1241 . 1243) (1238 . 1241) (#("0" 0 1 (fontified t)) . -1238) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (#("n" 0 1 (fontified t)) . -1239) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (#("e" 0 1 (fontified t)) . -1240) (undo-tree-id859 . -1) (undo-tree-id860 . -1) 1241 (1231 . 1241) (1228 . 1231) (1224 . 1228)) nil (26033 19172 833217 565000) 0 nil])
([nil nil ((1246 . 1247)) nil (26033 19172 833202 858000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1232 . 1233) (#("
" 0 1 (fontified nil)) . -1252) (1224 . 1253) (1224 . 1225) 1246) nil (26033 19172 833200 203000) 0 nil])
([nil nil ((#("one" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . 1267) (undo-tree-id853 . -2) (undo-tree-id854 . -3)) nil (26033 19172 833195 621000) 0 nil])
([nil nil ((1267 . 1270)) nil (26033 19172 833190 314000) 0 nil])
([nil nil ((1292 . 1294) (1291 . 1293) (1283 . 1291) (1279 . 1283) (#("    " 0 4 (fontified nil)) . 1278) (undo-tree-id842 . -4) (undo-tree-id843 . -4) (undo-tree-id844 . -4) (undo-tree-id845 . -4) (undo-tree-id846 . -4) (undo-tree-id847 . -4) (undo-tree-id848 . -4) (undo-tree-id849 . -4) (undo-tree-id850 . -4) (undo-tree-id851 . -4) (undo-tree-id852 . -4) (1277 . 1283)) nil (26033 19172 833184 224000) 0 nil])
([nil nil ((1295 . 1296)) nil (26033 19172 833140 762000) 0 nil])
([nil nil ((#("init" 0 1 (fontified t face font-lock-function-name-face) 1 2 (fontified t face font-lock-function-name-face) 2 3 (fontified t face font-lock-function-name-face) 3 4 (fontified t face font-lock-function-name-face)) . 674) (undo-tree-id909 . -3) (undo-tree-id910 . -4) (t 26033 19172 878847 131000)) nil (26033 19261 282616 590000) 0 nil])
([nil nil ((674 . 678)) nil (26033 19261 282589 131000) 0 nil])
([nil nil ((#("init" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . 1052) (undo-tree-id911 . -3) (undo-tree-id912 . -4) (t 26033 19261 355617 305000)) nil (26033 19270 266108 380000) 0 nil])
([nil nil ((1052 . 1056)) nil (26033 19270 266077 259000) 0 nil])
([nil nil ((apply -12 1229 1290 undo--wrap-and-run-primitive-undo 1229 1290 ((1285 . 1288) (1263 . 1266) (1255 . 1258) (1233 . 1236) 1229)) (t 26033 19270 312086 632000)) nil (26033 23786 715717 214000) 0 nil])
([nil nil ((#("/" 0 1 (c-is-sws t c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 1116)) nil (26033 23786 715714 777000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . 1116)) nil (26033 23786 715712 951000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 1116)) nil (26033 23786 715710 945000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1154) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (#("*" 0 1 (fontified t)) . -1155) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (#("/" 0 1 (fontified t)) . -1156) (undo-tree-id945 . -1) (undo-tree-id946 . -1) 1157) nil (26033 23786 715706 716000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t face font-lock-comment-delimiter-face c-is-sws t)) . 1197)) nil (26033 23786 715693 258000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t c-is-sws t)) . 1197)) nil (26033 23786 715691 136000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1211) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (#("*" 0 1 (fontified t)) . -1212) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (#("/" 0 1 (fontified t)) . -1213) (undo-tree-id939 . -1) (undo-tree-id940 . -1) 1214) nil (26033 23786 715687 666000) 0 nil])
([nil nil ((1193 . 1197) (#("     " 0 1 (c-in-sws t fontified t c-is-sws t) 1 3 (c-in-sws t fontified t c-is-sws t) 3 4 (fontified t c-is-sws t c-in-sws t) 4 5 (fontified t c-is-sws t c-in-sws t)) . 1193) (undo-tree-id933 . -4) (undo-tree-id934 . -4) 1210) nil (26033 23786 715675 558000) 0 nil])
([nil nil ((#("/" 0 1 (c-in-sws t c-is-sws t fontified t face font-lock-comment-delimiter-face)) . 1160)) nil (26033 23786 715665 831000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . 1160)) nil (26033 23786 715663 958000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 1160)) nil (26033 23786 715661 666000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1185) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (#("*" 0 1 (fontified t)) . -1186) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (#("/" 0 1 (fontified t)) . -1187) (undo-tree-id931 . -1) (undo-tree-id932 . -1) 1188) nil (26033 23786 715658 194000) 0 nil])
([nil nil ((475 . 479)) nil (26033 23786 715646 931000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1191) (undo-tree-id923 . -4) (undo-tree-id924 . -4) 1195 (1191 . 1195) (#("    " 0 4 (fontified nil)) . 1190) (undo-tree-id925 . -4) (undo-tree-id926 . -4) (1189 . 1195)) nil (26033 23786 715643 717000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -1195) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (#("r" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -1196) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (#("o" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -1197) (undo-tree-id921 . -1) (undo-tree-id922 . -1) 1198 (1195 . 1198) (1191 . 1195)) nil (26033 23786 715632 333000) 0 nil])
([nil nil ((1161 . 1165) (#("    " 0 4 (fontified nil)) . 1160) (undo-tree-id913 . -4) (undo-tree-id914 . -4) (1160 . 1165) (#("    " 0 4 (fontified nil)) . 1159) (undo-tree-id915 . -4) (undo-tree-id916 . -4) (1163 . 1164) (1159 . 1163)) nil (26033 23786 715616 18000) 0 nil])
([nil nil ((1180 . 1182) (1164 . 1180) (1160 . 1164)) nil (26033 23786 715587 876000) 0 nil])
([nil nil ((1182 . 1183)) nil (26033 23786 715583 274000) 0 nil])
([nil nil ((345 . 359) (345 . 346) (nil syntax-table nil 345 . 346) (nil syntax-table (1) 344 . 345) (344 . 345) (#("\"" 0 1 (fontified nil)) . -344) (nil syntax-table nil 345 . 346) (nil syntax-table (1) 344 . 345) (344 . 345) (337 . 344) (336 . 337) (335 . 336) (334 . 335)) nil (26033 23786 715569 887000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1185) (undo-tree-id958 . -1) (t 26033 23786 785675 990000)) nil (26033 23806 48085 983000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1185) (undo-tree-id947 . -4) (undo-tree-id948 . -4) (undo-tree-id949 . -4) (undo-tree-id950 . -4) (undo-tree-id951 . -4) (undo-tree-id952 . -4) (undo-tree-id953 . -4) (undo-tree-id954 . -4) (undo-tree-id955 . -4) (undo-tree-id956 . -4) (undo-tree-id957 . -4) 1189 (1184 . 1189)) nil (26033 23806 48071 342000) 0 nil])
([nil nil ((471 . 474) (t 26033 23806 96429 562000)) nil (26033 23874 525875 792000) 0 nil])
([nil nil ((nil rear-nonsticky nil 739 . 740) (nil fontified nil 739 . 740) (nil fontified nil 712 . 739) (nil fontified nil 711 . 712) (nil fontified nil 710 . 711) (nil fontified nil 679 . 710) (nil fontified nil 678 . 679) (nil fontified nil 647 . 678) (nil fontified nil 646 . 647) (nil fontified nil 645 . 646) (nil fontified nil 618 . 645) (nil fontified nil 617 . 618) (nil fontified nil 590 . 617) (nil fontified nil 589 . 590) (nil fontified nil 588 . 589) (nil fontified nil 567 . 588) (nil fontified nil 566 . 567) (nil fontified nil 565 . 566) (nil fontified nil 545 . 565) (nil fontified nil 544 . 545) (nil fontified nil 524 . 544) (nil fontified nil 523 . 524) (nil fontified nil 502 . 523) (nil fontified nil 501 . 502) (nil fontified nil 473 . 501) (473 . 740)) nil (26033 23874 525860 665000) 0 nil])
([nil nil ((nil rear-nonsticky nil 741 . 742) (#("
" 0 1 (fontified nil)) . -760) (741 . 761) (t 26033 23874 576243 27000)) nil (26033 23933 780096 528000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -1398) (undo-tree-id971 . -2) (undo-tree-id972 . -2) 1400 (1398 . 1400) (#("  " 0 2 (fontified nil)) . 1397) (undo-tree-id973 . -2) (undo-tree-id974 . -2) (1397 . 1400) (#("  " 0 2 (fontified nil)) . 1396) (undo-tree-id975 . -2) (undo-tree-id976 . -2) (1395 . 1399) (t 26033 23933 824888 138000)) nil (26033 24968 258923 679000) 0 nil])
([nil nil ((1415 . 1417) (#("  " 0 1 (fontified nil c-is-sws t c-in-sws t) 1 2 (fontified nil c-is-sws t c-in-sws t)) . 1414) (undo-tree-id969 . -2) (undo-tree-id970 . -2) (1413 . 1417) (1402 . 1413) (1399 . 1402) (1397 . 1399)) nil (26033 24968 258904 242000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1421 . 1422) (#("
" 0 1 (fontified nil)) . -1467) (1417 . 1468) 1416) nil (26033 24968 258896 770000) 0 nil])
([nil nil ((#("    PIDController pid = { PID_KP, PID_KI, PID_KD,
" 0 1 (c-is-sws t c-in-sws t fontified t) 1 3 (c-is-sws t c-in-sws t fontified t) 3 4 (c-is-sws t c-in-sws t fontified t rear-nonsticky t) 4 5 (c-is-sws t fontified t face font-lock-type-face) 5 16 (fontified t face font-lock-type-face) 16 17 (fontified t c-type c-decl-id-start face font-lock-type-face) 17 18 (fontified t) 18 21 (fontified t face font-lock-variable-name-face) 21 24 (fontified t) 24 25 (fontified t c-type c-not-decl face (rainbow-delimiters-depth-2-face)) 25 32 (fontified t) 32 33 (fontified t c-type c-not-decl) 33 40 (fontified t) 40 41 (fontified t c-type c-not-decl) 41 48 (fontified t) 48 49 (fontified t c-type c-not-decl) 49 50 (fontified t)) . 1418) (undo-tree-id965 . 1) (undo-tree-id966 . -49) (undo-tree-id967 . -4) (undo-tree-id968 . -4) 1422) nil (26033 24968 258892 754000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1703 . 1704) (nil fontified nil 1458 . 1704) (nil fontified nil 1457 . 1458) (nil fontified nil 1422 . 1457) (nil fontified nil 1421 . 1422) (nil fontified nil 1418 . 1421) (1418 . 1704)) nil (26033 24968 258883 896000) 0 nil])
([nil nil ((1418 . 1420) (#("   " 0 3 (c-is-sws t c-in-sws t fontified t)) . 1418)) nil (26033 24968 258879 588000) 0 nil])
([nil nil ((1452 . 1454) (#("    " 0 1 (fontified t c-is-sws t) 1 4 (c-in-sws t fontified t)) . 1452) (undo-tree-id964 . -2) 1454) nil (26033 24968 258876 867000) 0 nil])
([nil nil ((1500 . 1504) (#("                          " 0 26 (fontified t)) . 1500) (undo-tree-id963 . -2) 1502) nil (26033 24968 258872 239000) 0 nil])
([nil nil ((1513 . 1517) (#("                          " 0 26 (fontified t)) . 1513) (undo-tree-id962 . -4) 1517) nil (26033 24968 258867 50000) 0 nil])
([nil nil ((1543 . 1547) (#("			  " 0 5 (fontified t)) . 1543) (undo-tree-id961 . -1) 1544) nil (26033 24968 258862 85000) 0 nil])
([nil nil ((1581 . 1585) (#("                          " 0 26 (fontified t)) . 1581) (undo-tree-id960 . -4) 1585) nil (26033 24968 258856 477000) 0 nil])
([nil nil ((1602 . 1604)) nil (26033 24968 258851 606000) 0 nil])
([nil nil ((1605 . 1607) (#("    " 0 4 (fontified t)) . 1605) (undo-tree-id959 . -1) 1606) nil (26033 24968 258849 34000) 0 nil])
([nil nil ((1634 . 1636)) nil (26033 24968 258828 389000) 0 nil])
([nil nil ((1637 . 1639)) nil (26033 24968 258826 338000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1668 . 1669) (nil fontified nil 1636 . 1669) (1636 . 1669) 1635) nil (26033 24968 258823 875000) 0 nil])
([nil nil ((1641 . 1643) (#("    " 0 4 (fontified t)) . 1641)) nil (26033 24968 258819 417000) 0 nil])
([nil nil ((865 . 867)) nil (26033 24968 258815 655000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1049 . 1050) (nil fontified nil 867 . 1050) (867 . 1050)) nil (26033 24968 258805 312000) 0 nil])
([nil nil ((1994 . 1998) (#("    " 0 4 (fontified nil)) . 1993) (undo-tree-id1314 . -4) (undo-tree-id1315 . -4) (1997 . 1998) (1993 . 1997) (t 26033 24968 307171 656000)) nil (26033 25128 691161 679000) 0 nil])
([nil nil ((2010 . 2012) (2006 . 2010) (#("i" 0 1 (fontified t face font-lock-function-name-face)) . -2006) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) (#("n" 0 1 (fontified t face font-lock-function-name-face)) . -2007) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) 2008 (2004 . 2008) (#("k" 0 1 (fontified t face font-lock-function-name-face)) . -2004) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) 2005 (2004 . 2005) (#("d" 0 1 (fontified t face font-lock-function-name-face)) . -2004) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (#("a" 0 1 (fontified t face font-lock-function-name-face)) . -2005) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) (#("t" 0 1 (fontified t face font-lock-function-name-face)) . -2006) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (#("a" 0 1 (fontified t face font-lock-function-name-face)) . -2007) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (#(" " 0 1 (fontified t)) . -2008) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) 2009 (1998 . 2009) (1994 . 1998) (#("    " 0 4 (fontified nil)) . 1993) (undo-tree-id1312 . -4) (undo-tree-id1313 . -4) (1997 . 1998) (1993 . 1997)) nil (26033 25128 691149 288000) 0 nil])
([nil nil ((2005 . 2006) (#("o" 0 1 (fontified t face font-lock-function-name-face)) . 2005)) nil (26033 25128 691108 681000) 0 nil])
([nil nil ((2006 . 2007) (#("n" 0 1 (fontified t face font-lock-function-name-face)) . 2006)) nil (26033 25128 691106 224000) 0 nil])
([nil nil ((2022 . 2026) (#("s" 0 1 (fontified t)) . -2022) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) 2023 (2022 . 2023) (2021 . 2023) (2012 . 2021)) nil (26033 25128 691103 258000) 0 nil])
([nil nil ((2027 . 2028)) nil (26033 25128 691096 374000) 0 nil])
([nil nil ((2034 . 2038) (#("   " 0 3 (fontified nil)) . -2034) (undo-tree-id1292 . -3) (undo-tree-id1293 . -3) (#(" " 0 1 (fontified t)) . 2037)) nil (26033 25128 691093 169000) 0 nil])
([nil nil ((2034 . 2038) (#("   " 0 3 (fontified nil)) . -2034) (undo-tree-id1290 . -3) (undo-tree-id1291 . -3) (#(" " 0 1 (fontified t)) . 2037)) nil (26033 25128 691085 481000) 0 nil])
([nil nil ((#("    float cum_data = weight(data);
" 0 4 (fontified t) 4 5 (fontified t face font-lock-type-face) 5 6 (fontified t face font-lock-type-face) 6 7 (fontified t face font-lock-type-face) 7 8 (fontified t face font-lock-type-face) 8 9 (fontified t c-type c-decl-id-start face font-lock-type-face) 9 10 (fontified t) 10 11 (fontified t face font-lock-variable-name-face) 11 12 (fontified t face font-lock-variable-name-face) 12 13 (fontified t face font-lock-variable-name-face) 13 14 (fontified t face font-lock-variable-name-face) 14 15 (fontified t face font-lock-variable-name-face) 15 16 (fontified t face font-lock-variable-name-face) 16 17 (fontified t face font-lock-variable-name-face) 17 18 (fontified t face font-lock-variable-name-face) 18 19 (fontified t) 19 20 (fontified t) 20 21 (fontified t) 21 22 (fontified t) 22 23 (fontified t) 23 24 (fontified t) 24 25 (fontified t) 25 26 (fontified t) 26 27 (fontified t) 27 28 (fontified t face (rainbow-delimiters-depth-3-face)) 28 29 (fontified t) 29 30 (fontified t) 30 31 (fontified t) 31 32 (fontified t) 32 33 (fontified t face (rainbow-delimiters-depth-3-face)) 33 34 (fontified t) 34 35 (fontified t)) . 1994) (undo-tree-id1287 . -34) (undo-tree-id1288 . -3) (undo-tree-id1289 . -3) 1997) nil (26033 25128 691075 817000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1859 . 1860) (#("
" 0 1 (fontified nil)) . -1890) (1855 . 1891) 1854) nil (26033 25128 691068 492000) 0 nil])
([nil nil ((1856 . 1858) (#("    " 0 3 (fontified t) 3 4 (fontified t rear-nonsticky t)) . -1856) (undo-tree-id1285 . -4) (undo-tree-id1286 . -4) 1860) nil (26033 25128 691064 416000) 0 nil])
([nil nil ((#("  float cum_data = weight(data);
" 0 2 (fontified t) 2 3 (fontified t face font-lock-type-face) 3 4 (fontified t face font-lock-type-face) 4 5 (fontified t face font-lock-type-face) 5 6 (fontified t face font-lock-type-face) 6 7 (fontified t c-type c-decl-id-start face font-lock-type-face) 7 8 (fontified t) 8 9 (fontified t face font-lock-variable-name-face) 9 10 (fontified t face font-lock-variable-name-face) 10 11 (fontified t face font-lock-variable-name-face) 11 12 (fontified t face font-lock-variable-name-face) 12 13 (fontified t face font-lock-variable-name-face) 13 14 (fontified t face font-lock-variable-name-face) 14 15 (fontified t face font-lock-variable-name-face) 15 16 (fontified t face font-lock-variable-name-face) 16 17 (fontified t) 17 18 (fontified t) 18 19 (fontified t) 19 20 (fontified t) 20 21 (fontified t) 21 22 (fontified t) 22 23 (fontified t) 23 24 (fontified t) 24 25 (fontified t) 25 26 (fontified t face (rainbow-delimiters-depth-2-face)) 26 27 (fontified t) 27 28 (fontified t) 28 29 (fontified t) 29 30 (fontified t) 30 31 (fontified t face (rainbow-delimiters-depth-2-face)) 31 32 (fontified t) 32 33 (fontified t)) . 1856) (undo-tree-id1281 . -33) (undo-tree-id1282 . -32) (undo-tree-id1283 . -2) (undo-tree-id1284 . -2) 1858) nil (26033 25128 691057 395000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1877 . 1878) (#("
" 0 1 (fontified nil)) . -1908) (1875 . 1909) 1873) nil (26033 25128 691047 387000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -1910) (undo-tree-id1277 . -2) (undo-tree-id1278 . -2) 1912 (1910 . 1912) (#("  " 0 2 (fontified nil)) . 1909) (undo-tree-id1279 . -2) (undo-tree-id1280 . -2) (1908 . 1912)) nil (26033 25128 691042 567000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2056 . 2057) (nil fontified nil 2033 . 2057) (2033 . 2057) 2032) nil (26033 25128 691031 242000) 0 nil])
([nil nil ((#("cum_data = weight(data);" 0 1 (fontified t face font-lock-variable-name-face) 1 2 (fontified t face font-lock-variable-name-face) 2 3 (fontified t face font-lock-variable-name-face) 3 4 (fontified t face font-lock-variable-name-face) 4 5 (fontified t face font-lock-variable-name-face) 5 6 (fontified t face font-lock-variable-name-face) 6 7 (fontified t face font-lock-variable-name-face) 7 8 (fontified t face font-lock-variable-name-face) 8 9 (fontified t) 9 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t) 12 13 (fontified t) 13 14 (fontified t) 14 15 (fontified t) 15 16 (fontified t) 16 17 (fontified t) 17 18 (fontified t face (rainbow-delimiters-depth-2-face)) 18 19 (fontified t) 19 20 (fontified t) 20 21 (fontified t) 21 22 (fontified t) 22 23 (fontified t face (rainbow-delimiters-depth-2-face)) 23 24 (fontified t)) . 1884) (undo-tree-id1253 . -23) (undo-tree-id1254 . -24) (undo-tree-id1255 . -24) (undo-tree-id1256 . -24) (undo-tree-id1257 . -24) (undo-tree-id1258 . -24) (undo-tree-id1259 . -24) (undo-tree-id1260 . -24) (undo-tree-id1261 . -23) (undo-tree-id1262 . -23) (undo-tree-id1263 . -23) (undo-tree-id1264 . -23) (undo-tree-id1265 . -23) (undo-tree-id1266 . -23) (undo-tree-id1267 . -23) (undo-tree-id1268 . -23) (undo-tree-id1269 . -19) (undo-tree-id1270 . -19) (undo-tree-id1271 . -19) (undo-tree-id1272 . -19) (undo-tree-id1273 . -19) (undo-tree-id1274 . -19) (undo-tree-id1275 . -19) (undo-tree-id1276 . -24)) nil (26033 25128 691025 740000) 0 nil])
([nil nil ((1888 . 1889) (1884 . 1888)) nil (26033 25128 690983 851000) 0 nil])
([nil nil ((1886 . 1888) (1884 . 1886)) nil (26033 25128 690981 668000) 0 nil])
([nil nil ((#("k" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -2048) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) 2049 (2048 . 2049) (#("p" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -2048) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (#("i" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -2049) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) 2050 (2048 . 2050) (2044 . 2048) (#("    " 0 4 (fontified nil)) . 2043) (undo-tree-id1251 . -4) (undo-tree-id1252 . -4) (2042 . 2048)) nil (26033 25128 690976 590000) 0 nil])
([nil nil ((1906 . 1907) (1897 . 1906) (1895 . 1897) (#("  " 0 2 (fontified nil)) . 1894) (undo-tree-id1234 . -2) (undo-tree-id1235 . -2) (undo-tree-id1236 . -2) (undo-tree-id1237 . -2) (undo-tree-id1238 . -2) (undo-tree-id1239 . -2) (undo-tree-id1240 . -2) (undo-tree-id1241 . -2) (undo-tree-id1242 . -2) (undo-tree-id1243 . -2) (undo-tree-id1244 . -2) (1896 . 1897) (1894 . 1896)) nil (26033 25128 690955 823000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2065 . 2066) (#("
" 0 1 (fontified nil)) . -2122) (2061 . 2123) 2060) nil (26033 25128 690935 39000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2124) (undo-tree-id1212 . -4) (undo-tree-id1213 . -4) (undo-tree-id1214 . -4) (undo-tree-id1215 . -4) (undo-tree-id1216 . -4) (undo-tree-id1217 . -4) (undo-tree-id1218 . -4) (undo-tree-id1219 . -4) (undo-tree-id1220 . -4) (undo-tree-id1221 . -4) (undo-tree-id1222 . -4) 2128 (2124 . 2128) (#("    " 0 4 (fontified nil)) . 2123) (undo-tree-id1223 . -4) (undo-tree-id1224 . -4) (undo-tree-id1225 . -4) (undo-tree-id1226 . -4) (undo-tree-id1227 . -4) (undo-tree-id1228 . -4) (undo-tree-id1229 . -4) (undo-tree-id1230 . -4) (undo-tree-id1231 . -4) (undo-tree-id1232 . -4) (undo-tree-id1233 . -4) (2122 . 2128)) nil (26033 25128 690928 642000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2124) (undo-tree-id1207 . 1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1)) nil (26033 25128 690868 969000) 0 nil])
([nil nil ((#("    
" 0 4 (fontified t) 4 5 (fontified t)) . 2124) (undo-tree-id1200 . 5) (undo-tree-id1201 . -4) (undo-tree-id1202 . -5) (undo-tree-id1203 . -5) (undo-tree-id1204 . -5) (undo-tree-id1205 . -4) (undo-tree-id1206 . -5)) nil (26033 25128 690858 735000) 0 nil])
([nil nil ((#("    
" 0 1 (c-in-sws t fontified t) 1 4 (c-in-sws t fontified t) 4 5 (c-in-sws t fontified t)) . 2144) (undo-tree-id1191 . -4) (undo-tree-id1192 . -5) (undo-tree-id1193 . -5) (undo-tree-id1194 . -5) (undo-tree-id1195 . -5) (undo-tree-id1196 . -5) (undo-tree-id1197 . -5) (undo-tree-id1198 . -5) (undo-tree-id1199 . -5)) nil (26033 25128 690843 616000) 0 nil])
([nil nil ((#("    /* run_motor_one(255); */
" 0 1 (c-in-sws t c-is-sws t fontified t) 1 3 (c-in-sws t c-is-sws t fontified t) 3 4 (rear-nonsticky t c-in-sws t c-is-sws t fontified t) 4 5 (c-in-sws t c-is-sws t fontified t face font-lock-comment-delimiter-face) 5 7 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 7 8 (c-in-sws t fontified t face font-lock-comment-face) 8 9 (c-in-sws t fontified t face font-lock-comment-face) 9 10 (c-in-sws t fontified t face font-lock-comment-face) 10 11 (c-in-sws t fontified t face font-lock-comment-face) 11 12 (c-in-sws t fontified t face font-lock-comment-face) 12 13 (c-in-sws t fontified t face font-lock-comment-face) 13 14 (c-in-sws t fontified t face font-lock-comment-face) 14 15 (c-in-sws t fontified t face font-lock-comment-face) 15 16 (c-in-sws t fontified t face font-lock-comment-face) 16 17 (c-in-sws t fontified t face font-lock-comment-face) 17 18 (c-in-sws t fontified t face font-lock-comment-face) 18 19 (c-in-sws t fontified t face font-lock-comment-face) 19 20 (c-in-sws t fontified t face font-lock-comment-face) 20 21 (c-in-sws t fontified t face font-lock-comment-face) 21 22 (c-in-sws t fontified t face font-lock-comment-face) 22 23 (c-in-sws t fontified t face font-lock-comment-face) 23 24 (c-in-sws t fontified t face font-lock-comment-face) 24 25 (c-in-sws t fontified t face font-lock-comment-face) 25 26 (c-in-sws t fontified t face font-lock-comment-face) 26 29 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 29 30 (c-in-sws t fontified t)) . 2144) (undo-tree-id1181 . -29) (undo-tree-id1182 . -4) (undo-tree-id1183 . -4) (undo-tree-id1184 . -4) (undo-tree-id1185 . -4) (undo-tree-id1186 . -4) (undo-tree-id1187 . -4) (undo-tree-id1188 . -4) (undo-tree-id1189 . -29) (undo-tree-id1190 . -30)) nil (26033 25128 690828 0) 0 nil])
([nil nil ((#("    /* run_motor_two(255); */
" 0 1 (c-is-sws t c-in-sws t fontified t) 1 3 (c-in-sws t c-is-sws t fontified t) 3 4 (c-in-sws t c-is-sws t fontified t) 4 5 (c-is-sws t c-in-sws t fontified t face font-lock-comment-delimiter-face) 5 7 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 7 8 (c-in-sws t fontified t face font-lock-comment-face) 8 9 (c-in-sws t fontified t face font-lock-comment-face) 9 10 (c-in-sws t fontified t face font-lock-comment-face) 10 11 (c-in-sws t fontified t face font-lock-comment-face) 11 12 (c-in-sws t fontified t face font-lock-comment-face) 12 13 (c-in-sws t fontified t face font-lock-comment-face) 13 14 (c-in-sws t fontified t face font-lock-comment-face) 14 15 (c-in-sws t fontified t face font-lock-comment-face) 15 16 (c-in-sws t fontified t face font-lock-comment-face) 16 17 (c-in-sws t fontified t face font-lock-comment-face) 17 18 (c-in-sws t fontified t face font-lock-comment-face) 18 19 (c-in-sws t fontified t face font-lock-comment-face) 19 20 (c-in-sws t fontified t face font-lock-comment-face) 20 21 (c-in-sws t fontified t face font-lock-comment-face) 21 22 (c-in-sws t fontified t face font-lock-comment-face) 22 23 (c-in-sws t fontified t face font-lock-comment-face) 23 24 (c-in-sws t fontified t face font-lock-comment-face) 24 25 (c-in-sws t fontified t face font-lock-comment-face) 25 26 (c-in-sws t fontified t face font-lock-comment-face) 26 29 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 29 30 (c-in-sws t fontified t)) . 2144) (undo-tree-id1176 . -29) (undo-tree-id1177 . -30) (undo-tree-id1178 . -10) (undo-tree-id1179 . -29) (undo-tree-id1180 . -30)) nil (26033 25128 690806 676000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2144) (undo-tree-id1175 . -1)) nil (26033 25128 690797 67000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2144) (undo-tree-id1174 . -1)) nil (26033 25128 690793 84000) 0 nil])
([nil nil ((#("    sleep_ms(10);
" 0 4 (c-in-sws t fontified t) 4 5 (c-is-sws t fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t) 12 13 (fontified t face (rainbow-delimiters-depth-3-face)) 13 14 (fontified t) 14 15 (fontified t) 15 16 (fontified t face (rainbow-delimiters-depth-3-face)) 16 17 (fontified t) 17 18 (fontified t)) . 2144) (undo-tree-id1170 . -17) (undo-tree-id1171 . -16) (undo-tree-id1172 . -17) (undo-tree-id1173 . -18)) nil (26033 25128 690788 696000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2143) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1)) nil (26033 25128 690766 617000) 0 nil])
([nil nil ((2125 . 2129) (#("    " 0 4 (fontified nil)) . 2124) (undo-tree-id1012 . -4) (undo-tree-id1013 . -4) (2124 . 2129) (#("    " 0 4 (fontified nil)) . 2123) (undo-tree-id1014 . -4) (undo-tree-id1015 . -4) (2127 . 2128) (2123 . 2127)) nil (26033 25128 690105 525000) 0 nil])
([nil nil ((2124 . 2128)) nil (26033 25128 690093 558000) 0 nil])
([nil nil ((541 . 542) (#("5" 0 1 (c-in-sws t fontified t)) . -541) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) 542) nil (26033 25128 690080 150000) 0 nil])
([nil nil ((2124 . 2128) (#("   " 0 3 (fontified nil)) . -2124) (undo-tree-id1386 . -3) (undo-tree-id1387 . -3) (#(" " 0 1 (fontified t)) . 2127) (t 26033 25128 730939 275000)) nil (26033 25386 5808 665000) 0 nil])
([nil nil ((2124 . 2128) (#("   " 0 3 (fontified nil)) . -2124) (undo-tree-id1384 . -3) (undo-tree-id1385 . -3) (#(" " 0 1 (fontified t)) . 2127)) nil (26033 25386 5802 79000) 0 nil])
([nil nil ((2124 . 2128) (#("   " 0 3 (fontified nil)) . -2124) (undo-tree-id1382 . -3) (undo-tree-id1383 . -3) (#(" " 0 1 (fontified t)) . 2127)) nil (26033 25386 5795 473000) 0 nil])
([nil nil ((2124 . 2128) (#("   " 0 3 (fontified nil)) . -2124) (undo-tree-id1380 . -3) (undo-tree-id1381 . -3) (#(" " 0 1 (fontified t)) . 2127)) nil (26033 25386 5789 126000) 0 nil])
([nil nil ((2124 . 2128) (#("   " 0 3 (fontified nil)) . -2124) (undo-tree-id1378 . -3) (undo-tree-id1379 . -3) (#(" " 0 1 (fontified t)) . 2127)) nil (26033 25386 5782 777000) 0 nil])
([nil nil ((2124 . 2128) (#("   " 0 3 (fontified nil)) . -2124) (undo-tree-id1376 . -3) (undo-tree-id1377 . -3) (#(" " 0 1 (fontified t)) . 2127)) nil (26033 25386 5776 436000) 0 nil])
([nil nil ((2124 . 2128) (#("   " 0 3 (fontified nil)) . -2124) (undo-tree-id1374 . -3) (undo-tree-id1375 . -3) (#(" " 0 1 (fontified t)) . 2127)) nil (26033 25386 5768 790000) 0 nil])
([nil nil ((1929 . 1930) (1911 . 1929) (1909 . 1911) (#("  " 0 2 (fontified nil)) . 1908) (undo-tree-id1372 . -2) (undo-tree-id1373 . -2) (1907 . 1911)) nil (26033 25386 5762 286000) 0 nil])
([nil nil ((1936 . 1937) (1929 . 1936)) nil (26033 25386 5756 406000) 0 nil])
([nil nil ((1936 . 1937) (#(";" 0 1 (fontified t)) . -1936) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) 1937) nil (26033 25386 5749 926000) 0 nil])
([nil nil ((#("=" 0 1 (fontified t)) . -1936) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) 1937) nil (26033 25386 5744 322000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -2163) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) 2164 (2163 . 2164) (2159 . 2163) (#("   " 0 3 (fontified nil)) . -2159) (undo-tree-id1366 . -3) (undo-tree-id1367 . -3) (#(" " 0 1 (fontified t)) . 2162)) nil (26033 25386 5737 772000) 0 nil])
([nil nil ((2176 . 2179) (#("p" 0 1 (fontified t)) . -2176) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) 2177 (#("o" 0 1 (fontified t)) . -2177) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) 2178 (2176 . 2178) (2175 . 2177) (2167 . 2175) (2161 . 2167) (#("r" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -2161) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) 2162 (2158 . 2162) (2154 . 2158) (#("   " 0 3 (fontified nil)) . -2154) (undo-tree-id1362 . -3) (undo-tree-id1363 . -3) (#(" " 0 1 (fontified t)) . 2157)) nil (26033 25386 5723 513000) 0 nil])
([nil nil ((#("      " 0 6 (fontified t)) . -2181) (undo-tree-id1354 . -6) (undo-tree-id1355 . -6) 2187 (2180 . 2187)) nil (26033 25386 5703 434000) 0 nil])
([nil nil ((2180 . 2181)) nil (26033 25386 5694 124000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2183) (undo-tree-id1350 . -4) (undo-tree-id1351 . -4) 2187 (2183 . 2187) (#("    " 0 4 (fontified nil)) . 2182) (undo-tree-id1352 . -4) (undo-tree-id1353 . -4) (2181 . 2187)) nil (26033 25386 5691 300000) 0 nil])
([nil nil ((2201 . 2209) (2200 . 2202) (2187 . 2200) (2183 . 2187)) nil (26033 25386 5681 74000) 0 nil])
([nil nil ((2235 . 2238) (2230 . 2235) (2229 . 2231) (2228 . 2229) (#("p" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -2228) (undo-tree-id1316 . -1) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (#("o" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -2229) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) 2230 (2225 . 2230) (#("0" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -2225) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (#("-" 0 1 (fontified t)) . -2226) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) 2227 (2216 . 2227) (2211 . 2216) (2210 . 2211)) nil (26033 25386 5670 399000) 0 nil])
([nil nil ((2239 . 2240)) nil (26033 25386 5471 107000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . -1954) (undo-tree-id1388 . -4) 1958 (1954 . 1958) (#("    " 0 4 (fontified nil)) . 1953) (undo-tree-id1389 . -4) (undo-tree-id1390 . -4) (undo-tree-id1391 . -4) (undo-tree-id1392 . -4) (undo-tree-id1393 . -4) (undo-tree-id1394 . -4) (undo-tree-id1395 . -4) (undo-tree-id1396 . -4) (undo-tree-id1397 . -4) (undo-tree-id1398 . -4) (undo-tree-id1399 . -4) (1952 . 1958) (t 26033 25386 44459 710000)) nil (26033 25392 604483 514000) 0 nil])
([nil nil ((#("sturct " 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t)) . 1911) (undo-tree-id1400 . -6) (undo-tree-id1401 . -7) (t 26033 25392 648297 190000)) nil (26033 25424 105595 872000) 0 nil])
([nil nil ((1911 . 1918)) nil (26033 25424 105562 815000) 0 nil])
([nil nil ((#("measurement" 0 11 (fontified t)) . 2141) (undo-tree-id1402 . -10) (undo-tree-id1403 . -11) (t 26033 25424 143524 217000)) nil (26033 25442 415043 491000) 0 nil])
([nil nil ((2141 . 2149)) nil (26033 25442 415010 418000) 0 nil])
([nil nil ((nil rear-nonsticky nil 768 . 769) (nil fontified nil 768 . 769) (nil fontified nil 755 . 768) (nil fontified nil 754 . 755) (nil fontified nil 741 . 754) (nil fontified nil 740 . 741) (740 . 769) (t 26033 25442 463076 174000)) nil (26033 26239 596252 58000) 0 nil])
([nil nil ((1097 . 1099) (1088 . 1097) (#(")" 0 1 (fontified t face (rainbow-delimiters-unmatched-face))) . -1088) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) 1089 (1088 . 1089) (#(")" 0 1 (fontified nil face font-lock-function-name-face)) . -1088) (1088 . 1089) (#(" " 0 1 (fontified t)) . -1088) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) (#("s" 0 1 (fontified t)) . -1089) (undo-tree-id1430 . -1) (undo-tree-id1431 . -1) (#("w" 0 1 (fontified t)) . -1090) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) (#("i" 0 1 (fontified t)) . -1091) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (#("t" 0 1 (fontified t)) . -1092) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (#("c" 0 1 (fontified t)) . -1093) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) (#("h" 0 1 (fontified t face font-lock-keyword-face)) . -1094) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) 1095 (#("e" 0 1 (fontified t)) . -1095) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (#("r" 0 1 (fontified t)) . -1096) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) 1097 (1079 . 1097)) nil (26033 26239 596239 595000) 0 nil])
([nil nil ((1102 . 1104) (1101 . 1103) (1100 . 1102) (1099 . 1100)) nil (26033 26239 596194 658000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1188 . 1189) (nil fontified nil 1103 . 1189) (1103 . 1189) 1102) nil (26033 26239 596191 55000) 0 nil])
([nil nil ((1102 . 1104) (#("   " 0 1 (fontified t) 1 3 (fontified t)) . 1102) (undo-tree-id1424 . -1) (undo-tree-id1425 . -1)) nil (26033 26239 596186 6000) 0 nil])
([nil nil ((#("LED" 0 3 (fontified t)) . 1114) (undo-tree-id1423 . -2)) nil (26033 26239 596179 449000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 1114)) nil (26033 26239 596175 607000) 0 nil])
([nil nil ((#("PIN" 0 3 (fontified t)) . 1114) (undo-tree-id1422 . -2)) nil (26033 26239 596173 559000) 0 nil])
([nil nil ((1114 . 1116)) nil (26033 26239 596170 73000) 0 nil])
([nil nil ((#("LED" 0 3 (fontified t)) . 1134) (undo-tree-id1421 . -2)) nil (26033 26239 596166 687000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 1134)) nil (26033 26239 596162 748000) 0 nil])
([nil nil ((#("PIN" 0 3 (fontified t)) . 1134) (undo-tree-id1420 . -2)) nil (26033 26239 596160 749000) 0 nil])
([nil nil ((1134 . 1136)) nil (26033 26239 596156 722000) 0 nil])
([nil nil ((1135 . 1136) (#("!" 0 1 (fontified t face font-lock-negation-char-face)) . 1135)) nil (26033 26239 596154 330000) 0 nil])
([nil nil ((#("LED" 0 3 (fontified t)) . 1160) (undo-tree-id1419 . -2)) nil (26033 26239 596150 905000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 1160)) nil (26033 26239 596146 896000) 0 nil])
([nil nil ((#("PIN" 0 3 (fontified t)) . 1160) (undo-tree-id1418 . -2)) nil (26033 26239 596144 750000) 0 nil])
([nil nil ((1161 . 1162) (1160 . 1161)) nil (26033 26239 596140 183000) 0 nil])
([nil nil ((#("  gpio_put(S1, state);
" 0 10 (fontified t) 10 11 (fontified t face (rainbow-delimiters-depth-2-face)) 11 12 (fontified t) 12 13 (fontified t) 13 14 (fontified t) 14 20 (fontified t) 20 21 (fontified t face (rainbow-delimiters-depth-2-face)) 21 23 (fontified t)) . 1149) (undo-tree-id1414 . 10) (undo-tree-id1415 . -22) (undo-tree-id1416 . -7) (undo-tree-id1417 . -7) 1156) nil (26033 26239 596136 879000) 0 nil])
([nil nil ((#("
" 0 1 (rear-nonsticky t fontified t)) . 1149) (undo-tree-id1413 . 1)) nil (26033 26239 596127 230000) 0 nil])
([nil nil ((#("OUT" 0 3 (fontified t)) . 1143) (undo-tree-id1412 . -2)) nil (26033 26239 596122 491000) 0 nil])
([nil nil ((1143 . 1145)) nil (26033 26239 596118 390000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -1150) (undo-tree-id1406 . -2) (undo-tree-id1407 . -2) 1152 (1150 . 1152) (#("  " 0 2 (fontified nil)) . 1149) (undo-tree-id1408 . -2) (undo-tree-id1409 . -2) (1149 . 1152) (#(" " 0 1 (fontified nil)) . 1148) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (1149 . 1150)) nil (26033 26239 596113 831000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1195 . 1196) (nil fontified nil 1149 . 1196) (1149 . 1196)) nil (26033 26239 596097 263000) 0 nil])
([nil nil ((1162 . 1163) (#("1" 0 1 (fontified t)) . 1162) (undo-tree-id1405 . -1)) nil (26033 26239 596092 624000) 0 nil])
([nil nil ((1182 . 1183) (#("1" 0 1 (fontified t)) . 1182) (undo-tree-id1404 . -1)) nil (26033 26239 596078 976000) 0 nil])
([nil nil ((#(" 
" 0 1 (rear-nonsticky t fontified t) 1 2 (fontified t)) . 1195) (undo-tree-id1448 . -1) (t 26033 26239 668637 393000)) nil (26033 26247 811996 749000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1195) (undo-tree-id1446 . 1) (undo-tree-id1447 . 1)) nil (26033 26247 811983 810000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -1730) (undo-tree-id1699 . -1) (undo-tree-id1700 . -1) 1731 (1730 . 1731) (1728 . 1730) (#("  " 0 2 (fontified nil)) . 1727) (undo-tree-id1701 . -2) (undo-tree-id1702 . -2) (1726 . 1730) (t 26033 26247 885303 73000)) nil (26033 26400 835004 914000) 0 nil])
([nil nil ((1743 . 1745) (1741 . 1743) (#("e" 0 1 (fontified t)) . -1741) (undo-tree-id1693 . -1) (undo-tree-id1694 . -1) (#("r" 0 1 (fontified t)) . -1742) (undo-tree-id1695 . -1) (undo-tree-id1696 . -1) 1743 (1736 . 1743) (1730 . 1736) (1728 . 1730) (#("  " 0 2 (fontified nil)) . 1727) (undo-tree-id1697 . -2) (undo-tree-id1698 . -2) (1729 . 1730) (1727 . 1729)) nil (26033 26400 834991 358000) 0 nil])
([nil nil ((1745 . 1746)) nil (26033 26400 834974 321000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -2109) (undo-tree-id1687 . -2) (undo-tree-id1688 . -2) 2111 (2109 . 2111) (#("  " 0 2 (fontified nil)) . 2108) (undo-tree-id1689 . -2) (undo-tree-id1690 . -2) (2108 . 2111) (#("  " 0 2 (fontified nil)) . 2107) (undo-tree-id1691 . -2) (undo-tree-id1692 . -2) (2106 . 2110)) nil (26033 26400 834970 511000) 0 nil])
([nil nil ((2117 . 2118) (2116 . 2118) (2115 . 2116) (#(" x" 0 2 (fontified nil)) . -2115) (2115 . 2117) (#("while" 0 1 (fontified nil face font-lock-keyword-face) 1 2 (fontified nil face font-lock-keyword-face) 2 3 (fontified nil face font-lock-keyword-face) 3 4 (fontified nil face font-lock-keyword-face) 4 5 (fontified nil face font-lock-keyword-face)) . 2115) (undo-tree-id1685 . -5) (undo-tree-id1686 . -5) (2110 . 2115) 2115 (2110 . 2115) (2108 . 2110)) nil (26033 26400 834954 61000) 0 nil])
([nil nil ((2122 . 2126) (2121 . 2125) (2120 . 2122) (2119 . 2120)) nil (26033 26400 834945 38000) 0 nil])
([nil nil ((2138 . 2140) (2130 . 2138) (2129 . 2131) (2126 . 2129) (#("g" 0 1 (fontified t)) . -2126) (undo-tree-id1671 . -1) (undo-tree-id1672 . -1) (#("p" 0 1 (fontified t)) . -2127) (undo-tree-id1673 . -1) (undo-tree-id1674 . -1) (#("i" 0 1 (fontified t)) . -2128) (undo-tree-id1675 . -1) (undo-tree-id1676 . -1) (#("o" 0 1 (fontified t)) . -2129) (undo-tree-id1677 . -1) (undo-tree-id1678 . -1) (#("_" 0 1 (fontified t)) . -2130) (undo-tree-id1679 . -1) (undo-tree-id1680 . -1) (#("g" 0 1 (fontified t)) . -2131) (undo-tree-id1681 . -1) (undo-tree-id1682 . -1) 2132 (2126 . 2132) (2122 . 2126) (#("   " 0 3 (fontified nil)) . -2122) (undo-tree-id1683 . -3) (undo-tree-id1684 . -3) (#(" " 0 1 (fontified t)) . 2125)) nil (26033 26400 834937 65000) 0 nil])
([nil nil ((#("  led_pin_init();
" 0 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t) 12 13 (fontified t) 13 14 (fontified t) 14 15 (fontified t face (rainbow-delimiters-depth-2-face)) 15 16 (fontified t face (rainbow-delimiters-depth-2-face)) 16 17 (fontified t) 17 18 (fontified t)) . 1677) (undo-tree-id1668 . -17) (undo-tree-id1669 . -16) (undo-tree-id1670 . -16) 1693) nil (26033 26400 834905 754000) 0 nil])
([nil nil ((#("      " 0 6 (fontified t)) . -2124) (undo-tree-id1666 . -6) (undo-tree-id1667 . -6) 2130 (2123 . 2130)) nil (26033 26400 834896 171000) 0 nil])
([nil nil ((2126 . 2132) (2125 . 2131) (2124 . 2126) (2123 . 2124)) nil (26033 26400 834889 665000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2134 . 2135) (#("
" 0 1 (fontified nil)) . -2150) (2132 . 2151) 2131) nil (26033 26400 834886 23000) 0 nil])
([nil nil ((2133 . 2139) (#("  " 0 1 (fontified t) 1 2 (fontified t rear-nonsticky t)) . -2133) (undo-tree-id1664 . -2) (undo-tree-id1665 . -2) 2135) nil (26033 26400 834881 909000) 0 nil])
([nil nil ((#("      
" 0 6 (fontified t) 6 7 (fontified t)) . 2126) (undo-tree-id1661 . -6) (undo-tree-id1662 . -5) (undo-tree-id1663 . -5) 2131) nil (26033 26400 834874 674000) 0 nil])
([nil nil ((2121 . 2123)) nil (26033 26400 834866 968000) 0 nil])
([nil nil ((2138 . 2139) (2137 . 2138) (2136 . 2138) (2128 . 2136) (#("G" 0 1 (fontified t)) . -2128) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (undo-tree-id1478 . -1) (undo-tree-id1479 . -1) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (undo-tree-id1483 . -1) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) (undo-tree-id1487 . -1) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1) (undo-tree-id1493 . -1) (undo-tree-id1494 . -1) (undo-tree-id1495 . -1) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (undo-tree-id1498 . -1) (undo-tree-id1499 . -1) (undo-tree-id1500 . -1) (undo-tree-id1501 . -1) (undo-tree-id1502 . -1) (undo-tree-id1503 . -1) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (undo-tree-id1506 . -1) (undo-tree-id1507 . -1) (undo-tree-id1508 . -1) (undo-tree-id1509 . -1) (undo-tree-id1510 . -1) (undo-tree-id1511 . -1) (undo-tree-id1512 . -1) (undo-tree-id1513 . -1) (undo-tree-id1514 . -1) (undo-tree-id1515 . -1) (undo-tree-id1516 . -1) (undo-tree-id1517 . -1) (undo-tree-id1518 . -1) (undo-tree-id1519 . -1) (undo-tree-id1520 . -1) (undo-tree-id1521 . -1) (undo-tree-id1522 . -1) (undo-tree-id1523 . -1) (undo-tree-id1524 . -1) (undo-tree-id1525 . -1) (undo-tree-id1526 . -1) (undo-tree-id1527 . -1) (undo-tree-id1528 . -1) (undo-tree-id1529 . -1) (undo-tree-id1530 . -1) (undo-tree-id1531 . -1) (#("P" 0 1 (fontified t)) . -2129) (undo-tree-id1532 . -1) (undo-tree-id1533 . -1) (undo-tree-id1534 . -1) (undo-tree-id1535 . -1) (undo-tree-id1536 . -1) (undo-tree-id1537 . -1) (undo-tree-id1538 . -1) (undo-tree-id1539 . -1) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1) (undo-tree-id1542 . -1) (undo-tree-id1543 . -1) (undo-tree-id1544 . -1) (undo-tree-id1545 . -1) (undo-tree-id1546 . -1) (undo-tree-id1547 . -1) (undo-tree-id1548 . -1) (undo-tree-id1549 . -1) (undo-tree-id1550 . -1) (undo-tree-id1551 . -1) (undo-tree-id1552 . -1) (undo-tree-id1553 . -1) (undo-tree-id1554 . -1) (undo-tree-id1555 . -1) (undo-tree-id1556 . -1) (undo-tree-id1557 . -1) (undo-tree-id1558 . -1) (undo-tree-id1559 . -1) (undo-tree-id1560 . -1) (undo-tree-id1561 . -1) (undo-tree-id1562 . -1) (undo-tree-id1563 . -1) (undo-tree-id1564 . -1) (undo-tree-id1565 . -1) (undo-tree-id1566 . -1) (undo-tree-id1567 . -1) (undo-tree-id1568 . -1) (undo-tree-id1569 . -1) (undo-tree-id1570 . -1) (undo-tree-id1571 . -1) (undo-tree-id1572 . -1) (undo-tree-id1573 . -1) (undo-tree-id1574 . -1) (undo-tree-id1575 . -1) (undo-tree-id1576 . -1) (undo-tree-id1577 . -1) (undo-tree-id1578 . -1) (undo-tree-id1579 . -1) (undo-tree-id1580 . -1) (undo-tree-id1581 . -1) (undo-tree-id1582 . -1) (undo-tree-id1583 . -1) (undo-tree-id1584 . -1) (undo-tree-id1585 . -1) (undo-tree-id1586 . -1) (undo-tree-id1587 . -1) (undo-tree-id1588 . -1) (undo-tree-id1589 . -1) (undo-tree-id1590 . -1) (undo-tree-id1591 . -1) (undo-tree-id1592 . -1) (undo-tree-id1593 . -1) (undo-tree-id1594 . -1) (#("I" 0 1 (fontified t)) . -2130) (undo-tree-id1595 . -1) (undo-tree-id1596 . -1) (undo-tree-id1597 . -1) (undo-tree-id1598 . -1) (undo-tree-id1599 . -1) (undo-tree-id1600 . -1) (undo-tree-id1601 . -1) (undo-tree-id1602 . -1) (undo-tree-id1603 . -1) (undo-tree-id1604 . -1) (undo-tree-id1605 . -1) (undo-tree-id1606 . -1) (undo-tree-id1607 . -1) (undo-tree-id1608 . -1) (undo-tree-id1609 . -1) (undo-tree-id1610 . -1) (undo-tree-id1611 . -1) (undo-tree-id1612 . -1) (undo-tree-id1613 . -1) (undo-tree-id1614 . -1) (undo-tree-id1615 . -1) (undo-tree-id1616 . -1) (undo-tree-id1617 . -1) (undo-tree-id1618 . -1) (undo-tree-id1619 . -1) (undo-tree-id1620 . -1) (undo-tree-id1621 . -1) (undo-tree-id1622 . -1) (undo-tree-id1623 . -1) (undo-tree-id1624 . -1) (undo-tree-id1625 . -1) (undo-tree-id1626 . -1) (undo-tree-id1627 . -1) (undo-tree-id1628 . -1) (undo-tree-id1629 . -1) (undo-tree-id1630 . -1) (undo-tree-id1631 . -1) (undo-tree-id1632 . -1) (undo-tree-id1633 . -1) (undo-tree-id1634 . -1) (undo-tree-id1635 . -1) (undo-tree-id1636 . -1) (undo-tree-id1637 . -1) (#("O" 0 1 (fontified t)) . -2131) (undo-tree-id1638 . -1) (undo-tree-id1639 . -1) (undo-tree-id1640 . -1) (undo-tree-id1641 . -1) (undo-tree-id1642 . -1) (undo-tree-id1643 . -1) (undo-tree-id1644 . -1) (undo-tree-id1645 . -1) (undo-tree-id1646 . -1) (undo-tree-id1647 . -1) (undo-tree-id1648 . -1) (undo-tree-id1649 . -1) (undo-tree-id1650 . -1) (undo-tree-id1651 . -1) (undo-tree-id1652 . -1) (undo-tree-id1653 . -1) (undo-tree-id1654 . -1) (undo-tree-id1655 . -1) (undo-tree-id1656 . -1) (undo-tree-id1657 . -1) (undo-tree-id1658 . -1) (undo-tree-id1659 . -1) (undo-tree-id1660 . -1) 2132 (2124 . 2132)) nil (26033 26400 834840 411000) 0 nil])
([nil nil ((2177 . 2178) (2172 . 2177) (2165 . 2172)) nil (26033 26400 834219 712000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2185) (undo-tree-id1703 . -1) (t 26033 26400 921555 318000)) nil (26033 26403 527840 978000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2186) (undo-tree-id1774 . -4) (undo-tree-id1775 . -4) 2190 (2186 . 2190) (#("    " 0 4 (fontified nil)) . 2185) (undo-tree-id1776 . -4) (undo-tree-id1777 . -4) (2184 . 2190) (t 26033 26403 607906 521000)) nil (26033 26422 861519 325000) 0 nil])
([nil nil ((2199 . 2202) (#("1" 0 1 (fontified t)) . -2199) (undo-tree-id1704 . -1) (undo-tree-id1705 . -1) (undo-tree-id1706 . -1) (undo-tree-id1707 . -1) (undo-tree-id1708 . -1) (undo-tree-id1709 . -1) (undo-tree-id1710 . -1) (undo-tree-id1711 . -1) (undo-tree-id1712 . -1) (undo-tree-id1713 . -1) (undo-tree-id1714 . -1) (undo-tree-id1715 . -1) (undo-tree-id1716 . -1) (undo-tree-id1717 . -1) (undo-tree-id1718 . -1) (undo-tree-id1719 . -1) (undo-tree-id1720 . -1) (undo-tree-id1721 . -1) (undo-tree-id1722 . -1) (undo-tree-id1723 . -1) (undo-tree-id1724 . -1) (undo-tree-id1725 . -1) (undo-tree-id1726 . -1) (undo-tree-id1727 . -1) (undo-tree-id1728 . -1) (undo-tree-id1729 . -1) (undo-tree-id1730 . -1) (undo-tree-id1731 . -1) (undo-tree-id1732 . -1) (undo-tree-id1733 . -1) (undo-tree-id1734 . -1) (undo-tree-id1735 . -1) (undo-tree-id1736 . -1) (undo-tree-id1737 . -1) (undo-tree-id1738 . -1) (undo-tree-id1739 . -1) (undo-tree-id1740 . -1) (undo-tree-id1741 . -1) (undo-tree-id1742 . -1) (undo-tree-id1743 . -1) (undo-tree-id1744 . -1) (undo-tree-id1745 . -1) (undo-tree-id1746 . -1) 2200 (#("5" 0 1 (fontified t)) . -2200) (undo-tree-id1747 . -1) (undo-tree-id1748 . -1) (undo-tree-id1749 . -1) (undo-tree-id1750 . -1) (undo-tree-id1751 . -1) (undo-tree-id1752 . -1) (undo-tree-id1753 . -1) (undo-tree-id1754 . -1) (undo-tree-id1755 . -1) (undo-tree-id1756 . -1) (undo-tree-id1757 . -1) (undo-tree-id1758 . -1) (undo-tree-id1759 . -1) (undo-tree-id1760 . -1) (undo-tree-id1761 . -1) (undo-tree-id1762 . -1) (undo-tree-id1763 . -1) (undo-tree-id1764 . -1) (undo-tree-id1765 . -1) (undo-tree-id1766 . -1) (undo-tree-id1767 . -1) (undo-tree-id1768 . -1) (undo-tree-id1769 . -1) 2201 (2199 . 2201) (#("1" 0 1 (fontified t)) . -2199) (undo-tree-id1770 . -1) (undo-tree-id1771 . -1) 2200 (2199 . 2200) (2198 . 2200) (2190 . 2198) (2186 . 2190) (#("    " 0 4 (fontified nil)) . 2185) (undo-tree-id1772 . -4) (undo-tree-id1773 . -4) (2189 . 2190) (2185 . 2189)) nil (26033 26422 861495 799000) 0 nil])
([nil nil ((2203 . 2204)) nil (26033 26422 861243 773000) 0 nil])
([nil nil ((#("      led_pin_init();
" 0 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t) 12 13 (fontified t) 13 14 (fontified t) 14 15 (fontified t) 15 16 (fontified t) 16 17 (fontified t) 17 18 (fontified t) 18 19 (fontified t face (rainbow-delimiters-depth-4-face)) 19 20 (fontified t face (rainbow-delimiters-depth-4-face)) 20 21 (fontified t) 21 22 (fontified t)) . 2144) (undo-tree-id1801 . -21) (undo-tree-id1802 . -17) (undo-tree-id1803 . -17) (undo-tree-id1804 . -17) (undo-tree-id1805 . -17) (undo-tree-id1806 . -17) (undo-tree-id1807 . -17) (undo-tree-id1808 . -17) (undo-tree-id1809 . -17) (undo-tree-id1810 . -17) (undo-tree-id1811 . -17) (undo-tree-id1812 . -17) (undo-tree-id1813 . -17) (undo-tree-id1814 . -17) (undo-tree-id1815 . -17) (undo-tree-id1816 . -17) (undo-tree-id1817 . -17) (undo-tree-id1818 . -17) (undo-tree-id1819 . -17) (undo-tree-id1820 . -17) (undo-tree-id1821 . -17) (undo-tree-id1822 . -17) (undo-tree-id1823 . -17) (undo-tree-id1824 . -17) (undo-tree-id1825 . -17) (undo-tree-id1826 . -17) (undo-tree-id1827 . -17) (undo-tree-id1828 . -17) (undo-tree-id1829 . -17) (undo-tree-id1830 . -17) (undo-tree-id1831 . -17) (undo-tree-id1832 . -17) (undo-tree-id1833 . -17) (undo-tree-id1834 . -17) (undo-tree-id1835 . -17) (undo-tree-id1836 . -22) 2161 (t 26033 26422 938105 133000)) nil (26033 26455 215379 650000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2194 . 2195) (#("
" 0 1 (fontified nil)) . -2210) (2188 . 2211)) nil (26033 26455 215320 735000) 0 nil])
([nil nil ((2189 . 2191) (#("      " 0 5 (fontified t) 5 6 (fontified t rear-nonsticky t)) . -2189) (undo-tree-id1778 . -6) (undo-tree-id1779 . -6) (undo-tree-id1780 . -6) (undo-tree-id1781 . -6) (undo-tree-id1782 . -6) (undo-tree-id1783 . -6) (undo-tree-id1784 . -6) (undo-tree-id1785 . -6) (undo-tree-id1786 . -6) (undo-tree-id1787 . -6) (undo-tree-id1788 . -6) (undo-tree-id1789 . -6) (undo-tree-id1790 . -6) (undo-tree-id1791 . -6) (undo-tree-id1792 . -6) (undo-tree-id1793 . -6) (undo-tree-id1794 . -6) (undo-tree-id1795 . -6) (undo-tree-id1796 . -6) (undo-tree-id1797 . -6) (undo-tree-id1798 . -6) (undo-tree-id1799 . -6) (undo-tree-id1800 . -6) 2195) nil (26033 26455 215307 781000) 0 nil])
([nil nil ((#("1" 0 1 (c-in-sws t fontified t)) . 517) (undo-tree-id1839 . -1) (undo-tree-id1840 . -1) (t 26033 26455 287882 850000)) nil (26033 26826 470690 503000) 0 nil])
([nil nil ((#("8" 0 1 (fontified t c-in-sws t)) . 517) (undo-tree-id1837 . -1) (undo-tree-id1838 . -1)) nil (26033 26826 470680 125000) 0 nil])
([nil nil ((517 . 518)) nil (26033 26826 470651 473000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2002) (undo-tree-id1860 . -1) (undo-tree-id1861 . -1) (t 26033 26826 544745 207000)) nil (26033 27001 220362 289000) 0 nil])
([nil nil ((#("  
" 0 2 (fontified t) 2 3 (fontified t)) . 2002) (undo-tree-id1841 . -3) (undo-tree-id1842 . -2) (undo-tree-id1843 . -1) (undo-tree-id1844 . -3) (undo-tree-id1845 . -3) (undo-tree-id1846 . -3) (undo-tree-id1847 . -3) (undo-tree-id1848 . -3) (undo-tree-id1849 . -3) (undo-tree-id1850 . -3) (undo-tree-id1851 . -1) (undo-tree-id1852 . -1) (undo-tree-id1853 . -1) (undo-tree-id1854 . -1) (undo-tree-id1855 . -1) (undo-tree-id1856 . -1) (undo-tree-id1857 . -1) (undo-tree-id1858 . -2) (undo-tree-id1859 . -3)) nil (26033 27001 220347 920000) 0 nil])
([nil nil ((#("      
" 0 2 (fontified t) 2 7 (fontified t)) . 1969) (undo-tree-id1862 . -6) (undo-tree-id1863 . -7) (undo-tree-id1864 . -7) (undo-tree-id1865 . -7) (undo-tree-id1866 . -7) (undo-tree-id1867 . -7) (undo-tree-id1868 . -7) (undo-tree-id1869 . -7) (undo-tree-id1870 . -7) (t 26033 27001 260890 964000)) nil (26033 27004 217383 665000) 0 nil])
([nil nil ((apply -12 2438 2510 undo--wrap-and-run-primitive-undo 2438 2510 ((2505 . 2508) (2478 . 2481) (2470 . 2473) (2443 . 2446) 2498)) (t 26033 27004 268870 419000)) nil (26033 27268 818456 758000) 0 nil])
([nil nil ((2525 . 2526) (nil syntax-table nil 2531 . 2532) (nil syntax-table (1) 2521 . 2522) (2522 . 2525) (#("d" 0 1 (fontified t face font-lock-string-face)) . -2522) (undo-tree-id1876 . -1) (undo-tree-id1877 . -1) 2523 (2522 . 2523) (#("\\" 0 1 (fontified t face font-lock-string-face)) . -2522) (undo-tree-id1878 . -1) (undo-tree-id1879 . -1) (nil syntax-table nil 2529 . 2530) (nil syntax-table (1) 2521 . 2522) (#("d" 0 1 (fontified t face font-lock-string-face)) . -2523) (undo-tree-id1880 . -1) (undo-tree-id1881 . -1) (#("a" 0 1 (fontified t face font-lock-string-face)) . -2524) (undo-tree-id1882 . -1) (undo-tree-id1883 . -1) 2525 (2523 . 2525) (nil syntax-table nil 2529 . 2530) (nil syntax-table (1) 2521 . 2522) (2522 . 2523) (2522 . 2523) (nil syntax-table nil 2527 . 2528) (nil syntax-table (1) 2521 . 2522) (2521 . 2522) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -2521) (nil syntax-table nil 2527 . 2528) (nil syntax-table (1) 2521 . 2522) (2521 . 2522) (2520 . 2522) (2514 . 2520) (#("u" 0 1 (fontified t c-is-sws t c-type c-decl-id-start face font-lock-type-face)) . -2514) (undo-tree-id1884 . -1) (undo-tree-id1885 . -1) (#("p" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -2515) (undo-tree-id1886 . -1) (undo-tree-id1887 . -1) 2516 (2515 . 2516) (2510 . 2514) 2511 (2510 . 2511)) nil (26033 27268 818447 783000) 0 nil])
([nil nil ((2531 . 2533) (#("t" 0 1 (fontified t)) . -2531) (undo-tree-id1874 . -1) (undo-tree-id1875 . -1) 2532 (2528 . 2532) (2527 . 2528)) nil (26033 27268 818412 982000) 0 nil])
([nil nil ((2538 . 2539)) nil (26033 27268 818405 365000) 0 nil])
([nil nil ((#(")    " 0 1 (fontified t face (rainbow-delimiters-depth-3-face)) 1 2 (fontified t) 2 5 (fontified t)) . 2533) (undo-tree-id1871 . 4) (undo-tree-id1872 . -4) (undo-tree-id1873 . -5)) nil (26033 27268 818401 4000) 0 nil])
([nil nil ((2533 . 2534) (#(")" 0 1 (fontified nil)) . -2533) (2533 . 2534)) nil (26033 27268 818364 231000) 0 nil])
([nil nil ((2523 . 2524) (#("i" 0 1 (fontified t face font-lock-string-face)) . -2523) (undo-tree-id1888 . -1) (undo-tree-id1889 . -1) (undo-tree-id1890 . -1) (undo-tree-id1891 . -1) (undo-tree-id1892 . -1) (undo-tree-id1893 . -1) (undo-tree-id1894 . -1) (undo-tree-id1895 . -1) (undo-tree-id1896 . -1) (undo-tree-id1897 . -1) (undo-tree-id1898 . -1) (undo-tree-id1899 . -1) (undo-tree-id1900 . -1) (undo-tree-id1901 . -1) (undo-tree-id1902 . -1) (undo-tree-id1903 . -1) (undo-tree-id1904 . -1) (undo-tree-id1905 . -1) (undo-tree-id1906 . -1) (undo-tree-id1907 . -1) 2524 (t 26033 27268 893230 203000)) nil (26033 27473 440985 162000) 0 nil])
([nil nil ((2529 . 2533)) nil (26033 27473 440916 982000) 0 nil])
([nil nil ((2510 . 2514) (2510 . 2512) (t 26033 27473 492165 663000)) nil (26033 27837 263352 178000) 0 nil])
([nil nil ((#("/" 0 1 (c-is-sws t c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 2443) (undo-tree-id2057 . -1) (undo-tree-id2058 . -1) (undo-tree-id2059 . -1) (undo-tree-id2060 . -1) (undo-tree-id2061 . -1) (undo-tree-id2062 . -1) (undo-tree-id2063 . -1) (undo-tree-id2064 . -1) (undo-tree-id2065 . -1) (t 26033 27837 338572 722000)) nil (26033 27851 218678 648000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . 2443) (undo-tree-id2055 . -1) (undo-tree-id2056 . -1)) nil (26033 27851 218662 743000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2468) (undo-tree-id1986 . -1) (undo-tree-id1987 . -1) (undo-tree-id1988 . -1) (undo-tree-id1989 . -1) (undo-tree-id1990 . -1) (undo-tree-id1991 . -1) (undo-tree-id1992 . -1) (undo-tree-id1993 . -1) (undo-tree-id1994 . -1) (undo-tree-id1995 . -1) (undo-tree-id1996 . -1) (undo-tree-id1997 . -1) (undo-tree-id1998 . -1) (undo-tree-id1999 . -1) (undo-tree-id2000 . -1) (undo-tree-id2001 . -1) (undo-tree-id2002 . -1) (undo-tree-id2003 . -1) (undo-tree-id2004 . -1) (undo-tree-id2005 . -1) (undo-tree-id2006 . -1) (undo-tree-id2007 . -1) (undo-tree-id2008 . -1) (undo-tree-id2009 . -1) (undo-tree-id2010 . -1) (undo-tree-id2011 . -1) (undo-tree-id2012 . -1) (undo-tree-id2013 . -1) (undo-tree-id2014 . -1) (undo-tree-id2015 . -1) (undo-tree-id2016 . -1) (undo-tree-id2017 . -1) (undo-tree-id2018 . -1) (#("*" 0 1 (fontified t)) . -2469) (undo-tree-id2019 . -1) (undo-tree-id2020 . -1) (undo-tree-id2021 . -1) (undo-tree-id2022 . -1) (undo-tree-id2023 . -1) (undo-tree-id2024 . -1) (undo-tree-id2025 . -1) (undo-tree-id2026 . -1) (undo-tree-id2027 . -1) (undo-tree-id2028 . -1) (undo-tree-id2029 . -1) (undo-tree-id2030 . -1) (undo-tree-id2031 . -1) (undo-tree-id2032 . -1) (undo-tree-id2033 . -1) (undo-tree-id2034 . -1) (undo-tree-id2035 . -1) (undo-tree-id2036 . -1) (undo-tree-id2037 . -1) (undo-tree-id2038 . -1) (undo-tree-id2039 . -1) (undo-tree-id2040 . -1) (undo-tree-id2041 . -1) (#("/" 0 1 (fontified t)) . -2470) (undo-tree-id2042 . -1) (undo-tree-id2043 . -1) (undo-tree-id2044 . -1) (undo-tree-id2045 . -1) (undo-tree-id2046 . -1) (undo-tree-id2047 . -1) (undo-tree-id2048 . -1) (undo-tree-id2049 . -1) (undo-tree-id2050 . -1) (undo-tree-id2051 . -1) (undo-tree-id2052 . -1) (undo-tree-id2053 . -1) (undo-tree-id2054 . -1) 2471) nil (26033 27851 218648 836000) 0 nil])
([nil nil ((#("/* " 0 1 (c-in-sws t c-is-sws t fontified t face font-lock-comment-delimiter-face) 1 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 2473) (undo-tree-id1977 . -2) (undo-tree-id1978 . -1) (undo-tree-id1979 . -1) (undo-tree-id1980 . -1) (undo-tree-id1981 . -1) (undo-tree-id1982 . -1) (undo-tree-id1983 . -1) (undo-tree-id1984 . -1) (undo-tree-id1985 . -3)) nil (26033 27851 218275 217000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2497) (undo-tree-id1908 . -1) (undo-tree-id1909 . -1) (undo-tree-id1910 . -1) (undo-tree-id1911 . -1) (undo-tree-id1912 . -1) (undo-tree-id1913 . -1) (undo-tree-id1914 . -1) (undo-tree-id1915 . -1) (undo-tree-id1916 . -1) (undo-tree-id1917 . -1) (undo-tree-id1918 . -1) (undo-tree-id1919 . -1) (undo-tree-id1920 . -1) (undo-tree-id1921 . -1) (undo-tree-id1922 . -1) (undo-tree-id1923 . -1) (undo-tree-id1924 . -1) (undo-tree-id1925 . -1) (undo-tree-id1926 . -1) (undo-tree-id1927 . -1) (undo-tree-id1928 . -1) (undo-tree-id1929 . -1) (undo-tree-id1930 . -1) (undo-tree-id1931 . -1) (undo-tree-id1932 . -1) (undo-tree-id1933 . -1) (undo-tree-id1934 . -1) (undo-tree-id1935 . -1) (undo-tree-id1936 . -1) (undo-tree-id1937 . -1) (undo-tree-id1938 . -1) (undo-tree-id1939 . -1) (undo-tree-id1940 . -1) (#("*" 0 1 (fontified t)) . -2498) (undo-tree-id1941 . -1) (undo-tree-id1942 . -1) (undo-tree-id1943 . -1) (undo-tree-id1944 . -1) (undo-tree-id1945 . -1) (undo-tree-id1946 . -1) (undo-tree-id1947 . -1) (undo-tree-id1948 . -1) (undo-tree-id1949 . -1) (undo-tree-id1950 . -1) (undo-tree-id1951 . -1) (undo-tree-id1952 . -1) (undo-tree-id1953 . -1) (undo-tree-id1954 . -1) (undo-tree-id1955 . -1) (undo-tree-id1956 . -1) (undo-tree-id1957 . -1) (undo-tree-id1958 . -1) (undo-tree-id1959 . -1) (undo-tree-id1960 . -1) (undo-tree-id1961 . -1) (undo-tree-id1962 . -1) (undo-tree-id1963 . -1) (#("/" 0 1 (fontified t)) . -2499) (undo-tree-id1964 . -1) (undo-tree-id1965 . -1) (undo-tree-id1966 . -1) (undo-tree-id1967 . -1) (undo-tree-id1968 . -1) (undo-tree-id1969 . -1) (undo-tree-id1970 . -1) (undo-tree-id1971 . -1) (undo-tree-id1972 . -1) (undo-tree-id1973 . -1) (undo-tree-id1974 . -1) (undo-tree-id1975 . -1) (undo-tree-id1976 . -1) 2500) nil (26033 27851 218245 315000) 0 nil])
([nil nil ((517 . 518) (#("6" 0 1 (fontified t c-in-sws t)) . -517) (undo-tree-id2123 . -1) (undo-tree-id2124 . -1) 518 (t 26033 27851 267395 992000)) nil (26033 28199 663906 545000) 0 nil])
([nil nil ((2439 . 2443) (#("     " 0 3 (c-in-sws t c-is-sws t fontified t) 3 4 (fontified t) 4 5 (fontified t)) . 2439) 2455) nil (26033 28199 663898 992000) 0 nil])
([nil nil ((2472 . 2473) (2467 . 2472) 2454) nil (26033 28199 663896 134000) 0 nil])
([nil nil ((#("    i
" 0 4 (fontified t) 4 5 (fontified t c-type c-decl-id-start face font-lock-type-face) 5 6 (fontified t)) . 2468) (undo-tree-id2066 . 1) (undo-tree-id2067 . -5) (undo-tree-id2068 . -4) (undo-tree-id2069 . -4) (undo-tree-id2070 . -4) (undo-tree-id2071 . -4) (undo-tree-id2072 . -4) (undo-tree-id2073 . -4) (undo-tree-id2074 . -4) (undo-tree-id2075 . -4) (undo-tree-id2076 . -4) (undo-tree-id2077 . -4) (undo-tree-id2078 . -4) (undo-tree-id2079 . -4) (undo-tree-id2080 . -5) (undo-tree-id2081 . -5) (undo-tree-id2082 . -5) (undo-tree-id2083 . -5) (undo-tree-id2084 . -5) (undo-tree-id2085 . -5) (undo-tree-id2086 . -5) (undo-tree-id2087 . -5) (undo-tree-id2088 . -5) (undo-tree-id2089 . -5) (undo-tree-id2090 . -5) (undo-tree-id2091 . -5) (undo-tree-id2092 . -4) (undo-tree-id2093 . -5) (undo-tree-id2094 . -5) (undo-tree-id2095 . -5) (undo-tree-id2096 . -5) (undo-tree-id2097 . -5) (undo-tree-id2098 . -5) (undo-tree-id2099 . -5) (undo-tree-id2100 . -5) (undo-tree-id2101 . -4) (undo-tree-id2102 . -4) (undo-tree-id2103 . -4) (undo-tree-id2104 . -4) (undo-tree-id2105 . -4) (undo-tree-id2106 . -4) (undo-tree-id2107 . -4) (undo-tree-id2108 . -4) (undo-tree-id2109 . -4) (undo-tree-id2110 . -4) (undo-tree-id2111 . -4) (undo-tree-id2112 . -4) (undo-tree-id2113 . -4) (undo-tree-id2114 . -4) (undo-tree-id2115 . -4) (undo-tree-id2116 . -4) (undo-tree-id2117 . -4) (undo-tree-id2118 . -4) (undo-tree-id2119 . -4) (undo-tree-id2120 . -4) (undo-tree-id2121 . -4) (undo-tree-id2122 . -6) 2472) nil (26033 28199 663886 47000) 0 nil])
([nil nil ((2443 . 2445)) nil (26033 28199 663763 44000) 0 nil])
([nil nil ((2474 . 2476)) nil (26033 28199 663752 469000) 0 nil])
([nil nil ((#("//    " 0 1 (c-in-sws t c-is-sws t fontified t face font-lock-comment-delimiter-face) 1 2 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 2 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 3 5 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 5 6 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 2506) (undo-tree-id2137 . -5) (undo-tree-id2138 . -1) (undo-tree-id2139 . -1) (undo-tree-id2140 . -1) (undo-tree-id2141 . -1) (undo-tree-id2142 . -1) (undo-tree-id2143 . -1) (undo-tree-id2144 . -1) (undo-tree-id2145 . -1) (undo-tree-id2146 . -1) (undo-tree-id2147 . -1) (undo-tree-id2148 . -1) (undo-tree-id2149 . -1) (undo-tree-id2150 . -1) (undo-tree-id2151 . -1) (undo-tree-id2152 . -6) (t 26033 28199 743897 85000)) nil (26033 28218 539018 467000) 0 nil])
([nil nil ((#("cum" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . 2521) (undo-tree-id2128 . -2) (undo-tree-id2129 . -2) (undo-tree-id2130 . -3) (undo-tree-id2131 . -3) (undo-tree-id2132 . -3) (undo-tree-id2133 . -2) (undo-tree-id2134 . -2) (undo-tree-id2135 . -2) (undo-tree-id2136 . -3)) nil (26033 28218 538983 555000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 2521) (undo-tree-id2127 . -1)) nil (26033 28218 538965 635000) 0 nil])
([nil nil ((#("data" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . 2521) (undo-tree-id2125 . -3) (undo-tree-id2126 . -4)) nil (26033 28218 538959 746000) 0 nil])
([nil nil ((2517 . 2520) (2516 . 2517)) nil (26033 28218 538935 917000) 0 nil])
([nil nil ((2539 . 2543) (2534 . 2539) (2533 . 2534) (2525 . 2533)) nil (26033 28218 538923 730000) 0 nil])
([nil nil ((2521 . 2524) (2520 . 2521) (t 26033 28218 612652 857000)) nil (26033 28378 667684 645000) 0 nil])
([nil nil ((2548 . 2552) (2547 . 2548)) nil (26033 28378 667681 752000) 0 nil])
([nil nil ((2525 . 2528) (2524 . 2525)) nil (26033 28378 667678 262000) 0 nil])
([nil current ((2562 . 2566) (#("i" 0 1 (fontified t)) . -2562) (undo-tree-id2153 . -1) (undo-tree-id2154 . -1) (#("n" 0 1 (fontified t)) . -2563) (undo-tree-id2155 . -1) (undo-tree-id2156 . -1) (#("t" 0 1 (fontified t)) . -2564) (undo-tree-id2157 . -1) (undo-tree-id2158 . -1) 2565 (2558 . 2565) (#("o" 0 1 (fontified t)) . -2558) (undo-tree-id2159 . -1) (undo-tree-id2160 . -1) (#("u" 0 1 (fontified t)) . -2559) (undo-tree-id2161 . -1) (undo-tree-id2162 . -1) (#("t" 0 1 (fontified t)) . -2560) (undo-tree-id2163 . -1) (undo-tree-id2164 . -1) 2561 (#("r" 0 1 (fontified t)) . -2561) (undo-tree-id2165 . -1) (undo-tree-id2166 . -1) 2562 (2558 . 2562) (#("m" 0 1 (fontified t)) . -2558) (undo-tree-id2167 . -1) (undo-tree-id2168 . -1) (#("a" 0 1 (fontified t)) . -2559) (undo-tree-id2169 . -1) (undo-tree-id2170 . -1) (#("i" 0 1 (fontified t)) . -2560) (undo-tree-id2171 . -1) (undo-tree-id2172 . -1) (#("n" 0 1 (fontified t)) . -2561) (undo-tree-id2173 . -1) (undo-tree-id2174 . -1) 2562 (2557 . 2562) (2556 . 2557)) nil (26033 28378 667661 950000) 0 nil])
nil
